
DebouncingPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000bc6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080006c  0080006c  00000c66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001734  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2c  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f89  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00004018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008de  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb1  00000000  00000000  00004b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005b1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	6d 02       	muls	r22, r29
  56:	78 02       	muls	r23, r24
  58:	83 02       	muls	r24, r19
  5a:	8e 02       	muls	r24, r30
  5c:	99 02       	muls	r25, r25
  5e:	a4 02       	muls	r26, r20
  60:	af 02       	muls	r26, r31

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e6 ec       	ldi	r30, 0xC6	; 198
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	ac e6       	ldi	r26, 0x6C	; 108
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a1 38       	cpi	r26, 0x81	; 129
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  98:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <BUTTONClient_EventReceive>:
* @param [in]  ClientData -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_EventReceive(STR_BTNClient_t * const ClientData)
{  
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
   
   if (NULL_PTR != ClientData)
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	09 f4       	brne	.+2      	; 0xaa <BUTTONClient_EventReceive+0xa>
  a8:	45 c0       	rjmp	.+138    	; 0x134 <BUTTONClient_EventReceive+0x94>
  aa:	ec 01       	movw	r28, r24
   {
      /* State Machine */
      switch (ClientData->ENU_ClientState)
  ac:	88 85       	ldd	r24, Y+8	; 0x08
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	79 f0       	breq	.+30     	; 0xd0 <BUTTONClient_EventReceive+0x30>
  b2:	18 f0       	brcs	.+6      	; 0xba <BUTTONClient_EventReceive+0x1a>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	21 f1       	breq	.+72     	; 0x100 <BUTTONClient_EventReceive+0x60>
  b8:	3f c0       	rjmp	.+126    	; 0x138 <BUTTONClient_EventReceive+0x98>
      {
         /* Get First Button Reading State */
         case ButtonClient_Ready:
            RetErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_OldButtonState);
  ba:	be 01       	movw	r22, r28
  bc:	6e 5f       	subi	r22, 0xFE	; 254
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	88 81       	ld	r24, Y
  c2:	0e 94 02 01 	call	0x204	; 0x204 <BUTTON_getState>
            if (ERROR_OK == RetErrorState)
  c6:	81 11       	cpse	r24, r1
  c8:	39 c0       	rjmp	.+114    	; 0x13c <BUTTONClient_EventReceive+0x9c>
            {
               /* Go to debounce Delay State. */
               ClientData->ENU_ClientState = ButtonClient_Delay;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	88 87       	std	Y+8, r24	; 0x08
  ce:	39 c0       	rjmp	.+114    	; 0x142 <BUTTONClient_EventReceive+0xa2>
            }
            break;
            /* Debounce Delay State */
         case ButtonClient_Delay:
            /* Call Delay Status. */
            RetErrorState = TIM_DelayStatus(ClientData->u8_TimerCh, BUTTONClient_EventReceive);
  d0:	60 e5       	ldi	r22, 0x50	; 80
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	0e 94 0b 04 	call	0x816	; 0x816 <TIM_DelayStatus>
            /* If Delay is not used by another API. */
            if (TIMER_E_DELAY_EMPTY == RetErrorState)
  da:	8b 3f       	cpi	r24, 0xFB	; 251
  dc:	59 f4       	brne	.+22     	; 0xf4 <BUTTONClient_EventReceive+0x54>
            {
               /* Start Delay with 20 Milliseconds. */
               TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
  de:	4c 81       	ldd	r20, Y+4	; 0x04
  e0:	5d 81       	ldd	r21, Y+5	; 0x05
  e2:	6e 81       	ldd	r22, Y+6	; 0x06
  e4:	7f 81       	ldd	r23, Y+7	; 0x07
  e6:	20 e5       	ldi	r18, 0x50	; 80
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <TIM_DelayMs>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	27 c0       	rjmp	.+78     	; 0x142 <BUTTONClient_EventReceive+0xa2>
            {
               /* Start Delay with 20 Milliseconds. */
               TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
            }
            /* If Delay Finished */
            else if (ERROR_OK == RetErrorState)
  f4:	81 11       	cpse	r24, r1
  f6:	24 c0       	rjmp	.+72     	; 0x140 <BUTTONClient_EventReceive+0xa0>
            {
               /* Go To Get Second Button Reading State. */
               ClientData->ENU_ClientState = ButtonClient_StateReady;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	88 87       	std	Y+8, r24	; 0x08
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	21 c0       	rjmp	.+66     	; 0x142 <BUTTONClient_EventReceive+0xa2>
               /* Do Nothing */
            }
            break;
            /* Get Second Button Reading State. */
         case ButtonClient_StateReady:
            RetErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_ButtonState);
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	88 81       	ld	r24, Y
 108:	0e 94 02 01 	call	0x204	; 0x204 <BUTTON_getState>
            if (ERROR_OK == RetErrorState)
 10c:	81 11       	cpse	r24, r1
 10e:	0b c0       	rjmp	.+22     	; 0x126 <BUTTONClient_EventReceive+0x86>
            {
               /* Compare the button old state with the new state. */
               if (ClientData->u8_OldButtonState == ClientData->u8_ButtonState)
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	98 13       	cpse	r25, r24
 116:	09 c0       	rjmp	.+18     	; 0x12a <BUTTONClient_EventReceive+0x8a>
               {
                  /* Make Sure Callback is not pointing to null. */
                  if (NULL_PTR != ClientData->EventCallback)
 118:	e9 85       	ldd	r30, Y+9	; 0x09
 11a:	fa 85       	ldd	r31, Y+10	; 0x0a
 11c:	30 97       	sbiw	r30, 0x00	; 0
 11e:	39 f0       	breq	.+14     	; 0x12e <BUTTONClient_EventReceive+0x8e>
                  {
                     /* Call The callback function. */
                     ClientData->EventCallback();
 120:	09 95       	icall
                  }
                  ErrorState = ERROR_OK;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	05 c0       	rjmp	.+10     	; 0x130 <BUTTONClient_EventReceive+0x90>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	03 c0       	rjmp	.+6      	; 0x130 <BUTTONClient_EventReceive+0x90>
                  }
                  ErrorState = ERROR_OK;
               }
               else
               {
                  ErrorState = ERROR_NOK;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <BUTTONClient_EventReceive+0x90>
                  if (NULL_PTR != ClientData->EventCallback)
                  {
                     /* Call The callback function. */
                     ClientData->EventCallback();
                  }
                  ErrorState = ERROR_OK;
 12e:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
               /* Do Nothing */
            }
            /* Go To New Button Reading State. */
            ClientData->ENU_ClientState = ButtonClient_Ready;
 130:	18 86       	std	Y+8, r1	; 0x08
            break;
 132:	07 c0       	rjmp	.+14     	; 0x142 <BUTTONClient_EventReceive+0xa2>
            break;
      }
   }
   else
   {
      ErrorState = ERROR_NOK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	05 c0       	rjmp	.+10     	; 0x142 <BUTTONClient_EventReceive+0xa2>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	03 c0       	rjmp	.+6      	; 0x142 <BUTTONClient_EventReceive+0xa2>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	01 c0       	rjmp	.+2      	; 0x142 <BUTTONClient_EventReceive+0xa2>
 140:	81 e0       	ldi	r24, 0x01	; 1
      ErrorState = ERROR_NOK;
   }

   /* Return Function Error State. */
   return ErrorState;
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <BUTTONClient_Init>:
* @param [in]  ClientData  -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_Init(STR_BTNClient_t * const ClientData)
{
 148:	fc 01       	movw	r30, r24
   ERROR_STATE_t Client_ErrorState;

   if (NULL_PTR != ClientData)
 14a:	89 2b       	or	r24, r25
 14c:	79 f0       	breq	.+30     	; 0x16c <BUTTONClient_Init+0x24>
   {
      ClientData->u8_ButtonCh = BTN_INVALID_CH;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
      ClientData->u8_ButtonState = 0;
 152:	11 82       	std	Z+1, r1	; 0x01
      ClientData->u8_OldButtonState = 0;
 154:	12 82       	std	Z+2, r1	; 0x02
      ClientData->u8_TimerCh = INVALID_TIMER_CH;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	83 83       	std	Z+3, r24	; 0x03
      ClientData->u32_DebounceDelay = 0;
 15a:	14 82       	std	Z+4, r1	; 0x04
 15c:	15 82       	std	Z+5, r1	; 0x05
 15e:	16 82       	std	Z+6, r1	; 0x06
 160:	17 82       	std	Z+7, r1	; 0x07
      ClientData->ENU_ClientState = ButtonClient_Ready;
 162:	10 86       	std	Z+8, r1	; 0x08
      ClientData->EventCallback = NULL_PTR;
 164:	12 86       	std	Z+10, r1	; 0x0a
 166:	11 86       	std	Z+9, r1	; 0x09

      Client_ErrorState = ERROR_OK;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
   }
   else
   {
      Client_ErrorState = ERROR_NOK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
   }

   return Client_ErrorState;
}
 16e:	08 95       	ret

00000170 <BUTTONClient_SetBtn>:
*/
ERROR_STATE_t BUTTONClient_SetBtn(STR_BTNClient_t * const ClientData, uint8_t BTN_CH)
{
   ERROR_STATE_t Client_ErrorState;
   
   if (NULL_PTR != ClientData)
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	31 f0       	breq	.+12     	; 0x180 <BUTTONClient_SetBtn+0x10>
   {
      if (BTN_CH >= BTN_INVALID_CH)
 174:	61 11       	cpse	r22, r1
 176:	06 c0       	rjmp	.+12     	; 0x184 <BUTTONClient_SetBtn+0x14>
      {
         Client_ErrorState = ERROR_NOK;
      }
      else
      {
         ClientData->u8_ButtonCh = BTN_CH;
 178:	fc 01       	movw	r30, r24
 17a:	60 83       	st	Z, r22
         Client_ErrorState = ERROR_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
      }
   }
   else
   {
      Client_ErrorState = ERROR_NOK;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
   
   if (NULL_PTR != ClientData)
   {
      if (BTN_CH >= BTN_INVALID_CH)
      {
         Client_ErrorState = ERROR_NOK;
 184:	81 e0       	ldi	r24, 0x01	; 1
   {
      Client_ErrorState = ERROR_NOK;
   }
   
   return Client_ErrorState;
}
 186:	08 95       	ret

00000188 <BUTTONClient_SetTimer>:
*/
ERROR_STATE_t BUTTONClient_SetTimer(STR_BTNClient_t * const ClientData, uint8_t TIM_CH, uint32_t DelayMS)
{
   ERROR_STATE_t Client_ErrorState;
   
   if (NULL_PTR != ClientData)
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	51 f0       	breq	.+20     	; 0x1a0 <BUTTONClient_SetTimer+0x18>
   {
      if (TIM_CH >= INVALID_TIMER_CH)
 18c:	63 30       	cpi	r22, 0x03	; 3
 18e:	50 f4       	brcc	.+20     	; 0x1a4 <BUTTONClient_SetTimer+0x1c>
      {
         Client_ErrorState = ERROR_NOK;
      }
      else
      {
         ClientData->u8_TimerCh = TIM_CH;
 190:	fc 01       	movw	r30, r24
 192:	63 83       	std	Z+3, r22	; 0x03
         ClientData->u32_DebounceDelay = DelayMS;
 194:	24 83       	std	Z+4, r18	; 0x04
 196:	35 83       	std	Z+5, r19	; 0x05
 198:	46 83       	std	Z+6, r20	; 0x06
 19a:	57 83       	std	Z+7, r21	; 0x07
         Client_ErrorState = ERROR_OK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
      }
   }
   else
   {
      Client_ErrorState = ERROR_NOK;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
   
   if (NULL_PTR != ClientData)
   {
      if (TIM_CH >= INVALID_TIMER_CH)
      {
         Client_ErrorState = ERROR_NOK;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
   {
      Client_ErrorState = ERROR_NOK;
   }

   return Client_ErrorState;
}
 1a6:	08 95       	ret

000001a8 <BUTTONClient_SetEventCallback>:
*/
ERROR_STATE_t BUTTONClient_SetEventCallback(STR_BTNClient_t * const ClientData, Ptr_VoidFuncVoid_t Callback)
{
   ERROR_STATE_t Client_ErrorState;
   
   if (NULL_PTR != ClientData)
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	41 f0       	breq	.+16     	; 0x1bc <BUTTONClient_SetEventCallback+0x14>
   {
      if (NULL_PTR == Callback)
 1ac:	61 15       	cp	r22, r1
 1ae:	71 05       	cpc	r23, r1
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <BUTTONClient_SetEventCallback+0x18>
      {
         Client_ErrorState = ERROR_NOK;
      }
      else
      {
         ClientData->EventCallback = Callback;
 1b2:	fc 01       	movw	r30, r24
 1b4:	72 87       	std	Z+10, r23	; 0x0a
 1b6:	61 87       	std	Z+9, r22	; 0x09
         Client_ErrorState = ERROR_OK;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret
      }
   }
   else
   {
      Client_ErrorState = ERROR_NOK;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	08 95       	ret
   
   if (NULL_PTR != ClientData)
   {
      if (NULL_PTR == Callback)
      {
         Client_ErrorState = ERROR_NOK;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
   {
      Client_ErrorState = ERROR_NOK;
   }
   
   return Client_ErrorState;
}
 1c2:	08 95       	ret

000001c4 <Button_Init>:
* @param [in]  BUTTON_CH -  Button channel number.
*
* @return button state.
*/
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 1ca:	81 11       	cpse	r24, r1
 1cc:	14 c0       	rjmp	.+40     	; 0x1f6 <Button_Init+0x32>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 1ce:	81 11       	cpse	r24, r1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <Button_Init+0x18>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 1d2:	e0 e6       	ldi	r30, 0x60	; 96
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	c0 81       	ld	r28, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 1d8:	d1 81       	ldd	r29, Z+1	; 0x01
            BTN_PullUp = gastr_Button_Config[BTN_0].u8_PullUp;
 1da:	12 81       	ldd	r17, Z+2	; 0x02
            BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
            break;
      }
      
      /* Init Button Pins */
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6d 2f       	mov	r22, r29
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_SetPinDirection>
      if(PULL_UP == BTN_PullUp)
 1e6:	11 30       	cpi	r17, 0x01	; 1
 1e8:	41 f4       	brne	.+16     	; 0x1fa <Button_Init+0x36>
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
 1ea:	6d 2f       	mov	r22, r29
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 89 01 	call	0x312	; 0x312 <DIO_EnablePinPullup>
      }
      BUTTON_ErrorState = ERROR_OK;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <Button_Init+0x38>
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <Button_Init+0x38>
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
      if(PULL_UP == BTN_PullUp)
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
      }
      BUTTON_ErrorState = ERROR_OK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* return function Error State. */   
   return BUTTON_ErrorState;
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <BUTTON_getState>:
* @return button state.
*/
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 204:	81 11       	cpse	r24, r1
 206:	11 c0       	rjmp	.+34     	; 0x22a <BUTTON_getState+0x26>
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
   }
   else if(NULL_PTR == State)
 208:	61 15       	cp	r22, r1
 20a:	71 05       	cpc	r23, r1
 20c:	81 f0       	breq	.+32     	; 0x22e <BUTTON_getState+0x2a>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 20e:	81 11       	cpse	r24, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <BUTTON_getState+0x16>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 212:	e0 e6       	ldi	r30, 0x60	; 96
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 218:	21 81       	ldd	r18, Z+1	; 0x01
 21a:	ab 01       	movw	r20, r22
      
      /* variable to get error status of the DIO API. */
      DIO_ERROR_state_t e_status;
      
      /* read DIO pin. */
      e_status = DIO_ReadPin(BTN_Port, BTN_Pin, State);
 21c:	62 2f       	mov	r22, r18
 21e:	89 2f       	mov	r24, r25
 220:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_ReadPin>
      
      /* return data if DIO API returns success. */
      if(E_DIO_SUCCESS == e_status)
 224:	81 11       	cpse	r24, r1
 226:	05 c0       	rjmp	.+10     	; 0x232 <BUTTON_getState+0x2e>
 228:	08 95       	ret
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 22a:	8e ef       	ldi	r24, 0xFE	; 254
 22c:	08 95       	ret
   }
   else if(NULL_PTR == State)
   {
      BUTTON_ErrorState = BTN_E_NULL_PTR;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	08 95       	ret
      {
         BUTTON_ErrorState = ERROR_OK;
      }
      else
      {
         BUTTON_ErrorState = ERROR_NOK;
 232:	81 e0       	ldi	r24, 0x01	; 1
      }
   }   
   
   /* return function Error State. */
   return BUTTON_ErrorState;
 234:	08 95       	ret

00000236 <GreenLedMain>:
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
void GreenLedMain(void)
{
   /* If Button is Pressed */
   if(PRESSED == GreenLed_BTNClient.u8_ButtonState && OldButtonState != GreenLed_BTNClient.u8_ButtonState)
 236:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x1>
 23a:	81 11       	cpse	r24, r1
 23c:	08 c0       	rjmp	.+16     	; 0x24e <GreenLedMain+0x18>
 23e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <OldButtonState>
 242:	89 17       	cp	r24, r25
 244:	21 f0       	breq	.+8      	; 0x24e <GreenLedMain+0x18>
   {
      /* Toggle Pin */
      DIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_TogglePin>
   }
   else{/* Do Nothing */}
   OldButtonState = GreenLed_BTNClient.u8_ButtonState;
 24e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x1>
 252:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <OldButtonState>
 256:	08 95       	ret

00000258 <main>:
/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
   /* Init Button Pins */
   Button_Init(BTN_0);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Button_Init>
   
   /* Init Led Pin */
   DIO_SetPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_SetPinDirection>
   
   /* Init Button Client */
   BUTTONClient_Init(&GreenLed_BTNClient);
 268:	8c e6       	ldi	r24, 0x6C	; 108
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 a4 00 	call	0x148	; 0x148 <BUTTONClient_Init>
   BUTTONClient_SetBtn(&GreenLed_BTNClient, BTN_0);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	8c e6       	ldi	r24, 0x6C	; 108
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 b8 00 	call	0x170	; 0x170 <BUTTONClient_SetBtn>
   BUTTONClient_SetTimer(&GreenLed_BTNClient, TIMER_2, 20);
 27a:	24 e1       	ldi	r18, 0x14	; 20
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	8c e6       	ldi	r24, 0x6C	; 108
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 c4 00 	call	0x188	; 0x188 <BUTTONClient_SetTimer>
   BUTTONClient_SetEventCallback(&GreenLed_BTNClient, GreenLedMain);
 28c:	6b e1       	ldi	r22, 0x1B	; 27
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	8c e6       	ldi	r24, 0x6C	; 108
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <BUTTONClient_SetEventCallback>
   
   while (1) 
   {
      BUTTONClient_EventReceive(&GreenLed_BTNClient);
 298:	8c e6       	ldi	r24, 0x6C	; 108
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 50 00 	call	0xa0	; 0xa0 <BUTTONClient_EventReceive>
 2a0:	fb cf       	rjmp	.-10     	; 0x298 <main+0x40>

000002a2 <DIO_SetPinDirection>:
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 2a2:	68 30       	cpi	r22, 0x08	; 8
 2a4:	80 f5       	brcc	.+96     	; 0x306 <DIO_SetPinDirection+0x64>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	79 f0       	breq	.+30     	; 0x2c8 <DIO_SetPinDirection+0x26>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_SetPinDirection+0x14>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	31 f0       	breq	.+12     	; 0x2bc <DIO_SetPinDirection+0x1a>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <DIO_SetPinDirection+0x20>
 2b4:	2a c0       	rjmp	.+84     	; 0x30a <DIO_SetPinDirection+0x68>
 2b6:	ea e3       	ldi	r30, 0x3A	; 58
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <DIO_SetPinDirection+0x2a>
 2bc:	e4 e3       	ldi	r30, 0x34	; 52
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <DIO_SetPinDirection+0x2a>
 2c2:	e1 e3       	ldi	r30, 0x31	; 49
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_SetPinDirection+0x2a>
 2c8:	e7 e3       	ldi	r30, 0x37	; 55
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	61 f4       	brne	.+24     	; 0x2e8 <DIO_SetPinDirection+0x46>
 2d0:	20 81       	ld	r18, Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_SetPinDirection+0x3a>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_SetPinDirection+0x36>
 2e0:	82 2b       	or	r24, r18
 2e2:	80 83       	st	Z, r24
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
 2e8:	41 11       	cpse	r20, r1
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <DIO_SetPinDirection+0x6c>
 2ec:	20 81       	ld	r18, Z
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_SetPinDirection+0x56>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_SetPinDirection+0x52>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	80 83       	st	Z, r24
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	08 95       	ret
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	08 95       	ret
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	08 95       	ret

00000312 <DIO_EnablePinPullup>:
 312:	68 30       	cpi	r22, 0x08	; 8
 314:	f8 f4       	brcc	.+62     	; 0x354 <DIO_EnablePinPullup+0x42>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	79 f0       	breq	.+30     	; 0x338 <DIO_EnablePinPullup+0x26>
 31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_EnablePinPullup+0x14>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	31 f0       	breq	.+12     	; 0x32c <DIO_EnablePinPullup+0x1a>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	39 f0       	breq	.+14     	; 0x332 <DIO_EnablePinPullup+0x20>
 324:	19 c0       	rjmp	.+50     	; 0x358 <DIO_EnablePinPullup+0x46>
 326:	eb e3       	ldi	r30, 0x3B	; 59
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	08 c0       	rjmp	.+16     	; 0x33c <DIO_EnablePinPullup+0x2a>
 32c:	e5 e3       	ldi	r30, 0x35	; 53
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	05 c0       	rjmp	.+10     	; 0x33c <DIO_EnablePinPullup+0x2a>
 332:	e2 e3       	ldi	r30, 0x32	; 50
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_EnablePinPullup+0x2a>
 338:	e8 e3       	ldi	r30, 0x38	; 56
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	20 81       	ld	r18, Z
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_EnablePinPullup+0x36>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_EnablePinPullup+0x32>
 34c:	82 2b       	or	r24, r18
 34e:	80 83       	st	Z, r24
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	08 95       	ret
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	08 95       	ret

0000035c <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 35c:	41 15       	cp	r20, r1
 35e:	51 05       	cpc	r21, r1
 360:	39 f1       	breq	.+78     	; 0x3b0 <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 362:	68 30       	cpi	r22, 0x08	; 8
 364:	38 f5       	brcc	.+78     	; 0x3b4 <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	79 f0       	breq	.+30     	; 0x388 <DIO_ReadPin+0x2c>
 36a:	28 f0       	brcs	.+10     	; 0x376 <DIO_ReadPin+0x1a>
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	31 f0       	breq	.+12     	; 0x37c <DIO_ReadPin+0x20>
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	39 f0       	breq	.+14     	; 0x382 <DIO_ReadPin+0x26>
 374:	21 c0       	rjmp	.+66     	; 0x3b8 <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 376:	e9 e3       	ldi	r30, 0x39	; 57
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	08 c0       	rjmp	.+16     	; 0x38c <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 37c:	e3 e3       	ldi	r30, 0x33	; 51
 37e:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 380:	05 c0       	rjmp	.+10     	; 0x38c <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 382:	e0 e3       	ldi	r30, 0x30	; 48
 384:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 388:	e6 e3       	ldi	r30, 0x36	; 54
 38a:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 38c:	80 81       	ld	r24, Z
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_ReadPin+0x3a>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_ReadPin+0x36>
 39a:	80 ff       	sbrs	r24, 0
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	fa 01       	movw	r30, r20
 3a2:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 3a8:	fa 01       	movw	r30, r20
 3aa:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 3b8:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 3ba:	08 95       	ret

000003bc <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 3bc:	68 30       	cpi	r22, 0x08	; 8
 3be:	f8 f4       	brcc	.+62     	; 0x3fe <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	79 f0       	breq	.+30     	; 0x3e2 <DIO_TogglePin+0x26>
 3c4:	28 f0       	brcs	.+10     	; 0x3d0 <DIO_TogglePin+0x14>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	31 f0       	breq	.+12     	; 0x3d6 <DIO_TogglePin+0x1a>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	39 f0       	breq	.+14     	; 0x3dc <DIO_TogglePin+0x20>
 3ce:	19 c0       	rjmp	.+50     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 3d0:	eb e3       	ldi	r30, 0x3B	; 59
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 3d6:	e5 e3       	ldi	r30, 0x35	; 53
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 3dc:	e2 e3       	ldi	r30, 0x32	; 50
 3de:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 3e2:	e8 e3       	ldi	r30, 0x38	; 56
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 3e6:	20 81       	ld	r18, Z
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_TogglePin+0x36>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_TogglePin+0x32>
 3f6:	82 27       	eor	r24, r18
 3f8:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 402:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 404:	08 95       	ret

00000406 <GetFreqPrescaleRatio>:
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	08 f0       	brcs	.+2      	; 0x40c <GetFreqPrescaleRatio+0x6>
 40a:	4e c0       	rjmp	.+156    	; 0x4a8 <GetFreqPrescaleRatio+0xa2>
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	8e 0f       	add	r24, r30
 416:	9f 1f       	adc	r25, r31
 418:	fc 01       	movw	r30, r24
 41a:	ed 59       	subi	r30, 0x9D	; 157
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	82 81       	ldd	r24, Z+2	; 0x02
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	09 f1       	breq	.+66     	; 0x466 <GetFreqPrescaleRatio+0x60>
 424:	28 f4       	brcc	.+10     	; 0x430 <GetFreqPrescaleRatio+0x2a>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	41 f0       	breq	.+16     	; 0x43a <GetFreqPrescaleRatio+0x34>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	89 f0       	breq	.+34     	; 0x450 <GetFreqPrescaleRatio+0x4a>
 42e:	a2 c0       	rjmp	.+324    	; 0x574 <GetFreqPrescaleRatio+0x16e>
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	21 f1       	breq	.+72     	; 0x47c <GetFreqPrescaleRatio+0x76>
 434:	85 30       	cpi	r24, 0x05	; 5
 436:	69 f1       	breq	.+90     	; 0x492 <GetFreqPrescaleRatio+0x8c>
 438:	9d c0       	rjmp	.+314    	; 0x574 <GetFreqPrescaleRatio+0x16e>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	a0 e8       	ldi	r26, 0x80	; 128
 440:	bd e3       	ldi	r27, 0x3D	; 61
 442:	fb 01       	movw	r30, r22
 444:	80 83       	st	Z, r24
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	a2 83       	std	Z+2, r26	; 0x02
 44a:	b3 83       	std	Z+3, r27	; 0x03
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	a0 e0       	ldi	r26, 0x00	; 0
 456:	bf e3       	ldi	r27, 0x3F	; 63
 458:	fb 01       	movw	r30, r22
 45a:	80 83       	st	Z, r24
 45c:	91 83       	std	Z+1, r25	; 0x01
 45e:	a2 83       	std	Z+2, r26	; 0x02
 460:	b3 83       	std	Z+3, r27	; 0x03
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	a0 e8       	ldi	r26, 0x80	; 128
 46c:	b0 e4       	ldi	r27, 0x40	; 64
 46e:	fb 01       	movw	r30, r22
 470:	80 83       	st	Z, r24
 472:	91 83       	std	Z+1, r25	; 0x01
 474:	a2 83       	std	Z+2, r26	; 0x02
 476:	b3 83       	std	Z+3, r27	; 0x03
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	a0 e8       	ldi	r26, 0x80	; 128
 482:	b1 e4       	ldi	r27, 0x41	; 65
 484:	fb 01       	movw	r30, r22
 486:	80 83       	st	Z, r24
 488:	91 83       	std	Z+1, r25	; 0x01
 48a:	a2 83       	std	Z+2, r26	; 0x02
 48c:	b3 83       	std	Z+3, r27	; 0x03
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a0 e8       	ldi	r26, 0x80	; 128
 498:	b2 e4       	ldi	r27, 0x42	; 66
 49a:	fb 01       	movw	r30, r22
 49c:	80 83       	st	Z, r24
 49e:	91 83       	std	Z+1, r25	; 0x01
 4a0:	a2 83       	std	Z+2, r26	; 0x02
 4a2:	b3 83       	std	Z+3, r27	; 0x03
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	09 f0       	breq	.+2      	; 0x4ae <GetFreqPrescaleRatio+0xa8>
 4ac:	65 c0       	rjmp	.+202    	; 0x578 <GetFreqPrescaleRatio+0x172>
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	8e 0f       	add	r24, r30
 4b8:	9f 1f       	adc	r25, r31
 4ba:	fc 01       	movw	r30, r24
 4bc:	ed 59       	subi	r30, 0x9D	; 157
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	e2 81       	ldd	r30, Z+2	; 0x02
 4c2:	8e 2f       	mov	r24, r30
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	e7 30       	cpi	r30, 0x07	; 7
 4cc:	f1 05       	cpc	r31, r1
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <GetFreqPrescaleRatio+0xcc>
 4d0:	55 c0       	rjmp	.+170    	; 0x57c <GetFreqPrescaleRatio+0x176>
 4d2:	e6 5d       	subi	r30, 0xD6	; 214
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__tablejump2__>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	a0 e8       	ldi	r26, 0x80	; 128
 4e0:	bd e3       	ldi	r27, 0x3D	; 61
 4e2:	fb 01       	movw	r30, r22
 4e4:	80 83       	st	Z, r24
 4e6:	91 83       	std	Z+1, r25	; 0x01
 4e8:	a2 83       	std	Z+2, r26	; 0x02
 4ea:	b3 83       	std	Z+3, r27	; 0x03
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	a0 e0       	ldi	r26, 0x00	; 0
 4f6:	bf e3       	ldi	r27, 0x3F	; 63
 4f8:	fb 01       	movw	r30, r22
 4fa:	80 83       	st	Z, r24
 4fc:	91 83       	std	Z+1, r25	; 0x01
 4fe:	a2 83       	std	Z+2, r26	; 0x02
 500:	b3 83       	std	Z+3, r27	; 0x03
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	a0 e0       	ldi	r26, 0x00	; 0
 50c:	b0 e4       	ldi	r27, 0x40	; 64
 50e:	fb 01       	movw	r30, r22
 510:	80 83       	st	Z, r24
 512:	91 83       	std	Z+1, r25	; 0x01
 514:	a2 83       	std	Z+2, r26	; 0x02
 516:	b3 83       	std	Z+3, r27	; 0x03
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	a0 e8       	ldi	r26, 0x80	; 128
 522:	b0 e4       	ldi	r27, 0x40	; 64
 524:	fb 01       	movw	r30, r22
 526:	80 83       	st	Z, r24
 528:	91 83       	std	Z+1, r25	; 0x01
 52a:	a2 83       	std	Z+2, r26	; 0x02
 52c:	b3 83       	std	Z+3, r27	; 0x03
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	a0 e0       	ldi	r26, 0x00	; 0
 538:	b1 e4       	ldi	r27, 0x41	; 65
 53a:	fb 01       	movw	r30, r22
 53c:	80 83       	st	Z, r24
 53e:	91 83       	std	Z+1, r25	; 0x01
 540:	a2 83       	std	Z+2, r26	; 0x02
 542:	b3 83       	std	Z+3, r27	; 0x03
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	a0 e8       	ldi	r26, 0x80	; 128
 54e:	b1 e4       	ldi	r27, 0x41	; 65
 550:	fb 01       	movw	r30, r22
 552:	80 83       	st	Z, r24
 554:	91 83       	std	Z+1, r25	; 0x01
 556:	a2 83       	std	Z+2, r26	; 0x02
 558:	b3 83       	std	Z+3, r27	; 0x03
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a0 e8       	ldi	r26, 0x80	; 128
 564:	b2 e4       	ldi	r27, 0x42	; 66
 566:	fb 01       	movw	r30, r22
 568:	80 83       	st	Z, r24
 56a:	91 83       	std	Z+1, r25	; 0x01
 56c:	a2 83       	std	Z+2, r26	; 0x02
 56e:	b3 83       	std	Z+3, r27	; 0x03
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret
 574:	8c ef       	ldi	r24, 0xFC	; 252
 576:	08 95       	ret
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
 57c:	8c ef       	ldi	r24, 0xFC	; 252
 57e:	08 95       	ret

00000580 <TIM_Start>:
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	71 f0       	breq	.+28     	; 0x5a0 <TIM_Start+0x20>
 584:	18 f0       	brcs	.+6      	; 0x58c <TIM_Start+0xc>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	31 f0       	breq	.+12     	; 0x596 <TIM_Start+0x16>
 58a:	1e c0       	rjmp	.+60     	; 0x5c8 <TIM_Start+0x48>
 58c:	e2 e5       	ldi	r30, 0x52	; 82
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	a3 e5       	ldi	r26, 0x53	; 83
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <TIM_Start+0x28>
 596:	e4 e4       	ldi	r30, 0x44	; 68
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	a5 e4       	ldi	r26, 0x45	; 69
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <TIM_Start+0x28>
 5a0:	ec e4       	ldi	r30, 0x4C	; 76
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ae e4       	ldi	r26, 0x4E	; 78
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	60 83       	st	Z, r22
 5aa:	2c 91       	ld	r18, X
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	8e 0f       	add	r24, r30
 5b6:	9f 1f       	adc	r25, r31
 5b8:	fc 01       	movw	r30, r24
 5ba:	ed 59       	subi	r30, 0x9D	; 157
 5bc:	ff 4f       	sbci	r31, 0xFF	; 255
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	82 2b       	or	r24, r18
 5c2:	8c 93       	st	X, r24
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
 5c8:	8e ef       	ldi	r24, 0xFE	; 254
 5ca:	08 95       	ret

000005cc <TIM_GetStatus>:
 5cc:	61 15       	cp	r22, r1
 5ce:	71 05       	cpc	r23, r1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <TIM_GetStatus+0x8>
 5d2:	7a c0       	rjmp	.+244    	; 0x6c8 <TIM_GetStatus+0xfc>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	41 f1       	breq	.+80     	; 0x628 <TIM_GetStatus+0x5c>
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <TIM_GetStatus+0x16>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <TIM_GetStatus+0x14>
 5de:	52 c0       	rjmp	.+164    	; 0x684 <TIM_GetStatus+0xb8>
 5e0:	75 c0       	rjmp	.+234    	; 0x6cc <TIM_GetStatus+0x100>
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	8e 0f       	add	r24, r30
 5ec:	9f 1f       	adc	r25, r31
 5ee:	fc 01       	movw	r30, r24
 5f0:	ed 59       	subi	r30, 0x9D	; 157
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	80 81       	ld	r24, Z
 5f6:	81 11       	cpse	r24, r1
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <TIM_GetStatus+0x40>
 5fa:	08 b6       	in	r0, 0x38	; 56
 5fc:	00 fe       	sbrs	r0, 0
 5fe:	68 c0       	rjmp	.+208    	; 0x6d0 <TIM_GetStatus+0x104>
 600:	fb 01       	movw	r30, r22
 602:	10 82       	st	Z, r1
 604:	98 b7       	in	r25, 0x38	; 56
 606:	91 60       	ori	r25, 0x01	; 1
 608:	98 bf       	out	0x38, r25	; 56
 60a:	08 95       	ret
 60c:	88 30       	cpi	r24, 0x08	; 8
 60e:	09 f0       	breq	.+2      	; 0x612 <TIM_GetStatus+0x46>
 610:	61 c0       	rjmp	.+194    	; 0x6d4 <TIM_GetStatus+0x108>
 612:	08 b6       	in	r0, 0x38	; 56
 614:	01 fe       	sbrs	r0, 1
 616:	60 c0       	rjmp	.+192    	; 0x6d8 <TIM_GetStatus+0x10c>
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	fb 01       	movw	r30, r22
 61c:	80 83       	st	Z, r24
 61e:	88 b7       	in	r24, 0x38	; 56
 620:	82 60       	ori	r24, 0x02	; 2
 622:	88 bf       	out	0x38, r24	; 56
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	fc 01       	movw	r30, r24
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	8e 0f       	add	r24, r30
 632:	9f 1f       	adc	r25, r31
 634:	fc 01       	movw	r30, r24
 636:	ed 59       	subi	r30, 0x9D	; 157
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	80 81       	ld	r24, Z
 63c:	81 11       	cpse	r24, r1
 63e:	09 c0       	rjmp	.+18     	; 0x652 <TIM_GetStatus+0x86>
 640:	08 b6       	in	r0, 0x38	; 56
 642:	02 fe       	sbrs	r0, 2
 644:	4b c0       	rjmp	.+150    	; 0x6dc <TIM_GetStatus+0x110>
 646:	fb 01       	movw	r30, r22
 648:	10 82       	st	Z, r1
 64a:	98 b7       	in	r25, 0x38	; 56
 64c:	94 60       	ori	r25, 0x04	; 4
 64e:	98 bf       	out	0x38, r25	; 56
 650:	08 95       	ret
 652:	88 30       	cpi	r24, 0x08	; 8
 654:	09 f0       	breq	.+2      	; 0x658 <TIM_GetStatus+0x8c>
 656:	44 c0       	rjmp	.+136    	; 0x6e0 <TIM_GetStatus+0x114>
 658:	98 b7       	in	r25, 0x38	; 56
 65a:	89 2f       	mov	r24, r25
 65c:	80 71       	andi	r24, 0x10	; 16
 65e:	94 ff       	sbrs	r25, 4
 660:	08 c0       	rjmp	.+16     	; 0x672 <TIM_GetStatus+0xa6>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	fb 01       	movw	r30, r22
 666:	80 83       	st	Z, r24
 668:	88 b7       	in	r24, 0x38	; 56
 66a:	80 61       	ori	r24, 0x10	; 16
 66c:	88 bf       	out	0x38, r24	; 56
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret
 672:	93 ff       	sbrs	r25, 3
 674:	37 c0       	rjmp	.+110    	; 0x6e4 <TIM_GetStatus+0x118>
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	fb 01       	movw	r30, r22
 67a:	90 83       	st	Z, r25
 67c:	98 b7       	in	r25, 0x38	; 56
 67e:	98 60       	ori	r25, 0x08	; 8
 680:	98 bf       	out	0x38, r25	; 56
 682:	08 95       	ret
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	8e 0f       	add	r24, r30
 68e:	9f 1f       	adc	r25, r31
 690:	fc 01       	movw	r30, r24
 692:	ed 59       	subi	r30, 0x9D	; 157
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	80 81       	ld	r24, Z
 698:	81 11       	cpse	r24, r1
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <TIM_GetStatus+0xe2>
 69c:	08 b6       	in	r0, 0x38	; 56
 69e:	06 fe       	sbrs	r0, 6
 6a0:	23 c0       	rjmp	.+70     	; 0x6e8 <TIM_GetStatus+0x11c>
 6a2:	fb 01       	movw	r30, r22
 6a4:	10 82       	st	Z, r1
 6a6:	98 b7       	in	r25, 0x38	; 56
 6a8:	90 64       	ori	r25, 0x40	; 64
 6aa:	98 bf       	out	0x38, r25	; 56
 6ac:	08 95       	ret
 6ae:	88 30       	cpi	r24, 0x08	; 8
 6b0:	e9 f4       	brne	.+58     	; 0x6ec <TIM_GetStatus+0x120>
 6b2:	08 b6       	in	r0, 0x38	; 56
 6b4:	07 fe       	sbrs	r0, 7
 6b6:	1c c0       	rjmp	.+56     	; 0x6f0 <TIM_GetStatus+0x124>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	fb 01       	movw	r30, r22
 6bc:	80 83       	st	Z, r24
 6be:	88 b7       	in	r24, 0x38	; 56
 6c0:	80 68       	ori	r24, 0x80	; 128
 6c2:	88 bf       	out	0x38, r24	; 56
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	08 95       	ret
 6cc:	8e ef       	ldi	r24, 0xFE	; 254
 6ce:	08 95       	ret
 6d0:	8d ef       	ldi	r24, 0xFD	; 253
 6d2:	08 95       	ret
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
 6d8:	8d ef       	ldi	r24, 0xFD	; 253
 6da:	08 95       	ret
 6dc:	8d ef       	ldi	r24, 0xFD	; 253
 6de:	08 95       	ret
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret
 6e4:	8d ef       	ldi	r24, 0xFD	; 253
 6e6:	08 95       	ret
 6e8:	8d ef       	ldi	r24, 0xFD	; 253
 6ea:	08 95       	ret
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
 6f0:	8d ef       	ldi	r24, 0xFD	; 253
 6f2:	08 95       	ret

000006f4 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
 6f4:	8f 92       	push	r8
 6f6:	9f 92       	push	r9
 6f8:	af 92       	push	r10
 6fa:	bf 92       	push	r11
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	00 d0       	rcall	.+0      	; 0x70c <TIM_DelayMs+0x18>
 70c:	00 d0       	rcall	.+0      	; 0x70e <TIM_DelayMs+0x1a>
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	18 2f       	mov	r17, r24
 714:	04 2f       	mov	r16, r20
 716:	d5 2e       	mov	r13, r21
 718:	e6 2e       	mov	r14, r22
 71a:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 71c:	83 30       	cpi	r24, 0x03	; 3
 71e:	08 f0       	brcs	.+2      	; 0x722 <TIM_DelayMs+0x2e>
 720:	65 c0       	rjmp	.+202    	; 0x7ec <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
 722:	21 15       	cp	r18, r1
 724:	31 05       	cpc	r19, r1
 726:	09 f4       	brne	.+2      	; 0x72a <TIM_DelayMs+0x36>
 728:	63 c0       	rjmp	.+198    	; 0x7f0 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
 72a:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <gptr_CallerFunc+0x1>
 72e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
 732:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gEnu_State>
 736:	81 11       	cpse	r24, r1
 738:	5d c0       	rjmp	.+186    	; 0x7f4 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	81 2f       	mov	r24, r17
 742:	0e 94 03 02 	call	0x406	; 0x406 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 746:	8c 3f       	cpi	r24, 0xFC	; 252
 748:	09 f4       	brne	.+2      	; 0x74c <TIM_DelayMs+0x58>
 74a:	4e c0       	rjmp	.+156    	; 0x7e8 <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 74c:	89 80       	ldd	r8, Y+1	; 0x01
 74e:	9a 80       	ldd	r9, Y+2	; 0x02
 750:	ab 80       	ldd	r10, Y+3	; 0x03
 752:	bc 80       	ldd	r11, Y+4	; 0x04
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	a9 01       	movw	r20, r18
 75a:	c5 01       	movw	r24, r10
 75c:	b4 01       	movw	r22, r8
 75e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__cmpsf2>
 762:	88 23       	and	r24, r24
 764:	81 f0       	breq	.+32     	; 0x786 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
 766:	60 2f       	mov	r22, r16
 768:	7d 2d       	mov	r23, r13
 76a:	8e 2d       	mov	r24, r14
 76c:	9f 2d       	mov	r25, r15
 76e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__floatunsisf>
 772:	a5 01       	movw	r20, r10
 774:	94 01       	movw	r18, r8
 776:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3>
 77a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fixunssfsi>
 77e:	06 2f       	mov	r16, r22
 780:	d7 2e       	mov	r13, r23
 782:	e8 2e       	mov	r14, r24
 784:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
 786:	a8 ee       	ldi	r26, 0xE8	; 232
 788:	b3 e0       	ldi	r27, 0x03	; 3
 78a:	20 2f       	mov	r18, r16
 78c:	3d 2d       	mov	r19, r13
 78e:	4e 2d       	mov	r20, r14
 790:	5f 2d       	mov	r21, r15
 792:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__muluhisi3>
 796:	bb 27       	eor	r27, r27
 798:	a9 2f       	mov	r26, r25
 79a:	98 2f       	mov	r25, r24
 79c:	87 2f       	mov	r24, r23
 79e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu32_Overflows>
 7a2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <gu32_Overflows+0x1>
 7a6:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <gu32_Overflows+0x2>
 7aa:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
 7ae:	28 ee       	ldi	r18, 0xE8	; 232
 7b0:	02 9f       	mul	r16, r18
 7b2:	00 2d       	mov	r16, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <gu8_Remindar>
      
      if(gu32_Overflows == 0)
 7ba:	89 2b       	or	r24, r25
 7bc:	8a 2b       	or	r24, r26
 7be:	8b 2b       	or	r24, r27
 7c0:	49 f4       	brne	.+18     	; 0x7d4 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
 7c8:	60 2f       	mov	r22, r16
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	81 2f       	mov	r24, r17
 7ce:	0e 94 c0 02 	call	0x580	; 0x580 <TIM_Start>
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
 7d4:	6f ef       	ldi	r22, 0xFF	; 255
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	81 2f       	mov	r24, r17
 7da:	0e 94 c0 02 	call	0x580	; 0x580 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gEnu_State>
      return TIMER_E_PENDING;
 7e4:	8d ef       	ldi	r24, 0xFD	; 253
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 7e8:	8c ef       	ldi	r24, 0xFC	; 252
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 7ec:	8e ef       	ldi	r24, 0xFE	; 254
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	df 90       	pop	r13
 80c:	bf 90       	pop	r11
 80e:	af 90       	pop	r10
 810:	9f 90       	pop	r9
 812:	8f 90       	pop	r8
 814:	08 95       	ret

00000816 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	1f 92       	push	r1
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
 822:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gEnu_State>
 826:	99 23       	and	r25, r25
 828:	09 f4       	brne	.+2      	; 0x82c <TIM_DelayStatus+0x16>
 82a:	49 c0       	rjmp	.+146    	; 0x8be <__stack+0x5f>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
 82c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <gptr_CallerFunc>
 830:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <gptr_CallerFunc+0x1>
 834:	26 17       	cp	r18, r22
 836:	37 07       	cpc	r19, r23
 838:	09 f0       	breq	.+2      	; 0x83c <TIM_DelayStatus+0x26>
 83a:	43 c0       	rjmp	.+134    	; 0x8c2 <__stack+0x63>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
 83c:	91 30       	cpi	r25, 0x01	; 1
 83e:	09 f0       	breq	.+2      	; 0x842 <TIM_DelayStatus+0x2c>
 840:	42 c0       	rjmp	.+132    	; 0x8c6 <__stack+0x67>
 842:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
 844:	be 01       	movw	r22, r28
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 84e:	81 11       	cpse	r24, r1
 850:	35 c0       	rjmp	.+106    	; 0x8bc <__stack+0x5d>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
 852:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gu8_OverflowsComplete>
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	41 f4       	brne	.+16     	; 0x86a <__stack+0xb>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
 85a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gEnu_State>
            gu8_OverflowsComplete = LOW;
 85e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <gu8_OverflowsComplete>
            gu8_Remindar = 0;
 862:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	2f c0       	rjmp	.+94     	; 0x8c8 <__stack+0x69>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
 86a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gu32_Overflows>
 86e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <gu32_Overflows+0x1>
 872:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <gu32_Overflows+0x2>
 876:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <gu32_Overflows+0x3>
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	a1 09       	sbc	r26, r1
 87e:	b1 09       	sbc	r27, r1
 880:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu32_Overflows>
 884:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <gu32_Overflows+0x1>
 888:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <gu32_Overflows+0x2>
 88c:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
 890:	89 2b       	or	r24, r25
 892:	8a 2b       	or	r24, r26
 894:	8b 2b       	or	r24, r27
 896:	59 f4       	brne	.+22     	; 0x8ae <__stack+0x4f>
         {
            gu8_OverflowsComplete = HIGH;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
 89e:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <gu8_Remindar>
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	81 2f       	mov	r24, r17
 8a6:	0e 94 c0 02 	call	0x580	; 0x580 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
 8aa:	8d ef       	ldi	r24, 0xFD	; 253
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__stack+0x69>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
 8ae:	6f ef       	ldi	r22, 0xFF	; 255
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	81 2f       	mov	r24, r17
 8b4:	0e 94 c0 02 	call	0x580	; 0x580 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 8b8:	8d ef       	ldi	r24, 0xFD	; 253
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__stack+0x69>
   }
   else
   {
      return ERROR_NOK;
   }      
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__stack+0x69>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
 8be:	8b ef       	ldi	r24, 0xFB	; 251
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <__stack+0x69>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
 8c6:	81 e0       	ldi	r24, 0x01	; 1
   }      
 8c8:	0f 90       	pop	r0
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	1f 91       	pop	r17
 8d0:	08 95       	ret

000008d2 <__cmpsf2>:
 8d2:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_cmp>
 8d6:	08 f4       	brcc	.+2      	; 0x8da <__cmpsf2+0x8>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	08 95       	ret

000008dc <__divsf3>:
 8dc:	0e 94 82 04 	call	0x904	; 0x904 <__divsf3x>
 8e0:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_round>
 8e4:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscB>
 8e8:	58 f0       	brcs	.+22     	; 0x900 <__divsf3+0x24>
 8ea:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscA>
 8ee:	40 f0       	brcs	.+16     	; 0x900 <__divsf3+0x24>
 8f0:	29 f4       	brne	.+10     	; 0x8fc <__divsf3+0x20>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	29 f0       	breq	.+10     	; 0x900 <__divsf3+0x24>
 8f6:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_inf>
 8fa:	51 11       	cpse	r21, r1
 8fc:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_szero>
 900:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_nan>

00000904 <__divsf3x>:
 904:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_split3>
 908:	68 f3       	brcs	.-38     	; 0x8e4 <__divsf3+0x8>

0000090a <__divsf3_pse>:
 90a:	99 23       	and	r25, r25
 90c:	b1 f3       	breq	.-20     	; 0x8fa <__divsf3+0x1e>
 90e:	55 23       	and	r21, r21
 910:	91 f3       	breq	.-28     	; 0x8f6 <__divsf3+0x1a>
 912:	95 1b       	sub	r25, r21
 914:	55 0b       	sbc	r21, r21
 916:	bb 27       	eor	r27, r27
 918:	aa 27       	eor	r26, r26
 91a:	62 17       	cp	r22, r18
 91c:	73 07       	cpc	r23, r19
 91e:	84 07       	cpc	r24, r20
 920:	38 f0       	brcs	.+14     	; 0x930 <__divsf3_pse+0x26>
 922:	9f 5f       	subi	r25, 0xFF	; 255
 924:	5f 4f       	sbci	r21, 0xFF	; 255
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	44 1f       	adc	r20, r20
 92c:	aa 1f       	adc	r26, r26
 92e:	a9 f3       	breq	.-22     	; 0x91a <__divsf3_pse+0x10>
 930:	35 d0       	rcall	.+106    	; 0x99c <__divsf3_pse+0x92>
 932:	0e 2e       	mov	r0, r30
 934:	3a f0       	brmi	.+14     	; 0x944 <__divsf3_pse+0x3a>
 936:	e0 e8       	ldi	r30, 0x80	; 128
 938:	32 d0       	rcall	.+100    	; 0x99e <__divsf3_pse+0x94>
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	e6 95       	lsr	r30
 940:	00 1c       	adc	r0, r0
 942:	ca f7       	brpl	.-14     	; 0x936 <__divsf3_pse+0x2c>
 944:	2b d0       	rcall	.+86     	; 0x99c <__divsf3_pse+0x92>
 946:	fe 2f       	mov	r31, r30
 948:	29 d0       	rcall	.+82     	; 0x99c <__divsf3_pse+0x92>
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	bb 1f       	adc	r27, r27
 952:	26 17       	cp	r18, r22
 954:	37 07       	cpc	r19, r23
 956:	48 07       	cpc	r20, r24
 958:	ab 07       	cpc	r26, r27
 95a:	b0 e8       	ldi	r27, 0x80	; 128
 95c:	09 f0       	breq	.+2      	; 0x960 <__divsf3_pse+0x56>
 95e:	bb 0b       	sbc	r27, r27
 960:	80 2d       	mov	r24, r0
 962:	bf 01       	movw	r22, r30
 964:	ff 27       	eor	r31, r31
 966:	93 58       	subi	r25, 0x83	; 131
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	3a f0       	brmi	.+14     	; 0x97a <__divsf3_pse+0x70>
 96c:	9e 3f       	cpi	r25, 0xFE	; 254
 96e:	51 05       	cpc	r21, r1
 970:	78 f0       	brcs	.+30     	; 0x990 <__divsf3_pse+0x86>
 972:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_inf>
 976:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_szero>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	e4 f3       	brlt	.-8      	; 0x976 <__divsf3_pse+0x6c>
 97e:	98 3e       	cpi	r25, 0xE8	; 232
 980:	d4 f3       	brlt	.-12     	; 0x976 <__divsf3_pse+0x6c>
 982:	86 95       	lsr	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	9f 5f       	subi	r25, 0xFF	; 255
 98e:	c9 f7       	brne	.-14     	; 0x982 <__divsf3_pse+0x78>
 990:	88 0f       	add	r24, r24
 992:	91 1d       	adc	r25, r1
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret
 99c:	e1 e0       	ldi	r30, 0x01	; 1
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	bb 1f       	adc	r27, r27
 9a6:	62 17       	cp	r22, r18
 9a8:	73 07       	cpc	r23, r19
 9aa:	84 07       	cpc	r24, r20
 9ac:	ba 07       	cpc	r27, r26
 9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__divsf3_pse+0xae>
 9b0:	62 1b       	sub	r22, r18
 9b2:	73 0b       	sbc	r23, r19
 9b4:	84 0b       	sbc	r24, r20
 9b6:	ba 0b       	sbc	r27, r26
 9b8:	ee 1f       	adc	r30, r30
 9ba:	88 f7       	brcc	.-30     	; 0x99e <__divsf3_pse+0x94>
 9bc:	e0 95       	com	r30
 9be:	08 95       	ret

000009c0 <__fixunssfsi>:
 9c0:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_splitA>
 9c4:	88 f0       	brcs	.+34     	; 0x9e8 <__fixunssfsi+0x28>
 9c6:	9f 57       	subi	r25, 0x7F	; 127
 9c8:	98 f0       	brcs	.+38     	; 0x9f0 <__fixunssfsi+0x30>
 9ca:	b9 2f       	mov	r27, r25
 9cc:	99 27       	eor	r25, r25
 9ce:	b7 51       	subi	r27, 0x17	; 23
 9d0:	b0 f0       	brcs	.+44     	; 0x9fe <__fixunssfsi+0x3e>
 9d2:	e1 f0       	breq	.+56     	; 0xa0c <__fixunssfsi+0x4c>
 9d4:	66 0f       	add	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	1a f0       	brmi	.+6      	; 0x9e4 <__fixunssfsi+0x24>
 9de:	ba 95       	dec	r27
 9e0:	c9 f7       	brne	.-14     	; 0x9d4 <__fixunssfsi+0x14>
 9e2:	14 c0       	rjmp	.+40     	; 0xa0c <__fixunssfsi+0x4c>
 9e4:	b1 30       	cpi	r27, 0x01	; 1
 9e6:	91 f0       	breq	.+36     	; 0xa0c <__fixunssfsi+0x4c>
 9e8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_zero>
 9ec:	b1 e0       	ldi	r27, 0x01	; 1
 9ee:	08 95       	ret
 9f0:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_zero>
 9f4:	67 2f       	mov	r22, r23
 9f6:	78 2f       	mov	r23, r24
 9f8:	88 27       	eor	r24, r24
 9fa:	b8 5f       	subi	r27, 0xF8	; 248
 9fc:	39 f0       	breq	.+14     	; 0xa0c <__fixunssfsi+0x4c>
 9fe:	b9 3f       	cpi	r27, 0xF9	; 249
 a00:	cc f3       	brlt	.-14     	; 0x9f4 <__fixunssfsi+0x34>
 a02:	86 95       	lsr	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	b3 95       	inc	r27
 a0a:	d9 f7       	brne	.-10     	; 0xa02 <__fixunssfsi+0x42>
 a0c:	3e f4       	brtc	.+14     	; 0xa1c <__fixunssfsi+0x5c>
 a0e:	90 95       	com	r25
 a10:	80 95       	com	r24
 a12:	70 95       	com	r23
 a14:	61 95       	neg	r22
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	08 95       	ret

00000a1e <__floatunsisf>:
 a1e:	e8 94       	clt
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <__floatsisf+0x12>

00000a22 <__floatsisf>:
 a22:	97 fb       	bst	r25, 7
 a24:	3e f4       	brtc	.+14     	; 0xa34 <__floatsisf+0x12>
 a26:	90 95       	com	r25
 a28:	80 95       	com	r24
 a2a:	70 95       	com	r23
 a2c:	61 95       	neg	r22
 a2e:	7f 4f       	sbci	r23, 0xFF	; 255
 a30:	8f 4f       	sbci	r24, 0xFF	; 255
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	99 23       	and	r25, r25
 a36:	a9 f0       	breq	.+42     	; 0xa62 <__floatsisf+0x40>
 a38:	f9 2f       	mov	r31, r25
 a3a:	96 e9       	ldi	r25, 0x96	; 150
 a3c:	bb 27       	eor	r27, r27
 a3e:	93 95       	inc	r25
 a40:	f6 95       	lsr	r31
 a42:	87 95       	ror	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	f1 11       	cpse	r31, r1
 a4c:	f8 cf       	rjmp	.-16     	; 0xa3e <__floatsisf+0x1c>
 a4e:	fa f4       	brpl	.+62     	; 0xa8e <__floatsisf+0x6c>
 a50:	bb 0f       	add	r27, r27
 a52:	11 f4       	brne	.+4      	; 0xa58 <__floatsisf+0x36>
 a54:	60 ff       	sbrs	r22, 0
 a56:	1b c0       	rjmp	.+54     	; 0xa8e <__floatsisf+0x6c>
 a58:	6f 5f       	subi	r22, 0xFF	; 255
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	16 c0       	rjmp	.+44     	; 0xa8e <__floatsisf+0x6c>
 a62:	88 23       	and	r24, r24
 a64:	11 f0       	breq	.+4      	; 0xa6a <__floatsisf+0x48>
 a66:	96 e9       	ldi	r25, 0x96	; 150
 a68:	11 c0       	rjmp	.+34     	; 0xa8c <__floatsisf+0x6a>
 a6a:	77 23       	and	r23, r23
 a6c:	21 f0       	breq	.+8      	; 0xa76 <__floatsisf+0x54>
 a6e:	9e e8       	ldi	r25, 0x8E	; 142
 a70:	87 2f       	mov	r24, r23
 a72:	76 2f       	mov	r23, r22
 a74:	05 c0       	rjmp	.+10     	; 0xa80 <__floatsisf+0x5e>
 a76:	66 23       	and	r22, r22
 a78:	71 f0       	breq	.+28     	; 0xa96 <__floatsisf+0x74>
 a7a:	96 e8       	ldi	r25, 0x86	; 134
 a7c:	86 2f       	mov	r24, r22
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	2a f0       	brmi	.+10     	; 0xa8e <__floatsisf+0x6c>
 a84:	9a 95       	dec	r25
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	da f7       	brpl	.-10     	; 0xa84 <__floatsisf+0x62>
 a8e:	88 0f       	add	r24, r24
 a90:	96 95       	lsr	r25
 a92:	87 95       	ror	r24
 a94:	97 f9       	bld	r25, 7
 a96:	08 95       	ret

00000a98 <__fp_cmp>:
 a98:	99 0f       	add	r25, r25
 a9a:	00 08       	sbc	r0, r0
 a9c:	55 0f       	add	r21, r21
 a9e:	aa 0b       	sbc	r26, r26
 aa0:	e0 e8       	ldi	r30, 0x80	; 128
 aa2:	fe ef       	ldi	r31, 0xFE	; 254
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	e8 07       	cpc	r30, r24
 aaa:	f9 07       	cpc	r31, r25
 aac:	c0 f0       	brcs	.+48     	; 0xade <__fp_cmp+0x46>
 aae:	12 16       	cp	r1, r18
 ab0:	13 06       	cpc	r1, r19
 ab2:	e4 07       	cpc	r30, r20
 ab4:	f5 07       	cpc	r31, r21
 ab6:	98 f0       	brcs	.+38     	; 0xade <__fp_cmp+0x46>
 ab8:	62 1b       	sub	r22, r18
 aba:	73 0b       	sbc	r23, r19
 abc:	84 0b       	sbc	r24, r20
 abe:	95 0b       	sbc	r25, r21
 ac0:	39 f4       	brne	.+14     	; 0xad0 <__fp_cmp+0x38>
 ac2:	0a 26       	eor	r0, r26
 ac4:	61 f0       	breq	.+24     	; 0xade <__fp_cmp+0x46>
 ac6:	23 2b       	or	r18, r19
 ac8:	24 2b       	or	r18, r20
 aca:	25 2b       	or	r18, r21
 acc:	21 f4       	brne	.+8      	; 0xad6 <__fp_cmp+0x3e>
 ace:	08 95       	ret
 ad0:	0a 26       	eor	r0, r26
 ad2:	09 f4       	brne	.+2      	; 0xad6 <__fp_cmp+0x3e>
 ad4:	a1 40       	sbci	r26, 0x01	; 1
 ad6:	a6 95       	lsr	r26
 ad8:	8f ef       	ldi	r24, 0xFF	; 255
 ada:	81 1d       	adc	r24, r1
 adc:	81 1d       	adc	r24, r1
 ade:	08 95       	ret

00000ae0 <__fp_inf>:
 ae0:	97 f9       	bld	r25, 7
 ae2:	9f 67       	ori	r25, 0x7F	; 127
 ae4:	80 e8       	ldi	r24, 0x80	; 128
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	08 95       	ret

00000aec <__fp_nan>:
 aec:	9f ef       	ldi	r25, 0xFF	; 255
 aee:	80 ec       	ldi	r24, 0xC0	; 192
 af0:	08 95       	ret

00000af2 <__fp_pscA>:
 af2:	00 24       	eor	r0, r0
 af4:	0a 94       	dec	r0
 af6:	16 16       	cp	r1, r22
 af8:	17 06       	cpc	r1, r23
 afa:	18 06       	cpc	r1, r24
 afc:	09 06       	cpc	r0, r25
 afe:	08 95       	ret

00000b00 <__fp_pscB>:
 b00:	00 24       	eor	r0, r0
 b02:	0a 94       	dec	r0
 b04:	12 16       	cp	r1, r18
 b06:	13 06       	cpc	r1, r19
 b08:	14 06       	cpc	r1, r20
 b0a:	05 06       	cpc	r0, r21
 b0c:	08 95       	ret

00000b0e <__fp_round>:
 b0e:	09 2e       	mov	r0, r25
 b10:	03 94       	inc	r0
 b12:	00 0c       	add	r0, r0
 b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_round+0xc>
 b16:	88 23       	and	r24, r24
 b18:	52 f0       	brmi	.+20     	; 0xb2e <__fp_round+0x20>
 b1a:	bb 0f       	add	r27, r27
 b1c:	40 f4       	brcc	.+16     	; 0xb2e <__fp_round+0x20>
 b1e:	bf 2b       	or	r27, r31
 b20:	11 f4       	brne	.+4      	; 0xb26 <__fp_round+0x18>
 b22:	60 ff       	sbrs	r22, 0
 b24:	04 c0       	rjmp	.+8      	; 0xb2e <__fp_round+0x20>
 b26:	6f 5f       	subi	r22, 0xFF	; 255
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	08 95       	ret

00000b30 <__fp_split3>:
 b30:	57 fd       	sbrc	r21, 7
 b32:	90 58       	subi	r25, 0x80	; 128
 b34:	44 0f       	add	r20, r20
 b36:	55 1f       	adc	r21, r21
 b38:	59 f0       	breq	.+22     	; 0xb50 <__fp_splitA+0x10>
 b3a:	5f 3f       	cpi	r21, 0xFF	; 255
 b3c:	71 f0       	breq	.+28     	; 0xb5a <__fp_splitA+0x1a>
 b3e:	47 95       	ror	r20

00000b40 <__fp_splitA>:
 b40:	88 0f       	add	r24, r24
 b42:	97 fb       	bst	r25, 7
 b44:	99 1f       	adc	r25, r25
 b46:	61 f0       	breq	.+24     	; 0xb60 <__fp_splitA+0x20>
 b48:	9f 3f       	cpi	r25, 0xFF	; 255
 b4a:	79 f0       	breq	.+30     	; 0xb6a <__fp_splitA+0x2a>
 b4c:	87 95       	ror	r24
 b4e:	08 95       	ret
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	55 1f       	adc	r21, r21
 b58:	f2 cf       	rjmp	.-28     	; 0xb3e <__fp_split3+0xe>
 b5a:	46 95       	lsr	r20
 b5c:	f1 df       	rcall	.-30     	; 0xb40 <__fp_splitA>
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <__fp_splitA+0x30>
 b60:	16 16       	cp	r1, r22
 b62:	17 06       	cpc	r1, r23
 b64:	18 06       	cpc	r1, r24
 b66:	99 1f       	adc	r25, r25
 b68:	f1 cf       	rjmp	.-30     	; 0xb4c <__fp_splitA+0xc>
 b6a:	86 95       	lsr	r24
 b6c:	71 05       	cpc	r23, r1
 b6e:	61 05       	cpc	r22, r1
 b70:	08 94       	sec
 b72:	08 95       	ret

00000b74 <__fp_zero>:
 b74:	e8 94       	clt

00000b76 <__fp_szero>:
 b76:	bb 27       	eor	r27, r27
 b78:	66 27       	eor	r22, r22
 b7a:	77 27       	eor	r23, r23
 b7c:	cb 01       	movw	r24, r22
 b7e:	97 f9       	bld	r25, 7
 b80:	08 95       	ret

00000b82 <__tablejump2__>:
 b82:	ee 0f       	add	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	05 90       	lpm	r0, Z+
 b88:	f4 91       	lpm	r31, Z
 b8a:	e0 2d       	mov	r30, r0
 b8c:	09 94       	ijmp

00000b8e <__muluhisi3>:
 b8e:	0e 94 d2 05 	call	0xba4	; 0xba4 <__umulhisi3>
 b92:	a5 9f       	mul	r26, r21
 b94:	90 0d       	add	r25, r0
 b96:	b4 9f       	mul	r27, r20
 b98:	90 0d       	add	r25, r0
 b9a:	a4 9f       	mul	r26, r20
 b9c:	80 0d       	add	r24, r0
 b9e:	91 1d       	adc	r25, r1
 ba0:	11 24       	eor	r1, r1
 ba2:	08 95       	ret

00000ba4 <__umulhisi3>:
 ba4:	a2 9f       	mul	r26, r18
 ba6:	b0 01       	movw	r22, r0
 ba8:	b3 9f       	mul	r27, r19
 baa:	c0 01       	movw	r24, r0
 bac:	a3 9f       	mul	r26, r19
 bae:	70 0d       	add	r23, r0
 bb0:	81 1d       	adc	r24, r1
 bb2:	11 24       	eor	r1, r1
 bb4:	91 1d       	adc	r25, r1
 bb6:	b2 9f       	mul	r27, r18
 bb8:	70 0d       	add	r23, r0
 bba:	81 1d       	adc	r24, r1
 bbc:	11 24       	eor	r1, r1
 bbe:	91 1d       	adc	r25, r1
 bc0:	08 95       	ret

00000bc2 <_exit>:
 bc2:	f8 94       	cli

00000bc4 <__stop_program>:
 bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <__stop_program>
