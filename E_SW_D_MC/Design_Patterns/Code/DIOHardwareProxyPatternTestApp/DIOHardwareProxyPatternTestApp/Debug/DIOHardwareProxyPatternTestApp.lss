
DIOHardwareProxyPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000046e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c68  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070d  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000534  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000874  00000000  00000000  000023b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
static STR_DIOProxy_t PortB_Proxy;

/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
   /* Initialize Ports Hardware Proxy. */
   DIOProxy_Init(&PortA_Proxy, &PORT_A_ADDR);
  86:	6b e3       	ldi	r22, 0x3B	; 59
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	82 e6       	ldi	r24, 0x62	; 98
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIOProxy_Init>
   DIOProxy_Init(&PortB_Proxy, &PORT_B_ADDR);
  92:	68 e3       	ldi	r22, 0x38	; 56
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIOProxy_Init>
   
   /* Configure Pins */
   DIOProxy_Configure(&PortA_Proxy, PIN_0, PIN_OUTPUT, PIN_NO_RES);
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e6       	ldi	r24, 0x62	; 98
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIOProxy_Configure>
   DIOProxy_Configure(&PortA_Proxy, PIN_1, PIN_INPUT, PIN_PULLUP);
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	82 e6       	ldi	r24, 0x62	; 98
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIOProxy_Configure>
   DIOProxy_Configure(&PortB_Proxy, PIN_0, PIN_OUTPUT, PIN_NO_RES);
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIOProxy_Configure>
   DIOProxy_Configure(&PortB_Proxy, PIN_1, PIN_INPUT, PIN_PULLUP);
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIOProxy_Configure>
   uint8_t Pin_B1_Data;
    
   while (1) 
   {
      /* Get PortA Pin1 Value  */
      DIOProxy_AccessPin(&PortA_Proxy, PIN_1, &Pin_A1_Data);
  d6:	ae 01       	movw	r20, r28
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	82 e6       	ldi	r24, 0x62	; 98
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 89 01 	call	0x312	; 0x312 <DIOProxy_AccessPin>
      /* If Pressed. */
      if(PIN_LOW == Pin_A1_Data)
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	81 11       	cpse	r24, r1
  ea:	07 c0       	rjmp	.+14     	; 0xfa <main+0x7e>
      {
         /* Set PortA Pin0 To High. */
         DIOProxy_MutatePin(&PortA_Proxy, PIN_0, PIN_HIGH);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	82 e6       	ldi	r24, 0x62	; 98
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 be 01 	call	0x37c	; 0x37c <DIOProxy_MutatePin>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <main+0x8a>
      }
      else
      {
         /* Set PortA Pin0 To Low. */
         DIOProxy_MutatePin(&PortA_Proxy, PIN_0, PIN_LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	82 e6       	ldi	r24, 0x62	; 98
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 be 01 	call	0x37c	; 0x37c <DIOProxy_MutatePin>
      }
       
      /* Get PortB Pin1 Value  */
      DIOProxy_AccessPin(&PortB_Proxy, PIN_1, &Pin_B1_Data);
 106:	ae 01       	movw	r20, r28
 108:	4e 5f       	subi	r20, 0xFE	; 254
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 89 01 	call	0x312	; 0x312 <DIOProxy_AccessPin>
      if(PIN_LOW == Pin_B1_Data)
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	81 11       	cpse	r24, r1
 11a:	07 c0       	rjmp	.+14     	; 0x12a <main+0xae>
      {
         /* Set PortB Pin0 To High. */
         DIOProxy_MutatePin(&PortB_Proxy, PIN_0, PIN_HIGH);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 be 01 	call	0x37c	; 0x37c <DIOProxy_MutatePin>
 128:	d6 cf       	rjmp	.-84     	; 0xd6 <main+0x5a>
      }
      else
      {
         /* Set PortB Pin0 To Low. */
         DIOProxy_MutatePin(&PortB_Proxy, PIN_0, PIN_LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	80 e6       	ldi	r24, 0x60	; 96
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 be 01 	call	0x37c	; 0x37c <DIOProxy_MutatePin>
 136:	cf cf       	rjmp	.-98     	; 0xd6 <main+0x5a>

00000138 <DIOProxy_Marshall>:
      Proxy_ErrorState = ERROR_NOK;
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	fb 01       	movw	r30, r22
 140:	a8 81       	ld	r26, Y
 142:	b9 81       	ldd	r27, Y+1	; 0x01
 144:	10 97       	sbiw	r26, 0x00	; 0
 146:	09 f4       	brne	.+2      	; 0x14a <DIOProxy_Marshall+0x12>
 148:	56 c0       	rjmp	.+172    	; 0x1f6 <DIOProxy_Marshall+0xbe>
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	09 f4       	brne	.+2      	; 0x150 <DIOProxy_Marshall+0x18>
 14e:	55 c0       	rjmp	.+170    	; 0x1fa <DIOProxy_Marshall+0xc2>
 150:	84 81       	ldd	r24, Z+4	; 0x04
 152:	81 11       	cpse	r24, r1
 154:	33 c0       	rjmp	.+102    	; 0x1bc <DIOProxy_Marshall+0x84>
 156:	8e 91       	ld	r24, -X
 158:	60 81       	ld	r22, Z
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	06 2e       	mov	r0, r22
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIOProxy_Marshall+0x2e>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIOProxy_Marshall+0x2a>
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	29 2f       	mov	r18, r25
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIOProxy_Marshall+0x3e>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIOProxy_Marshall+0x3a>
 17a:	40 95       	com	r20
 17c:	48 23       	and	r20, r24
 17e:	24 2b       	or	r18, r20
 180:	2c 93       	st	X, r18
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	81 11       	cpse	r24, r1
 186:	3b c0       	rjmp	.+118    	; 0x1fe <DIOProxy_Marshall+0xc6>
 188:	a8 81       	ld	r26, Y
 18a:	b9 81       	ldd	r27, Y+1	; 0x01
 18c:	4c 91       	ld	r20, X
 18e:	50 81       	ld	r21, Z
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	05 2e       	mov	r0, r21
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIOProxy_Marshall+0x64>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIOProxy_Marshall+0x60>
 1a0:	93 81       	ldd	r25, Z+3	; 0x03
 1a2:	89 2f       	mov	r24, r25
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIOProxy_Marshall+0x74>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	5a 95       	dec	r21
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIOProxy_Marshall+0x70>
 1b0:	20 95       	com	r18
 1b2:	24 23       	and	r18, r20
 1b4:	82 2b       	or	r24, r18
 1b6:	8c 93       	st	X, r24
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	26 c0       	rjmp	.+76     	; 0x208 <DIOProxy_Marshall+0xd0>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f5       	brne	.+66     	; 0x202 <DIOProxy_Marshall+0xca>
 1c0:	81 81       	ldd	r24, Z+1	; 0x01
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	01 f5       	brne	.+64     	; 0x206 <DIOProxy_Marshall+0xce>
 1c6:	4c 91       	ld	r20, X
 1c8:	50 81       	ld	r21, Z
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	05 2e       	mov	r0, r21
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIOProxy_Marshall+0x9e>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIOProxy_Marshall+0x9a>
 1da:	92 81       	ldd	r25, Z+2	; 0x02
 1dc:	89 2f       	mov	r24, r25
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIOProxy_Marshall+0xae>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	5a 95       	dec	r21
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIOProxy_Marshall+0xaa>
 1ea:	20 95       	com	r18
 1ec:	24 23       	and	r18, r20
 1ee:	82 2b       	or	r24, r18
 1f0:	8c 93       	st	X, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <DIOProxy_Marshall+0xd0>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <DIOProxy_Marshall+0xd0>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <DIOProxy_Marshall+0xd0>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	03 c0       	rjmp	.+6      	; 0x208 <DIOProxy_Marshall+0xd0>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	01 c0       	rjmp	.+2      	; 0x208 <DIOProxy_Marshall+0xd0>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <DIOProxy_Unmarshall>:
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	fb 01       	movw	r30, r22
 214:	dc 01       	movw	r26, r24
 216:	2d 91       	ld	r18, X+
 218:	3c 91       	ld	r19, X
 21a:	21 15       	cp	r18, r1
 21c:	31 05       	cpc	r19, r1
 21e:	e1 f1       	breq	.+120    	; 0x298 <DIOProxy_Unmarshall+0x8a>
 220:	30 97       	sbiw	r30, 0x00	; 0
 222:	e1 f1       	breq	.+120    	; 0x29c <DIOProxy_Unmarshall+0x8e>
 224:	d9 01       	movw	r26, r18
 226:	11 97       	sbiw	r26, 0x01	; 1
 228:	2c 91       	ld	r18, X
 22a:	40 81       	ld	r20, Z
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	04 2e       	mov	r0, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIOProxy_Unmarshall+0x28>
 232:	35 95       	asr	r19
 234:	27 95       	ror	r18
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIOProxy_Unmarshall+0x24>
 23a:	21 70       	andi	r18, 0x01	; 1
 23c:	21 83       	std	Z+1, r18	; 0x01
 23e:	21 30       	cpi	r18, 0x01	; 1
 240:	71 f4       	brne	.+28     	; 0x25e <DIOProxy_Unmarshall+0x50>
 242:	ec 01       	movw	r28, r24
 244:	a8 81       	ld	r26, Y
 246:	b9 81       	ldd	r27, Y+1	; 0x01
 248:	8c 91       	ld	r24, X
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIOProxy_Unmarshall+0x44>
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	4a 95       	dec	r20
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIOProxy_Unmarshall+0x40>
 256:	81 70       	andi	r24, 0x01	; 1
 258:	82 83       	std	Z+2, r24	; 0x02
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	22 c0       	rjmp	.+68     	; 0x2a2 <DIOProxy_Unmarshall+0x94>
 25e:	21 11       	cpse	r18, r1
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <DIOProxy_Unmarshall+0x92>
 262:	ec 01       	movw	r28, r24
 264:	a8 81       	ld	r26, Y
 266:	b9 81       	ldd	r27, Y+1	; 0x01
 268:	2c 91       	ld	r18, X
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	04 2e       	mov	r0, r20
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIOProxy_Unmarshall+0x66>
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIOProxy_Unmarshall+0x62>
 278:	21 70       	andi	r18, 0x01	; 1
 27a:	23 83       	std	Z+3, r18	; 0x03
 27c:	a8 81       	ld	r26, Y
 27e:	b9 81       	ldd	r27, Y+1	; 0x01
 280:	12 97       	sbiw	r26, 0x02	; 2
 282:	8c 91       	ld	r24, X
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIOProxy_Unmarshall+0x7e>
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	4a 95       	dec	r20
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIOProxy_Unmarshall+0x7a>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	82 83       	std	Z+2, r24	; 0x02
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIOProxy_Unmarshall+0x94>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <DIOProxy_Unmarshall+0x94>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <DIOProxy_Unmarshall+0x94>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <DIOProxy_Init>:
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	39 f0       	breq	.+14     	; 0x2bc <DIOProxy_Init+0x14>
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	39 f0       	breq	.+14     	; 0x2c0 <DIOProxy_Init+0x18>
 2b2:	fc 01       	movw	r30, r24
 2b4:	71 83       	std	Z+1, r23	; 0x01
 2b6:	60 83       	st	Z, r22
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret

000002c4 <DIOProxy_Configure>:
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <DIOProxy_Configure+0x6>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <DIOProxy_Configure+0x8>
 2cc:	1f 92       	push	r1
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	89 f0       	breq	.+34     	; 0x2f8 <DIOProxy_Configure+0x34>
 2d6:	dc 01       	movw	r26, r24
 2d8:	ed 91       	ld	r30, X+
 2da:	fc 91       	ld	r31, X
 2dc:	ef 2b       	or	r30, r31
 2de:	71 f0       	breq	.+28     	; 0x2fc <DIOProxy_Configure+0x38>
 2e0:	68 30       	cpi	r22, 0x08	; 8
 2e2:	70 f4       	brcc	.+28     	; 0x300 <DIOProxy_Configure+0x3c>
 2e4:	69 83       	std	Y+1, r22	; 0x01
 2e6:	4a 83       	std	Y+2, r20	; 0x02
 2e8:	2c 83       	std	Y+4, r18	; 0x04
 2ea:	1d 82       	std	Y+5, r1	; 0x05
 2ec:	be 01       	movw	r22, r28
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	0e 94 9c 00 	call	0x138	; 0x138 <DIOProxy_Marshall>
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <DIOProxy_Configure+0x3e>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <DIOProxy_Configure+0x3e>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <DIOProxy_Configure+0x3e>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <DIOProxy_AccessPin>:
* @param [out] PinData     -  Pin Value.
*
* @return function error state.
*/
ERROR_STATE_t DIOProxy_AccessPin(STR_DIOProxy_t * const ProxyData, uint8_t Pin, uint8_t * PinData)
{
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <DIOProxy_AccessPin+0xa>
 31c:	00 d0       	rcall	.+0      	; 0x31e <DIOProxy_AccessPin+0xc>
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(NULL_PTR != ProxyData && NULL_PTR != ProxyData->u8_Addr && NULL_PTR != PinData && Pin < PIN_INVALID)
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	c9 f0       	breq	.+50     	; 0x35a <DIOProxy_AccessPin+0x48>
 328:	fc 01       	movw	r30, r24
 32a:	20 81       	ld	r18, Z
 32c:	31 81       	ldd	r19, Z+1	; 0x01
 32e:	23 2b       	or	r18, r19
 330:	b1 f0       	breq	.+44     	; 0x35e <DIOProxy_AccessPin+0x4c>
 332:	41 15       	cp	r20, r1
 334:	51 05       	cpc	r21, r1
 336:	a9 f0       	breq	.+42     	; 0x362 <DIOProxy_AccessPin+0x50>
 338:	68 30       	cpi	r22, 0x08	; 8
 33a:	a8 f4       	brcc	.+42     	; 0x366 <DIOProxy_AccessPin+0x54>
 33c:	8a 01       	movw	r16, r20
   {
      /* Set The Pin Number */
      STR_DIOData_t Data;
      Data.u8_Pin = Pin;
 33e:	69 83       	std	Y+1, r22	; 0x01
      /* Unmarshall Data from Hardware. */
      Proxy_ErrorState = DIOProxy_Unmarshall(ProxyData, &Data);
 340:	be 01       	movw	r22, r28
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	0e 94 07 01 	call	0x20e	; 0x20e <DIOProxy_Unmarshall>
      if(ERROR_OK == Proxy_ErrorState)
 34a:	81 11       	cpse	r24, r1
 34c:	04 c0       	rjmp	.+8      	; 0x356 <DIOProxy_AccessPin+0x44>
      {
         /* Put Pin Value In the output Variable. */
         *PinData = Data.u8_PinData;
 34e:	9b 81       	ldd	r25, Y+3	; 0x03
 350:	f8 01       	movw	r30, r16
 352:	90 83       	st	Z, r25
 354:	09 c0       	rjmp	.+18     	; 0x368 <DIOProxy_AccessPin+0x56>
         Proxy_ErrorState = ERROR_OK;
      }
      else
      {
         /* Set Function Error State to OK */
         Proxy_ErrorState = ERROR_NOK;
 356:	81 e0       	ldi	r24, 0x01	; 1
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(NULL_PTR != ProxyData && NULL_PTR != ProxyData->u8_Addr && NULL_PTR != PinData && Pin < PIN_INVALID)
   {
 358:	07 c0       	rjmp	.+14     	; 0x368 <DIOProxy_AccessPin+0x56>
      }
   }
   else
   {
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_NOK;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	05 c0       	rjmp	.+10     	; 0x368 <DIOProxy_AccessPin+0x56>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	03 c0       	rjmp	.+6      	; 0x368 <DIOProxy_AccessPin+0x56>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	01 c0       	rjmp	.+2      	; 0x368 <DIOProxy_AccessPin+0x56>
 366:	81 e0       	ldi	r24, 0x01	; 1
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <DIOProxy_MutatePin>:
* @param [in]  PinData     -  Pin Value in Hardware [HIGH/LOW].
*
* @return function error state.
*/
ERROR_STATE_t DIOProxy_MutatePin(STR_DIOProxy_t * const ProxyData, uint8_t Pin, uint8_t PinData)
{
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <DIOProxy_MutatePin+0xc>
 388:	00 d0       	rcall	.+0      	; 0x38a <DIOProxy_MutatePin+0xe>
 38a:	1f 92       	push	r1
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(NULL_PTR != ProxyData && NULL_PTR != ProxyData->u8_Addr && Pin < PIN_INVALID)
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	09 f1       	breq	.+66     	; 0x3d6 <DIOProxy_MutatePin+0x5a>
 394:	fc 01       	movw	r30, r24
 396:	20 81       	ld	r18, Z
 398:	31 81       	ldd	r19, Z+1	; 0x01
 39a:	23 2b       	or	r18, r19
 39c:	f1 f0       	breq	.+60     	; 0x3da <DIOProxy_MutatePin+0x5e>
 39e:	68 30       	cpi	r22, 0x08	; 8
 3a0:	f0 f4       	brcc	.+60     	; 0x3de <DIOProxy_MutatePin+0x62>
 3a2:	f4 2e       	mov	r15, r20
 3a4:	8c 01       	movw	r16, r24
   {
      /* Set The Pin Number */
      STR_DIOData_t Data;
      Data.u8_Pin = Pin;
 3a6:	69 83       	std	Y+1, r22	; 0x01
      /* Unmarshall Data from Hardware. */
      Proxy_ErrorState = DIOProxy_Unmarshall(ProxyData, &Data);
 3a8:	be 01       	movw	r22, r28
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	0e 94 07 01 	call	0x20e	; 0x20e <DIOProxy_Unmarshall>
      if(ERROR_OK == Proxy_ErrorState)
 3b2:	81 11       	cpse	r24, r1
 3b4:	0c c0       	rjmp	.+24     	; 0x3ce <DIOProxy_MutatePin+0x52>
      {
         if(PIN_OUTPUT == Data.u8_PinDirection)
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	59 f4       	brne	.+22     	; 0x3d2 <DIOProxy_MutatePin+0x56>
         {
            /* Set New Pin Value. */
            Data.u8_PinData = PinData;
 3bc:	fb 82       	std	Y+3, r15	; 0x03
            /* Set Mutation Command. */
            Data.u8_CMD = PIN_CMD_MUTATE;
 3be:	8d 83       	std	Y+5, r24	; 0x05
            /* Marshall Data to Hardware. */
            Proxy_ErrorState = DIOProxy_Marshall(ProxyData, &Data);
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	c8 01       	movw	r24, r16
 3c8:	0e 94 9c 00 	call	0x138	; 0x138 <DIOProxy_Marshall>
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <DIOProxy_MutatePin+0x64>
         }
      }
      else
      {
         /* Set Function Error State to OK */
         Proxy_ErrorState = ERROR_NOK;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <DIOProxy_MutatePin+0x64>
            Proxy_ErrorState = DIOProxy_Marshall(ProxyData, &Data);
         }
         else
         {
            /* Set Function Error State to OK */
            Proxy_ErrorState = ERROR_NOK;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(NULL_PTR != ProxyData && NULL_PTR != ProxyData->u8_Addr && Pin < PIN_INVALID)
   {
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <DIOProxy_MutatePin+0x64>
      }
   }
   else
   {
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_NOK;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <DIOProxy_MutatePin+0x64>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <DIOProxy_MutatePin+0x64>
 3de:	81 e0       	ldi	r24, 0x01	; 1
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
