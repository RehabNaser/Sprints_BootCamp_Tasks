
Obstacle_Avoidance_Car_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00002a80  00002b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  008000a2  008000a2  00002b56  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  00005a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa9  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001403  00000000  00000000  00009791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001804  00000000  00000000  0000ab94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000948  00000000  00000000  0000c398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001450  00000000  00000000  0000cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002431  00000000  00000000  0000e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00010561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 09 	call	0x1226	; 0x1226 <main>
      8a:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRASH_MainFunction>:
-----------------------------------*/
/**
* @brief: This is the main function of CRASH module.
*/
extern void CRASH_MainFunction(void)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
   ERROR_STATE_t CRASH_MainErrorState;
   
   /* Call Distance Getter Function */
   SENSING_Get(&gd64_distance);
      9a:	82 ea       	ldi	r24, 0xA2	; 162
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SENSING_Get>
static ERROR_STATE_t CRASH_Logic(void)
{
   static Enu_LogicStateMachine u8_CurrentState = CRASH_Ready;
   static Enu_LogicStateMachine u8_PreviousState = CRASH_Ready;

   if(gd64_distance > gd64_UpperDistanceLimit)
      a2:	c0 90 a2 00 	lds	r12, 0x00A2
      a6:	d0 90 a3 00 	lds	r13, 0x00A3
      aa:	e0 90 a4 00 	lds	r14, 0x00A4
      ae:	f0 90 a5 00 	lds	r15, 0x00A5
      b2:	c7 01       	movw	r24, r14
      b4:	b6 01       	movw	r22, r12
      b6:	20 91 64 00 	lds	r18, 0x0064
      ba:	30 91 65 00 	lds	r19, 0x0065
      be:	40 91 66 00 	lds	r20, 0x0066
      c2:	50 91 67 00 	lds	r21, 0x0067
      c6:	0e 94 96 14 	call	0x292c	; 0x292c <__gesf2>
      ca:	18 16       	cp	r1, r24
      cc:	24 f4       	brge	.+8      	; 0xd6 <CRASH_MainFunction+0x44>
   {
      u8_CurrentState = CRASH_Forward;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 a9 00 	sts	0x00A9, r24
      d4:	15 c0       	rjmp	.+42     	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else if (gd64_distance < gd64_LowerDistanceLimit)
      d6:	c7 01       	movw	r24, r14
      d8:	b6 01       	movw	r22, r12
      da:	20 91 60 00 	lds	r18, 0x0060
      de:	30 91 61 00 	lds	r19, 0x0061
      e2:	40 91 62 00 	lds	r20, 0x0062
      e6:	50 91 63 00 	lds	r21, 0x0063
      ea:	0e 94 0e 13 	call	0x261c	; 0x261c <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	24 f4       	brge	.+8      	; 0xfa <CRASH_MainFunction+0x68>
   {
		u8_CurrentState = CRASH_Backward;  
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 a9 00 	sts	0x00A9, r24
      f8:	03 c0       	rjmp	.+6      	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else
   {
      u8_CurrentState = CRASH_RotateRight;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 a9 00 	sts	0x00A9, r24
   }
   
   if(u8_PreviousState != u8_CurrentState)
     100:	80 91 a9 00 	lds	r24, 0x00A9
     104:	90 91 aa 00 	lds	r25, 0x00AA
     108:	98 17       	cp	r25, r24
     10a:	59 f1       	breq	.+86     	; 0x162 <CRASH_MainFunction+0xd0>
   {
      switch(u8_CurrentState)
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	81 f0       	breq	.+32     	; 0x130 <CRASH_MainFunction+0x9e>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	d9 f0       	breq	.+54     	; 0x14a <CRASH_MainFunction+0xb8>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	69 f5       	brne	.+90     	; 0x172 <CRASH_MainFunction+0xe0>
      {
         case CRASH_Forward:
            gu8_CarDirection = STEERING_FORWARD;
     118:	10 92 a6 00 	sts	0x00A6, r1
            gu8_CarSpeed = 15;
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 a8 00 	sts	0x00A8, r25
     124:	80 93 a7 00 	sts	0x00A7, r24
            u8_PreviousState = u8_CurrentState;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 aa 00 	sts	0x00AA, r24
     12e:	19 c0       	rjmp	.+50     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_Backward:
            gu8_CarDirection = STEERING_BACKWARD;		
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 a6 00 	sts	0x00A6, r24
            gu8_CarSpeed = 15;
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 a8 00 	sts	0x00A8, r25
     13e:	80 93 a7 00 	sts	0x00A7, r24
            u8_PreviousState = u8_CurrentState;
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 aa 00 	sts	0x00AA, r24
     148:	0c c0       	rjmp	.+24     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_RotateRight:
            gu8_CarDirection = STEERING_RIGHT;		
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 a6 00 	sts	0x00A6, r24
            gu8_CarSpeed = 100;
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 a8 00 	sts	0x00A8, r25
     158:	80 93 a7 00 	sts	0x00A7, r24
            u8_PreviousState = u8_CurrentState;
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	80 93 aa 00 	sts	0x00AA, r24
   CRASH_MainErrorState = CRASH_Logic();
   
   /* Call Speed and Direction Setters */
   if(ERROR_OK == CRASH_MainErrorState)
   {
      STEERING_Set(gu8_CarDirection, gu8_CarSpeed);
     162:	60 91 a7 00 	lds	r22, 0x00A7
     166:	70 91 a8 00 	lds	r23, 0x00A8
     16a:	80 91 a6 00 	lds	r24, 0x00A6
     16e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <STEERING_Set>
   }
   return;
}
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <SENSING_MainFunction>:

	return u8_ErrorState;
}

void SENSING_MainFunction(void)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	00 d0       	rcall	.+0      	; 0x182 <SENSING_MainFunction+0x6>
     182:	00 d0       	rcall	.+0      	; 0x184 <SENSING_MainFunction+0x8>
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
     188:	80 91 ab 00 	lds	r24, 0x00AB
     18c:	88 23       	and	r24, r24
     18e:	41 f4       	brne	.+16     	; 0x1a0 <SENSING_MainFunction+0x24>

static ERROR_STATE_t SENSING_Init(void);
static ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
     190:	0e 94 f5 06 	call	0xdea	; 0xdea <USONIC_Init>
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
	{
		if(ERROR_OK==SENSING_Init())
     194:	88 23       	and	r24, r24
     196:	21 f4       	brne	.+8      	; 0x1a0 <SENSING_MainFunction+0x24>
		{
			u8_InitFlag=INIT;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	80 93 ab 00 	sts	0x00AB, r24
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <SENSING_MainFunction+0x2c>
		else
		{	
					
		}
	}
	if(INIT==u8_InitFlag)
     1a0:	80 91 ab 00 	lds	r24, 0x00AB
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	61 f4       	brne	.+24     	; 0x1c0 <SENSING_MainFunction+0x44>
	{
		u8_UsonicState = USONIC_GetDistance(&d64_Distance);
     1a8:	ce 01       	movw	r24, r28
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	0e 94 1f 07 	call	0xe3e	; 0xe3e <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
     1b0:	88 23       	and	r24, r24
     1b2:	31 f4       	brne	.+12     	; 0x1c0 <SENSING_MainFunction+0x44>
		{
			SENSING_Set(d64_Distance);
     1b4:	69 81       	ldd	r22, Y+1	; 0x01
     1b6:	7a 81       	ldd	r23, Y+2	; 0x02
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SENSING_Set>
		{
			/*Do Nothing*/			
		}		
	}	
	return;
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
     1ce:	00 97       	sbiw	r24, 0x00	; 0
     1d0:	79 f0       	breq	.+30     	; 0x1f0 <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
     1d2:	40 91 ac 00 	lds	r20, 0x00AC
     1d6:	50 91 ad 00 	lds	r21, 0x00AD
     1da:	60 91 ae 00 	lds	r22, 0x00AE
     1de:	70 91 af 00 	lds	r23, 0x00AF
     1e2:	fc 01       	movw	r30, r24
     1e4:	40 83       	st	Z, r20
     1e6:	51 83       	std	Z+1, r21	; 0x01
     1e8:	62 83       	std	Z+2, r22	; 0x02
     1ea:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
     1f2:	08 95       	ret

000001f4 <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
     1f8:	80 93 ac 00 	sts	0x00AC, r24
     1fc:	90 93 ad 00 	sts	0x00AD, r25
     200:	a0 93 ae 00 	sts	0x00AE, r26
     204:	b0 93 af 00 	sts	0x00AF, r27
	
	return u8_ErrorState;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <STEERING_MainFunction>:
* @brief: This function Moves the robot to a given direction.
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     20c:	80 91 b0 00 	lds	r24, 0x00B0
     210:	88 23       	and	r24, r24
     212:	41 f4       	brne	.+16     	; 0x224 <STEERING_MainFunction+0x18>
------------------------*/
static ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   MOTOR_ErrorState = MOTOR_init();
     214:	0e 94 06 05 	call	0xa0c	; 0xa0c <MOTOR_init>
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==STEERING_Init()){
     218:	88 23       	and	r24, r24
     21a:	21 f4       	brne	.+8      	; 0x224 <STEERING_MainFunction+0x18>
			u8_InitFlag=INIT;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 b0 00 	sts	0x00B0, r24
     222:	05 c0       	rjmp	.+10     	; 0x22e <STEERING_MainFunction+0x22>
		}
	}
	else{
        //DO Nothing
	}
    if(INIT==u8_InitFlag){
     224:	80 91 b0 00 	lds	r24, 0x00B0
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	09 f0       	breq	.+2      	; 0x22e <STEERING_MainFunction+0x22>
     22c:	44 c0       	rjmp	.+136    	; 0x2b6 <STEERING_MainFunction+0xaa>
		STEERING_Get(&gu8_dir,&gu16_speed);
     22e:	81 eb       	ldi	r24, 0xB1	; 177
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	62 eb       	ldi	r22, 0xB2	; 178
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	0e 94 6d 01 	call	0x2da	; 0x2da <STEERING_Get>
		switch(gu8_dir)
     23a:	80 91 b1 00 	lds	r24, 0x00B1
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	a1 f0       	breq	.+40     	; 0x26a <STEERING_MainFunction+0x5e>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	28 f0       	brcs	.+10     	; 0x250 <STEERING_MainFunction+0x44>
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	e9 f0       	breq	.+58     	; 0x284 <STEERING_MainFunction+0x78>
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	a1 f5       	brne	.+104    	; 0x2b6 <STEERING_MainFunction+0xaa>
     24e:	27 c0       	rjmp	.+78     	; 0x29e <STEERING_MainFunction+0x92>
		{
		  case STEERING_FORWARD:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_FORWARD);
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	60 91 b2 00 	lds	r22, 0x00B2
     256:	41 e0       	ldi	r20, 0x01	; 1
     258:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
            MOTOR_start(MOTOR2, gu16_speed, MOTOR_FORWARD);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	60 91 b2 00 	lds	r22, 0x00B2
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
			 break;
     268:	08 95       	ret
		  case STEERING_BACKWARD:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_BACKWARD);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	60 91 b2 00 	lds	r22, 0x00B2
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
            MOTOR_start(MOTOR2, gu16_speed, MOTOR_BACKWARD);		 
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	60 91 b2 00 	lds	r22, 0x00B2
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
			 break;
     282:	08 95       	ret
		  case STEERING_RIGHT:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_BACKWARD);
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	60 91 b2 00 	lds	r22, 0x00B2
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
			MOTOR_start(MOTOR2, gu16_speed, MOTOR_FORWARD);	 
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	60 91 b2 00 	lds	r22, 0x00B2
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
			 break;
     29c:	08 95       	ret
		  case STEERING_LEFT:
			 MOTOR_start(MOTOR1, gu16_speed, MOTOR_FORWARD);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	60 91 b2 00 	lds	r22, 0x00B2
     2a4:	41 e0       	ldi	r20, 0x01	; 1
     2a6:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
			 MOTOR_start(MOTOR2, gu16_speed, MOTOR_BACKWARD);
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	60 91 b2 00 	lds	r22, 0x00B2
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	0e 94 39 05 	call	0xa72	; 0xa72 <MOTOR_start>
     2b6:	08 95       	ret

000002b8 <STEERING_Set>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir >=INVALID_STEERING){
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	58 f4       	brcc	.+22     	; 0x2d2 <STEERING_Set+0x1a>
		STEERING_ErrorState = ERROR_NOK;
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed > STEERING_MAX_SPEED){
     2bc:	65 36       	cpi	r22, 0x65	; 101
     2be:	71 05       	cpc	r23, r1
     2c0:	50 f4       	brcc	.+20     	; 0x2d6 <STEERING_Set+0x1e>
		STEERING_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE SPEED*/
		gstr_Steering_State.u16_steering_Speed=Speed;
     2c2:	70 93 b5 00 	sts	0x00B5, r23
     2c6:	60 93 b4 00 	sts	0x00B4, r22
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
     2ca:	80 93 b6 00 	sts	0x00B6, r24
* @param [in]  Direction -  Direction of Car to move.
* @param [in]  Speed -  Speed of Car to move.
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	08 95       	ret
	/*CHECK IF INVALID DIRECTION*/
	if(Dir >=INVALID_STEERING){
		STEERING_ErrorState = ERROR_NOK;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed > STEERING_MAX_SPEED){
		STEERING_ErrorState = ERROR_NOK;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
		gstr_Steering_State.u16_steering_Speed=Speed;
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
	}
	return STEERING_ErrorState;
}
     2d8:	08 95       	ret

000002da <STEERING_Get>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	81 f0       	breq	.+32     	; 0x2fe <STEERING_Get+0x24>
     2de:	61 15       	cp	r22, r1
     2e0:	71 05       	cpc	r23, r1
     2e2:	79 f0       	breq	.+30     	; 0x302 <STEERING_Get+0x28>
		STEERING_ErrorState=ERROR_NOK;
	}
	else
    {
		/*GET THE SPEED*/
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
     2e4:	20 91 b4 00 	lds	r18, 0x00B4
     2e8:	30 91 b5 00 	lds	r19, 0x00B5
     2ec:	fb 01       	movw	r30, r22
     2ee:	31 83       	std	Z+1, r19	; 0x01
     2f0:	20 83       	st	Z, r18
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
     2f2:	20 91 b6 00 	lds	r18, 0x00B6
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
* @param [out]  Direction - Direction of Car.
* @param [out]  Speed -  Speed of Car.
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	08 95       	ret
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
    {
		STEERING_ErrorState=ERROR_NOK;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	08 95       	ret
     302:	81 e0       	ldi	r24, 0x01	; 1
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
	}
	return STEERING_ErrorState;
     304:	08 95       	ret

00000306 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     310:	80 91 68 00 	lds	r24, 0x0068
     314:	83 30       	cpi	r24, 0x03	; 3
     316:	09 f4       	brne	.+2      	; 0x31a <LCD_SendCommand+0x14>
     318:	ce c0       	rjmp	.+412    	; 0x4b6 <LCD_SendCommand+0x1b0>
     31a:	84 30       	cpi	r24, 0x04	; 4
     31c:	38 f4       	brcc	.+14     	; 0x32c <LCD_SendCommand+0x26>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	09 f4       	brne	.+2      	; 0x324 <LCD_SendCommand+0x1e>
     322:	60 c0       	rjmp	.+192    	; 0x3e4 <LCD_SendCommand+0xde>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	09 f0       	breq	.+2      	; 0x32a <LCD_SendCommand+0x24>
     328:	01 c1       	rjmp	.+514    	; 0x52c <LCD_SendCommand+0x226>
     32a:	7f c0       	rjmp	.+254    	; 0x42a <LCD_SendCommand+0x124>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	09 f4       	brne	.+2      	; 0x332 <LCD_SendCommand+0x2c>
     330:	e4 c0       	rjmp	.+456    	; 0x4fa <LCD_SendCommand+0x1f4>
     332:	8f 3f       	cpi	r24, 0xFF	; 255
     334:	09 f0       	breq	.+2      	; 0x338 <LCD_SendCommand+0x32>
     336:	fa c0       	rjmp	.+500    	; 0x52c <LCD_SendCommand+0x226>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     338:	d0 91 6b 00 	lds	r29, 0x006B
     33c:	8d 2f       	mov	r24, r29
     33e:	60 91 6c 00 	lds	r22, 0x006C
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     348:	8d 2f       	mov	r24, r29
     34a:	60 91 6d 00 	lds	r22, 0x006D
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     354:	0c 2f       	mov	r16, r28
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	a8 01       	movw	r20, r16
     35a:	40 71       	andi	r20, 0x10	; 16
     35c:	50 70       	andi	r21, 0x00	; 0
     35e:	55 95       	asr	r21
     360:	47 95       	ror	r20
     362:	55 95       	asr	r21
     364:	47 95       	ror	r20
     366:	55 95       	asr	r21
     368:	47 95       	ror	r20
     36a:	55 95       	asr	r21
     36c:	47 95       	ror	r20
     36e:	8d 2f       	mov	r24, r29
     370:	60 91 72 00 	lds	r22, 0x0072
     374:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     378:	a8 01       	movw	r20, r16
     37a:	40 72       	andi	r20, 0x20	; 32
     37c:	50 70       	andi	r21, 0x00	; 0
     37e:	55 95       	asr	r21
     380:	47 95       	ror	r20
     382:	55 95       	asr	r21
     384:	47 95       	ror	r20
     386:	55 95       	asr	r21
     388:	47 95       	ror	r20
     38a:	55 95       	asr	r21
     38c:	47 95       	ror	r20
     38e:	55 95       	asr	r21
     390:	47 95       	ror	r20
     392:	8d 2f       	mov	r24, r29
     394:	60 91 71 00 	lds	r22, 0x0071
     398:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     39c:	00 74       	andi	r16, 0x40	; 64
     39e:	10 70       	andi	r17, 0x00	; 0
     3a0:	a8 01       	movw	r20, r16
     3a2:	04 2e       	mov	r0, r20
     3a4:	45 2f       	mov	r20, r21
     3a6:	00 0c       	add	r0, r0
     3a8:	44 1f       	adc	r20, r20
     3aa:	55 0b       	sbc	r21, r21
     3ac:	00 0c       	add	r0, r0
     3ae:	44 1f       	adc	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	8d 2f       	mov	r24, r29
     3b4:	60 91 70 00 	lds	r22, 0x0070
     3b8:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     3bc:	4c 2f       	mov	r20, r28
     3be:	44 1f       	adc	r20, r20
     3c0:	44 27       	eor	r20, r20
     3c2:	44 1f       	adc	r20, r20
     3c4:	8d 2f       	mov	r24, r29
     3c6:	60 91 6f 00 	lds	r22, 0x006F
     3ca:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     3ce:	8d 2f       	mov	r24, r29
     3d0:	60 91 6e 00 	lds	r22, 0x006E
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 68 00 	sts	0x0068, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3e0:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     3e2:	ab c0       	rjmp	.+342    	; 0x53a <LCD_SendCommand+0x234>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     3e4:	c3 e8       	ldi	r28, 0x83	; 131
     3e6:	d1 e0       	ldi	r29, 0x01	; 1
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	be 01       	movw	r22, r28
     3ec:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     3f0:	8b 3f       	cpi	r24, 0xFB	; 251
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <LCD_SendCommand+0xf0>
     3f4:	9d c0       	rjmp	.+314    	; 0x530 <LCD_SendCommand+0x22a>
		{
   		TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	9e 01       	movw	r18, r28
     402:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	be 01       	movw	r22, r28
     40a:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     40e:	88 23       	and	r24, r24
     410:	d1 f7       	brne	.-12     	; 0x406 <LCD_SendCommand+0x100>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     412:	80 91 6b 00 	lds	r24, 0x006B
     416:	60 91 6e 00 	lds	r22, 0x006E
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	80 93 68 00 	sts	0x0068, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	88 c0       	rjmp	.+272    	; 0x53a <LCD_SendCommand+0x234>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     42a:	d0 91 6b 00 	lds	r29, 0x006B
     42e:	8d 2f       	mov	r24, r29
     430:	60 91 6c 00 	lds	r22, 0x006C
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     43a:	8d 2f       	mov	r24, r29
     43c:	60 91 6d 00 	lds	r22, 0x006D
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     446:	4c 2f       	mov	r20, r28
     448:	41 70       	andi	r20, 0x01	; 1
     44a:	8d 2f       	mov	r24, r29
     44c:	60 91 72 00 	lds	r22, 0x0072
     450:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     454:	0c 2f       	mov	r16, r28
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	a8 01       	movw	r20, r16
     45a:	42 70       	andi	r20, 0x02	; 2
     45c:	50 70       	andi	r21, 0x00	; 0
     45e:	55 95       	asr	r21
     460:	47 95       	ror	r20
     462:	8d 2f       	mov	r24, r29
     464:	60 91 71 00 	lds	r22, 0x0071
     468:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     46c:	a8 01       	movw	r20, r16
     46e:	44 70       	andi	r20, 0x04	; 4
     470:	50 70       	andi	r21, 0x00	; 0
     472:	55 95       	asr	r21
     474:	47 95       	ror	r20
     476:	55 95       	asr	r21
     478:	47 95       	ror	r20
     47a:	8d 2f       	mov	r24, r29
     47c:	60 91 70 00 	lds	r22, 0x0070
     480:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     484:	08 70       	andi	r16, 0x08	; 8
     486:	10 70       	andi	r17, 0x00	; 0
     488:	a8 01       	movw	r20, r16
     48a:	55 95       	asr	r21
     48c:	47 95       	ror	r20
     48e:	55 95       	asr	r21
     490:	47 95       	ror	r20
     492:	55 95       	asr	r21
     494:	47 95       	ror	r20
     496:	8d 2f       	mov	r24, r29
     498:	60 91 6f 00 	lds	r22, 0x006F
     49c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     4a0:	8d 2f       	mov	r24, r29
     4a2:	60 91 6e 00 	lds	r22, 0x006E
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	80 93 68 00 	sts	0x0068, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     4b4:	42 c0       	rjmp	.+132    	; 0x53a <LCD_SendCommand+0x234>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     4b6:	c3 e8       	ldi	r28, 0x83	; 131
     4b8:	d1 e0       	ldi	r29, 0x01	; 1
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	be 01       	movw	r22, r28
     4be:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     4c2:	8b 3f       	cpi	r24, 0xFB	; 251
     4c4:	b9 f5       	brne	.+110    	; 0x534 <LCD_SendCommand+0x22e>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	9e 01       	movw	r18, r28
     4d2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	be 01       	movw	r22, r28
     4da:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     4de:	88 23       	and	r24, r24
     4e0:	d1 f7       	brne	.-12     	; 0x4d6 <LCD_SendCommand+0x1d0>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     4e2:	80 91 6b 00 	lds	r24, 0x006B
     4e6:	60 91 6e 00 	lds	r22, 0x006E
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	80 93 68 00 	sts	0x0068, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	20 c0       	rjmp	.+64     	; 0x53a <LCD_SendCommand+0x234>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     4fa:	c3 e8       	ldi	r28, 0x83	; 131
     4fc:	d1 e0       	ldi	r29, 0x01	; 1
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	be 01       	movw	r22, r28
     502:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     506:	8b 3f       	cpi	r24, 0xFB	; 251
     508:	51 f4       	brne	.+20     	; 0x51e <LCD_SendCommand+0x218>
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	42 e0       	ldi	r20, 0x02	; 2
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	9e 01       	movw	r18, r28
     516:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <TIM_DelayMs>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	0e c0       	rjmp	.+28     	; 0x53a <LCD_SendCommand+0x234>
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     51e:	88 23       	and	r24, r24
     520:	59 f4       	brne	.+22     	; 0x538 <LCD_SendCommand+0x232>
		{
			/*reset the function's state*/
			State = OperationStarted;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	80 93 68 00 	sts	0x0068, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	07 c0       	rjmp	.+14     	; 0x53a <LCD_SendCommand+0x234>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <LCD_SendCommand+0x234>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_SendCommand+0x234>
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	01 c0       	rjmp	.+2      	; 0x53a <LCD_SendCommand+0x234>
     538:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     54e:	80 91 69 00 	lds	r24, 0x0069
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	09 f4       	brne	.+2      	; 0x558 <LCD_SendData+0x14>
     556:	85 c0       	rjmp	.+266    	; 0x662 <LCD_SendData+0x11e>
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	20 f4       	brcc	.+8      	; 0x564 <LCD_SendData+0x20>
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	09 f0       	breq	.+2      	; 0x562 <LCD_SendData+0x1e>
     560:	e8 c0       	rjmp	.+464    	; 0x732 <LCD_SendData+0x1ee>
     562:	5c c0       	rjmp	.+184    	; 0x61c <LCD_SendData+0xd8>
     564:	83 30       	cpi	r24, 0x03	; 3
     566:	09 f4       	brne	.+2      	; 0x56a <LCD_SendData+0x26>
     568:	c2 c0       	rjmp	.+388    	; 0x6ee <LCD_SendData+0x1aa>
     56a:	8f 3f       	cpi	r24, 0xFF	; 255
     56c:	09 f0       	breq	.+2      	; 0x570 <LCD_SendData+0x2c>
     56e:	e1 c0       	rjmp	.+450    	; 0x732 <LCD_SendData+0x1ee>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     570:	d0 91 6b 00 	lds	r29, 0x006B
     574:	8d 2f       	mov	r24, r29
     576:	60 91 6c 00 	lds	r22, 0x006C
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     580:	8d 2f       	mov	r24, r29
     582:	60 91 6d 00 	lds	r22, 0x006D
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     58c:	4c 2f       	mov	r20, r28
     58e:	44 1f       	adc	r20, r20
     590:	44 27       	eor	r20, r20
     592:	44 1f       	adc	r20, r20
     594:	8d 2f       	mov	r24, r29
     596:	60 91 6f 00 	lds	r22, 0x006F
     59a:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     59e:	0c 2f       	mov	r16, r28
     5a0:	10 e0       	ldi	r17, 0x00	; 0
     5a2:	a8 01       	movw	r20, r16
     5a4:	40 74       	andi	r20, 0x40	; 64
     5a6:	50 70       	andi	r21, 0x00	; 0
     5a8:	04 2e       	mov	r0, r20
     5aa:	45 2f       	mov	r20, r21
     5ac:	00 0c       	add	r0, r0
     5ae:	44 1f       	adc	r20, r20
     5b0:	55 0b       	sbc	r21, r21
     5b2:	00 0c       	add	r0, r0
     5b4:	44 1f       	adc	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	8d 2f       	mov	r24, r29
     5ba:	60 91 70 00 	lds	r22, 0x0070
     5be:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     5c2:	a8 01       	movw	r20, r16
     5c4:	40 72       	andi	r20, 0x20	; 32
     5c6:	50 70       	andi	r21, 0x00	; 0
     5c8:	55 95       	asr	r21
     5ca:	47 95       	ror	r20
     5cc:	55 95       	asr	r21
     5ce:	47 95       	ror	r20
     5d0:	55 95       	asr	r21
     5d2:	47 95       	ror	r20
     5d4:	55 95       	asr	r21
     5d6:	47 95       	ror	r20
     5d8:	55 95       	asr	r21
     5da:	47 95       	ror	r20
     5dc:	8d 2f       	mov	r24, r29
     5de:	60 91 71 00 	lds	r22, 0x0071
     5e2:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     5e6:	00 71       	andi	r16, 0x10	; 16
     5e8:	10 70       	andi	r17, 0x00	; 0
     5ea:	a8 01       	movw	r20, r16
     5ec:	55 95       	asr	r21
     5ee:	47 95       	ror	r20
     5f0:	55 95       	asr	r21
     5f2:	47 95       	ror	r20
     5f4:	55 95       	asr	r21
     5f6:	47 95       	ror	r20
     5f8:	55 95       	asr	r21
     5fa:	47 95       	ror	r20
     5fc:	8d 2f       	mov	r24, r29
     5fe:	60 91 72 00 	lds	r22, 0x0072
     602:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     606:	8d 2f       	mov	r24, r29
     608:	60 91 6e 00 	lds	r22, 0x006E
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 69 00 	sts	0x0069, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     618:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     61a:	90 c0       	rjmp	.+288    	; 0x73c <LCD_SendData+0x1f8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     61c:	c3 e8       	ldi	r28, 0x83	; 131
     61e:	d1 e0       	ldi	r29, 0x01	; 1
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	be 01       	movw	r22, r28
     624:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     628:	8b 3f       	cpi	r24, 0xFB	; 251
     62a:	09 f0       	breq	.+2      	; 0x62e <LCD_SendData+0xea>
     62c:	84 c0       	rjmp	.+264    	; 0x736 <LCD_SendData+0x1f2>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	9e 01       	movw	r18, r28
     63a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	be 01       	movw	r22, r28
     642:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     646:	88 23       	and	r24, r24
     648:	d1 f7       	brne	.-12     	; 0x63e <LCD_SendData+0xfa>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     64a:	80 91 6b 00 	lds	r24, 0x006B
     64e:	60 91 6e 00 	lds	r22, 0x006E
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	80 93 69 00 	sts	0x0069, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	6d c0       	rjmp	.+218    	; 0x73c <LCD_SendData+0x1f8>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     662:	d0 91 6b 00 	lds	r29, 0x006B
     666:	8d 2f       	mov	r24, r29
     668:	60 91 6c 00 	lds	r22, 0x006C
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     672:	8d 2f       	mov	r24, r29
     674:	60 91 6d 00 	lds	r22, 0x006D
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     67e:	0c 2f       	mov	r16, r28
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	a8 01       	movw	r20, r16
     684:	48 70       	andi	r20, 0x08	; 8
     686:	50 70       	andi	r21, 0x00	; 0
     688:	55 95       	asr	r21
     68a:	47 95       	ror	r20
     68c:	55 95       	asr	r21
     68e:	47 95       	ror	r20
     690:	55 95       	asr	r21
     692:	47 95       	ror	r20
     694:	8d 2f       	mov	r24, r29
     696:	60 91 6f 00 	lds	r22, 0x006F
     69a:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     69e:	a8 01       	movw	r20, r16
     6a0:	44 70       	andi	r20, 0x04	; 4
     6a2:	50 70       	andi	r21, 0x00	; 0
     6a4:	55 95       	asr	r21
     6a6:	47 95       	ror	r20
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	8d 2f       	mov	r24, r29
     6ae:	60 91 70 00 	lds	r22, 0x0070
     6b2:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     6b6:	02 70       	andi	r16, 0x02	; 2
     6b8:	10 70       	andi	r17, 0x00	; 0
     6ba:	a8 01       	movw	r20, r16
     6bc:	55 95       	asr	r21
     6be:	47 95       	ror	r20
     6c0:	8d 2f       	mov	r24, r29
     6c2:	60 91 71 00 	lds	r22, 0x0071
     6c6:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     6ca:	4c 2f       	mov	r20, r28
     6cc:	41 70       	andi	r20, 0x01	; 1
     6ce:	8d 2f       	mov	r24, r29
     6d0:	60 91 72 00 	lds	r22, 0x0072
     6d4:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     6d8:	8d 2f       	mov	r24, r29
     6da:	60 91 6e 00 	lds	r22, 0x006E
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 69 00 	sts	0x0069, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     6ea:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     6ec:	27 c0       	rjmp	.+78     	; 0x73c <LCD_SendData+0x1f8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     6ee:	c3 e8       	ldi	r28, 0x83	; 131
     6f0:	d1 e0       	ldi	r29, 0x01	; 1
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	be 01       	movw	r22, r28
     6f6:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     6fa:	8b 3f       	cpi	r24, 0xFB	; 251
     6fc:	f1 f4       	brne	.+60     	; 0x73a <LCD_SendData+0x1f6>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	9e 01       	movw	r18, r28
     70a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	be 01       	movw	r22, r28
     712:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
     716:	88 23       	and	r24, r24
     718:	d1 f7       	brne	.-12     	; 0x70e <LCD_SendData+0x1ca>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     71a:	80 91 6b 00 	lds	r24, 0x006B
     71e:	60 91 6e 00 	lds	r22, 0x006E
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	80 93 69 00 	sts	0x0069, r24
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	05 c0       	rjmp	.+10     	; 0x73c <LCD_SendData+0x1f8>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	03 c0       	rjmp	.+6      	; 0x73c <LCD_SendData+0x1f8>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	01 c0       	rjmp	.+2      	; 0x73c <LCD_SendData+0x1f8>
     73a:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     756:	80 91 6a 00 	lds	r24, 0x006A
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	09 f4       	brne	.+2      	; 0x760 <LCD_Init+0x1a>
     75e:	cb c0       	rjmp	.+406    	; 0x8f6 <__stack+0x97>
     760:	8c 30       	cpi	r24, 0x0C	; 12
     762:	98 f4       	brcc	.+38     	; 0x78a <LCD_Init+0x44>
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	09 f4       	brne	.+2      	; 0x76a <LCD_Init+0x24>
     768:	a5 c0       	rjmp	.+330    	; 0x8b4 <__stack+0x55>
     76a:	89 30       	cpi	r24, 0x09	; 9
     76c:	38 f4       	brcc	.+14     	; 0x77c <LCD_Init+0x36>
     76e:	85 30       	cpi	r24, 0x05	; 5
     770:	09 f4       	brne	.+2      	; 0x774 <LCD_Init+0x2e>
     772:	7b c0       	rjmp	.+246    	; 0x86a <__stack+0xb>
     774:	86 30       	cpi	r24, 0x06	; 6
     776:	09 f0       	breq	.+2      	; 0x77a <LCD_Init+0x34>
     778:	f0 c0       	rjmp	.+480    	; 0x95a <__stack+0xfb>
     77a:	91 c0       	rjmp	.+290    	; 0x89e <__stack+0x3f>
     77c:	89 30       	cpi	r24, 0x09	; 9
     77e:	09 f4       	brne	.+2      	; 0x782 <LCD_Init+0x3c>
     780:	a4 c0       	rjmp	.+328    	; 0x8ca <__stack+0x6b>
     782:	8a 30       	cpi	r24, 0x0A	; 10
     784:	09 f0       	breq	.+2      	; 0x788 <LCD_Init+0x42>
     786:	e9 c0       	rjmp	.+466    	; 0x95a <__stack+0xfb>
     788:	ab c0       	rjmp	.+342    	; 0x8e0 <__stack+0x81>
     78a:	8e 30       	cpi	r24, 0x0E	; 14
     78c:	09 f4       	brne	.+2      	; 0x790 <LCD_Init+0x4a>
     78e:	d1 c0       	rjmp	.+418    	; 0x932 <__stack+0xd3>
     790:	8f 30       	cpi	r24, 0x0F	; 15
     792:	38 f4       	brcc	.+14     	; 0x7a2 <LCD_Init+0x5c>
     794:	8c 30       	cpi	r24, 0x0C	; 12
     796:	09 f4       	brne	.+2      	; 0x79a <LCD_Init+0x54>
     798:	b8 c0       	rjmp	.+368    	; 0x90a <__stack+0xab>
     79a:	8d 30       	cpi	r24, 0x0D	; 13
     79c:	09 f0       	breq	.+2      	; 0x7a0 <LCD_Init+0x5a>
     79e:	dd c0       	rjmp	.+442    	; 0x95a <__stack+0xfb>
     7a0:	be c0       	rjmp	.+380    	; 0x91e <__stack+0xbf>
     7a2:	8f 30       	cpi	r24, 0x0F	; 15
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <LCD_Init+0x62>
     7a6:	cf c0       	rjmp	.+414    	; 0x946 <__stack+0xe7>
     7a8:	8f 3f       	cpi	r24, 0xFF	; 255
     7aa:	09 f0       	breq	.+2      	; 0x7ae <LCD_Init+0x68>
     7ac:	d6 c0       	rjmp	.+428    	; 0x95a <__stack+0xfb>
	case OperationStarted:
		/*Dio Initialize for the*/
		TIM_Init(TIMER_2);
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     7b4:	c0 91 6b 00 	lds	r28, 0x006B
     7b8:	e0 90 6f 00 	lds	r14, 0x006F
     7bc:	8c 2f       	mov	r24, r28
     7be:	6e 2d       	mov	r22, r14
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     7c6:	f0 90 70 00 	lds	r15, 0x0070
     7ca:	8c 2f       	mov	r24, r28
     7cc:	6f 2d       	mov	r22, r15
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     7d4:	00 91 71 00 	lds	r16, 0x0071
     7d8:	8c 2f       	mov	r24, r28
     7da:	60 2f       	mov	r22, r16
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     7e2:	10 91 72 00 	lds	r17, 0x0072
     7e6:	8c 2f       	mov	r24, r28
     7e8:	61 2f       	mov	r22, r17
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     7f0:	d0 91 6c 00 	lds	r29, 0x006C
     7f4:	8c 2f       	mov	r24, r28
     7f6:	6d 2f       	mov	r22, r29
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     7fe:	d0 90 6d 00 	lds	r13, 0x006D
     802:	8c 2f       	mov	r24, r28
     804:	6d 2d       	mov	r22, r13
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     80c:	c0 90 6e 00 	lds	r12, 0x006E
     810:	8c 2f       	mov	r24, r28
     812:	6c 2d       	mov	r22, r12
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     81a:	8c 2f       	mov	r24, r28
     81c:	6e 2d       	mov	r22, r14
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     824:	8c 2f       	mov	r24, r28
     826:	6f 2d       	mov	r22, r15
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     82e:	8c 2f       	mov	r24, r28
     830:	60 2f       	mov	r22, r16
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     838:	8c 2f       	mov	r24, r28
     83a:	61 2f       	mov	r22, r17
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     842:	8c 2f       	mov	r24, r28
     844:	6d 2f       	mov	r22, r29
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     84c:	8c 2f       	mov	r24, r28
     84e:	6d 2d       	mov	r22, r13
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     856:	8c 2f       	mov	r24, r28
     858:	6c 2d       	mov	r22, r12
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     866:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     868:	8d c0       	rjmp	.+282    	; 0x984 <__stack+0x125>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     86a:	c3 e8       	ldi	r28, 0x83	; 131
     86c:	d1 e0       	ldi	r29, 0x01	; 1
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	be 01       	movw	r22, r28
     872:	0e 94 2a 10 	call	0x2054	; 0x2054 <TIM_DelayStatus>
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     876:	8b 3f       	cpi	r24, 0xFB	; 251
     878:	51 f4       	brne	.+20     	; 0x88e <__stack+0x2f>
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	4f e0       	ldi	r20, 0x0F	; 15
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	9e 01       	movw	r18, r28
     886:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <TIM_DelayMs>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	7b c0       	rjmp	.+246    	; 0x984 <__stack+0x125>
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     88e:	88 23       	and	r24, r24
     890:	09 f0       	breq	.+2      	; 0x894 <__stack+0x35>
     892:	65 c0       	rjmp	.+202    	; 0x95e <__stack+0xff>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	73 c0       	rjmp	.+230    	; 0x984 <__stack+0x125>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     89e:	83 e0       	ldi	r24, 0x03	; 3
     8a0:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8a4:	88 23       	and	r24, r24
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	5c c0       	rjmp	.+184    	; 0x962 <__stack+0x103>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     8aa:	88 e0       	ldi	r24, 0x08	; 8
     8ac:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	68 c0       	rjmp	.+208    	; 0x984 <__stack+0x125>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8ba:	88 23       	and	r24, r24
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__stack+0x61>
     8be:	53 c0       	rjmp	.+166    	; 0x966 <__stack+0x107>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     8c0:	89 e0       	ldi	r24, 0x09	; 9
     8c2:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	5d c0       	rjmp	.+186    	; 0x984 <__stack+0x125>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8d0:	88 23       	and	r24, r24
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <__stack+0x77>
     8d4:	4a c0       	rjmp	.+148    	; 0x96a <__stack+0x10b>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	52 c0       	rjmp	.+164    	; 0x984 <__stack+0x125>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8e6:	88 23       	and	r24, r24
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x10f>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     8ec:	8b e0       	ldi	r24, 0x0B	; 11
     8ee:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	47 c0       	rjmp	.+142    	; 0x984 <__stack+0x125>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     8f6:	88 e2       	ldi	r24, 0x28	; 40
     8f8:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8fc:	88 23       	and	r24, r24
     8fe:	c9 f5       	brne	.+114    	; 0x972 <__stack+0x113>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     900:	8c e0       	ldi	r24, 0x0C	; 12
     902:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	3d c0       	rjmp	.+122    	; 0x984 <__stack+0x125>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     90a:	8c e0       	ldi	r24, 0x0C	; 12
     90c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     910:	88 23       	and	r24, r24
     912:	89 f5       	brne	.+98     	; 0x976 <__stack+0x117>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     914:	8d e0       	ldi	r24, 0x0D	; 13
     916:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	33 c0       	rjmp	.+102    	; 0x984 <__stack+0x125>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     924:	88 23       	and	r24, r24
     926:	49 f5       	brne	.+82     	; 0x97a <__stack+0x11b>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     928:	8e e0       	ldi	r24, 0x0E	; 14
     92a:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	29 c0       	rjmp	.+82     	; 0x984 <__stack+0x125>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     938:	88 23       	and	r24, r24
     93a:	09 f5       	brne	.+66     	; 0x97e <__stack+0x11f>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     93c:	8f e0       	ldi	r24, 0x0F	; 15
     93e:	80 93 6a 00 	sts	0x006A, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	1f c0       	rjmp	.+62     	; 0x984 <__stack+0x125>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     946:	80 e8       	ldi	r24, 0x80	; 128
     948:	0e 94 83 01 	call	0x306	; 0x306 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     94c:	88 23       	and	r24, r24
     94e:	c9 f4       	brne	.+50     	; 0x982 <__stack+0x123>
		{
			State = OperationStarted;
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	80 93 6a 00 	sts	0x006A, r24
			ErrRetVal = OperationSuccess;
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	15 c0       	rjmp	.+42     	; 0x984 <__stack+0x125>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	13 c0       	rjmp	.+38     	; 0x984 <__stack+0x125>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	11 c0       	rjmp	.+34     	; 0x984 <__stack+0x125>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	0f c0       	rjmp	.+30     	; 0x984 <__stack+0x125>
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	0d c0       	rjmp	.+26     	; 0x984 <__stack+0x125>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x125>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	09 c0       	rjmp	.+18     	; 0x984 <__stack+0x125>
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	07 c0       	rjmp	.+14     	; 0x984 <__stack+0x125>
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	05 c0       	rjmp	.+10     	; 0x984 <__stack+0x125>
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x125>
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	01 c0       	rjmp	.+2      	; 0x984 <__stack+0x125>
     982:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	08 95       	ret

00000996 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	b9 f0       	breq	.+46     	; 0x9c8 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     99a:	20 91 b7 00 	lds	r18, 0x00B7
     99e:	82 0f       	add	r24, r18
     9a0:	91 1d       	adc	r25, r1
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	88 23       	and	r24, r24
     9a8:	59 f0       	breq	.+22     	; 0x9c0 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     9aa:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     9ae:	88 23       	and	r24, r24
     9b0:	69 f4       	brne	.+26     	; 0x9cc <LCD_SendString+0x36>
			{
				Number++;
     9b2:	80 91 b7 00 	lds	r24, 0x00B7
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 b7 00 	sts	0x00B7, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     9c0:	10 92 b7 00 	sts	0x00B7, r1
			ErrRetVal = OperationSuccess;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     9ce:	08 95       	ret

000009d0 <LCD_SendNumber>:
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	2a 97       	sbiw	r28, 0x0a	; 10
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     9e4:	ae 01       	movw	r20, r28
     9e6:	4f 5f       	subi	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	0e 94 cb 08 	call	0x1196	; 0x1196 <STR_Number2String>
	while(FunRetVal != OperationSuccess)
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     9ee:	ce 01       	movw	r24, r28
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     9f6:	88 23       	and	r24, r24
     9f8:	d1 f7       	brne	.-12     	; 0x9ee <LCD_SendNumber+0x1e>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     9fa:	2a 96       	adiw	r28, 0x0a	; 10
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     a0c:	80 91 b8 00 	lds	r24, 0x00B8
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	21 f4       	brne	.+8      	; 0xa1c <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	80 93 b9 00 	sts	0x00B9, r24
     a1a:	28 c0       	rjmp	.+80     	; 0xa6c <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     a1c:	88 23       	and	r24, r24
     a1e:	31 f5       	brne	.+76     	; 0xa6c <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     a20:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     a24:	80 91 73 00 	lds	r24, 0x0073
     a28:	60 91 74 00 	lds	r22, 0x0074
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     a32:	80 91 75 00 	lds	r24, 0x0075
     a36:	60 91 76 00 	lds	r22, 0x0076
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     a40:	80 91 77 00 	lds	r24, 0x0077
     a44:	60 91 78 00 	lds	r22, 0x0078
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     a4e:	80 91 79 00 	lds	r24, 0x0079
     a52:	60 91 7a 00 	lds	r22, 0x007A
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 b8 00 	sts	0x00B8, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     a68:	10 92 b9 00 	sts	0x00B9, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     a6c:	80 91 b9 00 	lds	r24, 0x00B9
     a70:	08 95       	ret

00000a72 <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	c8 2f       	mov	r28, r24
     a78:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     a7a:	80 91 b8 00 	lds	r24, 0x00B8
     a7e:	88 23       	and	r24, r24
     a80:	21 f4       	brne	.+8      	; 0xa8a <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     a82:	8e ef       	ldi	r24, 0xFE	; 254
     a84:	80 93 b9 00 	sts	0x00B9, r24
     a88:	66 c0       	rjmp	.+204    	; 0xb56 <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f0       	breq	.+2      	; 0xa90 <MOTOR_start+0x1e>
     a8e:	63 c0       	rjmp	.+198    	; 0xb56 <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <PWM_Connect>
	switch (motor_no) {
     a9c:	cc 23       	and	r28, r28
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <MOTOR_start+0x36>
     aa0:	c1 30       	cpi	r28, 0x01	; 1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <MOTOR_start+0x34>
     aa4:	55 c0       	rjmp	.+170    	; 0xb50 <MOTOR_start+0xde>
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     aa8:	dd 23       	and	r29, r29
     aaa:	99 f0       	breq	.+38     	; 0xad2 <MOTOR_start+0x60>
     aac:	d1 30       	cpi	r29, 0x01	; 1
     aae:	11 f5       	brne	.+68     	; 0xaf4 <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     ab0:	80 91 73 00 	lds	r24, 0x0073
     ab4:	60 91 74 00 	lds	r22, 0x0074
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     abe:	80 91 75 00 	lds	r24, 0x0075
     ac2:	60 91 76 00 	lds	r22, 0x0076
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     acc:	10 92 b9 00 	sts	0x00B9, r1
			break;
     ad0:	42 c0       	rjmp	.+132    	; 0xb56 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     ad2:	80 91 73 00 	lds	r24, 0x0073
     ad6:	60 91 74 00 	lds	r22, 0x0074
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     ae0:	80 91 75 00 	lds	r24, 0x0075
     ae4:	60 91 76 00 	lds	r22, 0x0076
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     aee:	10 92 b9 00 	sts	0x00B9, r1

			break;
     af2:	31 c0       	rjmp	.+98     	; 0xb56 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     af4:	8d ef       	ldi	r24, 0xFD	; 253
     af6:	80 93 b9 00 	sts	0x00B9, r24
			break;
     afa:	2d c0       	rjmp	.+90     	; 0xb56 <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     afc:	dd 23       	and	r29, r29
     afe:	99 f0       	breq	.+38     	; 0xb26 <MOTOR_start+0xb4>
     b00:	d1 30       	cpi	r29, 0x01	; 1
     b02:	11 f5       	brne	.+68     	; 0xb48 <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     b04:	80 91 77 00 	lds	r24, 0x0077
     b08:	60 91 78 00 	lds	r22, 0x0078
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     b12:	80 91 79 00 	lds	r24, 0x0079
     b16:	60 91 7a 00 	lds	r22, 0x007A
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     b20:	10 92 b9 00 	sts	0x00B9, r1

			break;
     b24:	18 c0       	rjmp	.+48     	; 0xb56 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     b26:	80 91 77 00 	lds	r24, 0x0077
     b2a:	60 91 78 00 	lds	r22, 0x0078
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     b34:	80 91 79 00 	lds	r24, 0x0079
     b38:	60 91 7a 00 	lds	r22, 0x007A
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     b42:	10 92 b9 00 	sts	0x00B9, r1

			break;
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     b48:	8d ef       	ldi	r24, 0xFD	; 253
     b4a:	80 93 b9 00 	sts	0x00B9, r24
			break;
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     b50:	8c ef       	ldi	r24, 0xFC	; 252
     b52:	80 93 b9 00 	sts	0x00B9, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     b56:	80 91 b9 00 	lds	r24, 0x00B9
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     b60:	cf 93       	push	r28
     b62:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     b64:	80 91 b8 00 	lds	r24, 0x00B8
     b68:	88 23       	and	r24, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     b6c:	8e ef       	ldi	r24, 0xFE	; 254
     b6e:	80 93 b9 00 	sts	0x00B9, r24
     b72:	2f c0       	rjmp	.+94     	; 0xbd2 <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	69 f5       	brne	.+90     	; 0xbd2 <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <PWM_Disconnect>
       switch (motor_no){
     b7e:	cc 23       	and	r28, r28
     b80:	19 f0       	breq	.+6      	; 0xb88 <MOTOR_stop+0x28>
     b82:	c1 30       	cpi	r28, 0x01	; 1
     b84:	19 f5       	brne	.+70     	; 0xbcc <MOTOR_stop+0x6c>
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     b88:	80 91 73 00 	lds	r24, 0x0073
     b8c:	60 91 74 00 	lds	r22, 0x0074
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     b96:	80 91 75 00 	lds	r24, 0x0075
     b9a:	60 91 76 00 	lds	r22, 0x0076
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     ba4:	10 92 b9 00 	sts	0x00B9, r1
            break;
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     baa:	80 91 77 00 	lds	r24, 0x0077
     bae:	60 91 78 00 	lds	r22, 0x0078
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     bb8:	80 91 79 00 	lds	r24, 0x0079
     bbc:	60 91 7a 00 	lds	r22, 0x007A
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     bc6:	10 92 b9 00 	sts	0x00B9, r1
            break;
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     bcc:	8c ef       	ldi	r24, 0xFC	; 252
     bce:	80 93 b9 00 	sts	0x00B9, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     bd2:	80 91 b9 00 	lds	r24, 0x00B9
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     bda:	90 91 b8 00 	lds	r25, 0x00B8
     bde:	99 23       	and	r25, r25
     be0:	21 f4       	brne	.+8      	; 0xbea <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     be2:	8e ef       	ldi	r24, 0xFE	; 254
     be4:	80 93 b9 00 	sts	0x00B9, r24
     be8:	60 c0       	rjmp	.+192    	; 0xcaa <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     bea:	91 30       	cpi	r25, 0x01	; 1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <MOTOR_Update_dir+0x16>
     bee:	5d c0       	rjmp	.+186    	; 0xcaa <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     bf0:	88 23       	and	r24, r24
     bf2:	21 f0       	breq	.+8      	; 0xbfc <MOTOR_Update_dir+0x22>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <MOTOR_Update_dir+0x20>
     bf8:	55 c0       	rjmp	.+170    	; 0xca4 <MOTOR_Update_dir+0xca>
     bfa:	2a c0       	rjmp	.+84     	; 0xc50 <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     bfc:	66 23       	and	r22, r22
     bfe:	99 f0       	breq	.+38     	; 0xc26 <MOTOR_Update_dir+0x4c>
     c00:	61 30       	cpi	r22, 0x01	; 1
     c02:	11 f5       	brne	.+68     	; 0xc48 <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     c04:	80 91 73 00 	lds	r24, 0x0073
     c08:	60 91 74 00 	lds	r22, 0x0074
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     c12:	80 91 75 00 	lds	r24, 0x0075
     c16:	60 91 76 00 	lds	r22, 0x0076
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     c20:	10 92 b9 00 	sts	0x00B9, r1

                    break;
     c24:	42 c0       	rjmp	.+132    	; 0xcaa <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     c26:	80 91 73 00 	lds	r24, 0x0073
     c2a:	60 91 74 00 	lds	r22, 0x0074
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     c34:	80 91 75 00 	lds	r24, 0x0075
     c38:	60 91 76 00 	lds	r22, 0x0076
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     c42:	10 92 b9 00 	sts	0x00B9, r1

                    break;
     c46:	31 c0       	rjmp	.+98     	; 0xcaa <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     c48:	8d ef       	ldi	r24, 0xFD	; 253
     c4a:	80 93 b9 00 	sts	0x00B9, r24
                    break;
     c4e:	2d c0       	rjmp	.+90     	; 0xcaa <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
     c50:	66 23       	and	r22, r22
     c52:	99 f0       	breq	.+38     	; 0xc7a <MOTOR_Update_dir+0xa0>
     c54:	61 30       	cpi	r22, 0x01	; 1
     c56:	11 f5       	brne	.+68     	; 0xc9c <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     c58:	80 91 77 00 	lds	r24, 0x0077
     c5c:	60 91 78 00 	lds	r22, 0x0078
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     c66:	80 91 79 00 	lds	r24, 0x0079
     c6a:	60 91 7a 00 	lds	r22, 0x007A
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     c74:	10 92 b9 00 	sts	0x00B9, r1

                    break;
     c78:	18 c0       	rjmp	.+48     	; 0xcaa <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     c7a:	80 91 77 00 	lds	r24, 0x0077
     c7e:	60 91 78 00 	lds	r22, 0x0078
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     c88:	80 91 79 00 	lds	r24, 0x0079
     c8c:	60 91 7a 00 	lds	r22, 0x007A
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     c96:	10 92 b9 00 	sts	0x00B9, r1

                    break;
     c9a:	07 c0       	rjmp	.+14     	; 0xcaa <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     c9c:	8d ef       	ldi	r24, 0xFD	; 253
     c9e:	80 93 b9 00 	sts	0x00B9, r24
                    break;
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
     ca4:	8c ef       	ldi	r24, 0xFC	; 252
     ca6:	80 93 b9 00 	sts	0x00B9, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
     caa:	80 91 b9 00 	lds	r24, 0x00B9
     cae:	08 95       	ret

00000cb0 <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
     cb0:	80 91 be 00 	lds	r24, 0x00BE
     cb4:	90 91 bf 00 	lds	r25, 0x00BF
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 bf 00 	sts	0x00BF, r25
     cbe:	80 93 be 00 	sts	0x00BE, r24
     cc2:	08 95       	ret

00000cc4 <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
     cd8:	80 91 ca 00 	lds	r24, 0x00CA
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	21 f0       	breq	.+8      	; 0xce8 <USONIC_ICU1Callback+0x24>
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	09 f0       	breq	.+2      	; 0xce6 <USONIC_ICU1Callback+0x22>
     ce4:	77 c0       	rjmp	.+238    	; 0xdd4 <USONIC_ICU1Callback+0x110>
     ce6:	0c c0       	rjmp	.+24     	; 0xd00 <USONIC_ICU1Callback+0x3c>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
     ce8:	10 92 bf 00 	sts	0x00BF, r1
     cec:	10 92 be 00 	sts	0x00BE, r1
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	80 93 ca 00 	sts	0x00CA, r24
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 47 0b 	call	0x168e	; 0x168e <ICU_Reset>
				break;
     cfe:	6a c0       	rjmp	.+212    	; 0xdd4 <USONIC_ICU1Callback+0x110>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	68 ec       	ldi	r22, 0xC8	; 200
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	0e 94 21 0c 	call	0x1842	; 0x1842 <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
     d0a:	80 91 c8 00 	lds	r24, 0x00C8
     d0e:	90 91 c9 00 	lds	r25, 0x00C9
     d12:	20 91 be 00 	lds	r18, 0x00BE
     d16:	30 91 bf 00 	lds	r19, 0x00BF
     d1a:	82 1b       	sub	r24, r18
     d1c:	93 0b       	sbc	r25, r19
     d1e:	80 93 c0 00 	sts	0x00C0, r24
     d22:	90 93 c1 00 	sts	0x00C1, r25
     d26:	10 92 c2 00 	sts	0x00C2, r1
     d2a:	10 92 c3 00 	sts	0x00C3, r1
     d2e:	10 92 c4 00 	sts	0x00C4, r1
     d32:	10 92 c5 00 	sts	0x00C5, r1
     d36:	10 92 c6 00 	sts	0x00C6, r1
     d3a:	10 92 c7 00 	sts	0x00C7, r1
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
     d3e:	20 91 c0 00 	lds	r18, 0x00C0
     d42:	30 91 c1 00 	lds	r19, 0x00C1
     d46:	40 91 c2 00 	lds	r20, 0x00C2
     d4a:	50 91 c3 00 	lds	r21, 0x00C3
     d4e:	60 91 c4 00 	lds	r22, 0x00C4
     d52:	70 91 c5 00 	lds	r23, 0x00C5
     d56:	80 91 c6 00 	lds	r24, 0x00C6
     d5a:	90 91 c7 00 	lds	r25, 0x00C7
     d5e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__floatundisf>
     d62:	4b 01       	movw	r8, r22
     d64:	5c 01       	movw	r10, r24
     d66:	60 91 83 00 	lds	r22, 0x0083
     d6a:	70 91 84 00 	lds	r23, 0x0084
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 a6 13 	call	0x274c	; 0x274c <__floatunsisf>
     d76:	6b 01       	movw	r12, r22
     d78:	7c 01       	movw	r14, r24
     d7a:	60 91 7b 00 	lds	r22, 0x007B
     d7e:	70 91 7c 00 	lds	r23, 0x007C
     d82:	80 91 7d 00 	lds	r24, 0x007D
     d86:	90 91 7e 00 	lds	r25, 0x007E
     d8a:	0e 94 a6 13 	call	0x274c	; 0x274c <__floatunsisf>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	0e 94 12 13 	call	0x2624	; 0x2624 <__divsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	c5 01       	movw	r24, r10
     da0:	b4 01       	movw	r22, r8
     da2:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     da6:	46 2f       	mov	r20, r22
     da8:	57 2f       	mov	r21, r23
     daa:	68 2f       	mov	r22, r24
     dac:	79 2f       	mov	r23, r25
     dae:	40 93 ba 00 	sts	0x00BA, r20
     db2:	50 93 bb 00 	sts	0x00BB, r21
     db6:	60 93 bc 00 	sts	0x00BC, r22
     dba:	70 93 bd 00 	sts	0x00BD, r23
				gu8_ICU_State=END_STATE;
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	80 93 ca 00 	sts	0x00CA, r24
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	08 95       	ret

00000dea <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
     dea:	80 91 cb 00 	lds	r24, 0x00CB
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	21 f4       	brne	.+8      	; 0xdfa <USONIC_Init+0x10>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	80 93 cc 00 	sts	0x00CC, r24
     df8:	1f c0       	rjmp	.+62     	; 0xe38 <USONIC_Init+0x4e>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
     dfa:	88 23       	and	r24, r24
     dfc:	e9 f4       	brne	.+58     	; 0xe38 <USONIC_Init+0x4e>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
     dfe:	80 91 7f 00 	lds	r24, 0x007F
     e02:	60 91 80 00 	lds	r22, 0x0080
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 21 0b 	call	0x1642	; 0x1642 <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	42 e6       	ldi	r20, 0x62	; 98
     e18:	56 e0       	ldi	r21, 0x06	; 6
     e1a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	48 e5       	ldi	r20, 0x58	; 88
     e24:	56 e0       	ldi	r21, 0x06	; 6
     e26:	0e 94 66 0c 	call	0x18cc	; 0x18cc <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
     e2a:	0e 94 19 0b 	call	0x1632	; 0x1632 <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	80 93 cb 00 	sts	0x00CB, r24
		gu8_ERROR_STATE=ERROR_OK;
     e34:	10 92 cc 00 	sts	0x00CC, r1
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
     e38:	80 91 cc 00 	lds	r24, 0x00CC
     e3c:	08 95       	ret

00000e3e <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
     e44:	80 91 cb 00 	lds	r24, 0x00CB
     e48:	88 23       	and	r24, r24
     e4a:	21 f4       	brne	.+8      	; 0xe54 <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     e4c:	8e ef       	ldi	r24, 0xFE	; 254
     e4e:	80 93 cc 00 	sts	0x00CC, r24
     e52:	5b c0       	rjmp	.+182    	; 0xf0a <USONIC_GetDistance+0xcc>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <USONIC_GetDistance+0x1c>
     e58:	58 c0       	rjmp	.+176    	; 0xf0a <USONIC_GetDistance+0xcc>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
     e5a:	20 97       	sbiw	r28, 0x00	; 0
     e5c:	21 f4       	brne	.+8      	; 0xe66 <USONIC_GetDistance+0x28>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
     e5e:	8d ef       	ldi	r24, 0xFD	; 253
     e60:	80 93 cc 00 	sts	0x00CC, r24
     e64:	52 c0       	rjmp	.+164    	; 0xf0a <USONIC_GetDistance+0xcc>
		} 
		else 
		{
			switch(gu8_ICU_State)
     e66:	80 91 ca 00 	lds	r24, 0x00CA
     e6a:	88 23       	and	r24, r24
     e6c:	21 f0       	breq	.+8      	; 0xe76 <USONIC_GetDistance+0x38>
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	09 f0       	breq	.+2      	; 0xe74 <USONIC_GetDistance+0x36>
     e72:	4b c0       	rjmp	.+150    	; 0xf0a <USONIC_GetDistance+0xcc>
     e74:	2c c0       	rjmp	.+88     	; 0xece <USONIC_GetDistance+0x90>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 ca 00 	sts	0x00CA, r24
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
					gu16_OverflowCounter=COUNTER_RESET;
     e86:	10 92 bf 00 	sts	0x00BF, r1
     e8a:	10 92 be 00 	sts	0x00BE, r1
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	6e ef       	ldi	r22, 0xFE	; 254
     e92:	7f ef       	ldi	r23, 0xFF	; 255
     e94:	0e 94 35 0c 	call	0x186a	; 0x186a <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
     ea0:	80 91 be 00 	lds	r24, 0x00BE
     ea4:	90 91 bf 00 	lds	r25, 0x00BF
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	d1 f3       	breq	.-12     	; 0xea0 <USONIC_GetDistance+0x62>
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	0e 94 47 0b 	call	0x168e	; 0x168e <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 cc 00 	sts	0x00CC, r24
					break;
     ecc:	1e c0       	rjmp	.+60     	; 0xf0a <USONIC_GetDistance+0xcc>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
     ece:	60 91 ba 00 	lds	r22, 0x00BA
     ed2:	70 91 bb 00 	lds	r23, 0x00BB
     ed6:	80 91 bc 00 	lds	r24, 0x00BC
     eda:	90 91 bd 00 	lds	r25, 0x00BD
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3c ef       	ldi	r19, 0xFC	; 252
     ee2:	45 e0       	ldi	r20, 0x05	; 5
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	88 83       	st	Y, r24
     efc:	99 83       	std	Y+1, r25	; 0x01
     efe:	aa 83       	std	Y+2, r26	; 0x02
     f00:	bb 83       	std	Y+3, r27	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
     f02:	10 92 cc 00 	sts	0x00CC, r1
					gu8_ICU_State=START_STATE;
     f06:	10 92 ca 00 	sts	0x00CA, r1
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
     f0a:	80 91 cc 00 	lds	r24, 0x00CC
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <dummy_delay+0x6>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <dummy_delay+0x8>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
     f20:	1c 82       	std	Y+4, r1	; 0x04
     f22:	1b 82       	std	Y+3, r1	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	84 36       	cpi	r24, 0x64	; 100
     f2a:	91 05       	cpc	r25, r1
     f2c:	f0 f4       	brcc	.+60     	; 0xf6a <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
     f2e:	1a 82       	std	Y+2, r1	; 0x02
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	80 32       	cpi	r24, 0x20	; 32
     f34:	80 f4       	brcc	.+32     	; 0xf56 <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	30 f4       	brcc	.+12     	; 0xf4a <dummy_delay+0x36>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	d0 f3       	brcs	.-12     	; 0xf3e <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	80 32       	cpi	r24, 0x20	; 32
     f54:	80 f3       	brcs	.-32     	; 0xf36 <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	84 36       	cpi	r24, 0x64	; 100
     f66:	91 05       	cpc	r25, r1
     f68:	10 f3       	brcs	.-60     	; 0xf2e <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
     f78:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     f7a:	8c 91       	ld	r24, X
     f7c:	88 23       	and	r24, r24
     f7e:	01 f1       	breq	.+64     	; 0xfc0 <StringCompare+0x48>
     f80:	8d 30       	cpi	r24, 0x0D	; 13
     f82:	09 f1       	breq	.+66     	; 0xfc6 <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
     f84:	fb 01       	movw	r30, r22
     f86:	90 81       	ld	r25, Z
     f88:	89 17       	cp	r24, r25
     f8a:	49 f4       	brne	.+18     	; 0xf9e <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	0b c0       	rjmp	.+22     	; 0xfa6 <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
     f90:	86 0f       	add	r24, r22
     f92:	97 1f       	adc	r25, r23
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	28 17       	cp	r18, r24
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <StringCompare+0x2e>
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     f9e:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
     fa0:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <StringCompare+0x56>
      }
      u8_counter++;
     fa6:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     fa8:	83 2f       	mov	r24, r19
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	fd 01       	movw	r30, r26
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	20 81       	ld	r18, Z
     fb4:	22 23       	and	r18, r18
     fb6:	51 f0       	breq	.+20     	; 0xfcc <StringCompare+0x54>
     fb8:	2d 30       	cpi	r18, 0x0D	; 13
     fba:	51 f7       	brne	.-44     	; 0xf90 <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <StringCompare+0x56>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	01 c0       	rjmp	.+2      	; 0xfce <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
     fce:	63 0f       	add	r22, r19
     fd0:	71 1d       	adc	r23, r1
     fd2:	fb 01       	movw	r30, r22
     fd4:	90 81       	ld	r25, Z
     fd6:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
     fda:	08 95       	ret

00000fdc <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
     fdc:	fb 01       	movw	r30, r22
	*StringLength = 0;
     fde:	11 82       	std	Z+1, r1	; 0x01
     fe0:	10 82       	st	Z, r1
	while(*String!='\0')
     fe2:	dc 01       	movw	r26, r24
     fe4:	2c 91       	ld	r18, X
     fe6:	22 23       	and	r18, r18
     fe8:	49 f0       	breq	.+18     	; 0xffc <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
     fea:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
     ff6:	8d 91       	ld	r24, X+
     ff8:	88 23       	and	r24, r24
     ffa:	c1 f7       	brne	.-16     	; 0xfec <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
    1000:	80 53       	subi	r24, 0x30	; 48
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	20 f4       	brcc	.+8      	; 0x100e <STR_CharIsNumeric+0xe>
	{
		*Result=1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	fb 01       	movw	r30, r22
    100a:	80 83       	st	Z, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
    100e:	fb 01       	movw	r30, r22
    1010:	10 82       	st	Z, r1
	}
	return 0;
}
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	08 95       	ret

00001016 <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	fc 01       	movw	r30, r24
    102c:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
    102e:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
    1030:	80 81       	ld	r24, Z
    1032:	88 23       	and	r24, r24
    1034:	b9 f0       	breq	.+46     	; 0x1064 <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
    1036:	8f 01       	movw	r16, r30
    1038:	0f 5f       	subi	r16, 0xFF	; 255
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
    103c:	dd 24       	eor	r13, r13
    103e:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	0e 94 00 08 	call	0x1000	; 0x1000 <STR_CharIsNumeric>
		if(!FunRetVal)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	19 f4       	brne	.+6      	; 0x1056 <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
    1050:	f7 01       	movw	r30, r14
    1052:	10 82       	st	Z, r1
			break;
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
    1056:	f7 01       	movw	r30, r14
    1058:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    105a:	f8 01       	movw	r30, r16
    105c:	81 91       	ld	r24, Z+
    105e:	8f 01       	movw	r16, r30
    1060:	88 23       	and	r24, r24
    1062:	71 f7       	brne	.-36     	; 0x1040 <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	08 95       	ret

00001078 <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	fc 01       	movw	r30, r24
    1082:	ec 01       	movw	r28, r24
    1084:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
    1086:	db 01       	movw	r26, r22
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	8f 01       	movw	r16, r30
    108c:	0f 5f       	subi	r16, 0xFF	; 255
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    1094:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
    1096:	29 91       	ld	r18, Y+
    1098:	fc 01       	movw	r30, r24
    109a:	31 91       	ld	r19, Z+
    109c:	cf 01       	movw	r24, r30
    109e:	23 17       	cp	r18, r19
    10a0:	59 f4       	brne	.+22     	; 0x10b8 <STR_CompareString+0x40>
		{
			*Result = 1;
    10a2:	fa 01       	movw	r30, r20
    10a4:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
    10a6:	f8 01       	movw	r30, r16
    10a8:	21 91       	ld	r18, Z+
    10aa:	8f 01       	movw	r16, r30
    10ac:	22 23       	and	r18, r18
    10ae:	91 f7       	brne	.-28     	; 0x1094 <STR_CompareString+0x1c>
    10b0:	2c 91       	ld	r18, X
    10b2:	22 23       	and	r18, r18
    10b4:	79 f7       	brne	.-34     	; 0x1094 <STR_CompareString+0x1c>
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    10b8:	22 23       	and	r18, r18
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <STR_CompareString+0x50>
    10bc:	33 23       	and	r19, r19
    10be:	21 f4       	brne	.+8      	; 0x10c8 <STR_CompareString+0x50>
		{
			*Result = 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	fa 01       	movw	r30, r20
    10c4:	80 83       	st	Z, r24
			break;
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
    10c8:	fa 01       	movw	r30, r20
    10ca:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
    10e6:	fb 01       	movw	r30, r22
    10e8:	11 82       	std	Z+1, r1	; 0x01
    10ea:	10 82       	st	Z, r1
	while(*String!='\0')
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 81       	ld	r18, Z
    10f0:	22 23       	and	r18, r18
    10f2:	39 f0       	breq	.+14     	; 0x1102 <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
    10f8:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    10fa:	21 91       	ld	r18, Z+
    10fc:	22 23       	and	r18, r18
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <STR_String2Number+0x20>
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <STR_String2Number+0x2c>
    1102:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    1104:	7c 01       	movw	r14, r24
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
    110e:	8a 91       	ld	r24, -Y
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	c0 97       	sbiw	r24, 0x30	; 48
    1114:	84 9f       	mul	r24, r20
    1116:	90 01       	movw	r18, r0
    1118:	85 9f       	mul	r24, r21
    111a:	30 0d       	add	r19, r0
    111c:	94 9f       	mul	r25, r20
    111e:	30 0d       	add	r19, r0
    1120:	11 24       	eor	r1, r1
    1122:	f8 01       	movw	r30, r16
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
		Multiplier*=10;
    1130:	cb 01       	movw	r24, r22
    1132:	ba 01       	movw	r22, r20
    1134:	2a e0       	ldi	r18, 0x0A	; 10
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsi3>
    1140:	ab 01       	movw	r20, r22
    1142:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
    1144:	ce 15       	cp	r28, r14
    1146:	df 05       	cpc	r29, r15
    1148:	11 f7       	brne	.-60     	; 0x110e <STR_String2Number+0x36>
	return 0;
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	08 95       	ret

0000115a <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    115a:	fc 01       	movw	r30, r24
    115c:	20 81       	ld	r18, Z
    115e:	22 23       	and	r18, r18
    1160:	39 f0       	breq	.+14     	; 0x1170 <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    1162:	dc 01       	movw	r26, r24
    1164:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
    1166:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    1168:	2d 91       	ld	r18, X+
    116a:	22 23       	and	r18, r18
    116c:	e1 f7       	brne	.-8      	; 0x1166 <STR_StringReverse+0xc>
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
    1170:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
    1172:	9f 01       	movw	r18, r30
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
    1178:	82 17       	cp	r24, r18
    117a:	93 07       	cpc	r25, r19
    117c:	50 f4       	brcc	.+20     	; 0x1192 <STR_StringReverse+0x38>
    117e:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
    1180:	8c 91       	ld	r24, X
		*A=*B;
    1182:	92 91       	ld	r25, -Z
    1184:	9d 93       	st	X+, r25
		*B=Temp;
    1186:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    1188:	cf 01       	movw	r24, r30
    118a:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    118c:	a8 17       	cp	r26, r24
    118e:	b9 07       	cpc	r27, r25
    1190:	b8 f3       	brcs	.-18     	; 0x1180 <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	a1 05       	cpc	r26, r1
    11b0:	b1 05       	cpc	r27, r1
    11b2:	21 f4       	brne	.+8      	; 0x11bc <STR_Number2String+0x26>
	{
		*String='0';
    11b4:	80 e3       	ldi	r24, 0x30	; 48
    11b6:	fa 01       	movw	r30, r20
    11b8:	80 83       	st	Z, r24
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
    11bc:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    11be:	0f 2e       	mov	r0, r31
    11c0:	fa e0       	ldi	r31, 0x0A	; 10
    11c2:	cf 2e       	mov	r12, r31
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	df 2e       	mov	r13, r31
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	ef 2e       	mov	r14, r31
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	ff 2e       	mov	r15, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <STR_Number2String+0x40>
			String++;
    11d4:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	a7 01       	movw	r20, r14
    11dc:	96 01       	movw	r18, r12
    11de:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__udivmodsi4>
    11e2:	60 5d       	subi	r22, 0xD0	; 208
    11e4:	fe 01       	movw	r30, r28
    11e6:	61 93       	st	Z+, r22
			String++;
			Number/=10;
    11e8:	82 2f       	mov	r24, r18
    11ea:	93 2f       	mov	r25, r19
    11ec:	a4 2f       	mov	r26, r20
    11ee:	b5 2f       	mov	r27, r21
		}while(Number);
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	a1 05       	cpc	r26, r1
    11f4:	b1 05       	cpc	r27, r1
    11f6:	71 f7       	brne	.-36     	; 0x11d4 <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
    11f8:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
    11fa:	c8 01       	movw	r24, r16
    11fc:	0e 94 ad 08 	call	0x115a	; 0x115a <STR_StringReverse>
	return 0;
}
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <SteeringTask>:
	CRASH_MainFunction();
}

void SteeringTask(void)
{
	STEERING_MainFunction();
    1214:	0e 94 06 01 	call	0x20c	; 0x20c <STEERING_MainFunction>
}
    1218:	08 95       	ret

0000121a <CrashingTask>:
	SENSING_MainFunction();	
}

void CrashingTask(void)
{
	CRASH_MainFunction();
    121a:	0e 94 49 00 	call	0x92	; 0x92 <CRASH_MainFunction>
}
    121e:	08 95       	ret

00001220 <SensingTask>:
void CrashingTask(void);
void SteeringTask(void);

void SensingTask(void)
{
	SENSING_MainFunction();	
    1220:	0e 94 be 00 	call	0x17c	; 0x17c <SENSING_MainFunction>
}
    1224:	08 95       	ret

00001226 <main>:
	STEERING_MainFunction();
}

int main(void)
{
	OS_Init();
    1226:	0e 94 89 10 	call	0x2112	; 0x2112 <OS_Init>

	OS_CreateTask(SENSING_TASK_PRIORITY,SENSING_TASK_FIREST_DELAY,SENSING_TASK_PERIODICITY,SensingTask,&SensingTaskHandler);	
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	00 e1       	ldi	r16, 0x10	; 16
    1238:	19 e0       	ldi	r17, 0x09	; 9
    123a:	0f 2e       	mov	r0, r31
    123c:	fd e0       	ldi	r31, 0x0D	; 13
    123e:	ef 2e       	mov	r14, r31
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	ff 2e       	mov	r15, r31
    1244:	f0 2d       	mov	r31, r0
    1246:	0e 94 86 11 	call	0x230c	; 0x230c <OS_CreateTask>
	OS_CreateTask(CARSHING_TASK_PRIORITY,CARSHING_TASK_FIREST_DELAY,CARSHING_TASK_PERIODICITY,CrashingTask,&CrashingTaskHandler);	
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	22 e0       	ldi	r18, 0x02	; 2
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	0d e0       	ldi	r16, 0x0D	; 13
    1258:	19 e0       	ldi	r17, 0x09	; 9
    125a:	0f 2e       	mov	r0, r31
    125c:	f1 e1       	ldi	r31, 0x11	; 17
    125e:	ef 2e       	mov	r14, r31
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	ff 2e       	mov	r15, r31
    1264:	f0 2d       	mov	r31, r0
    1266:	0e 94 86 11 	call	0x230c	; 0x230c <OS_CreateTask>
	OS_CreateTask(STEERING_TASK_PRIORITY,STEERING_TASK_FIREST_DELAY,STEERING_TASK_PERIODICITY,SteeringTask,&SteeringTaskHandler);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	22 e0       	ldi	r18, 0x02	; 2
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0a e0       	ldi	r16, 0x0A	; 10
    1278:	19 e0       	ldi	r17, 0x09	; 9
    127a:	0f 2e       	mov	r0, r31
    127c:	ff e0       	ldi	r31, 0x0F	; 15
    127e:	ef 2e       	mov	r14, r31
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	ff 2e       	mov	r15, r31
    1284:	f0 2d       	mov	r31, r0
    1286:	0e 94 86 11 	call	0x230c	; 0x230c <OS_CreateTask>

	OS_Run();
    128a:	0e 94 c2 10 	call	0x2184	; 0x2184 <OS_Run>
    128e:	ff cf       	rjmp	.-2      	; 0x128e <main+0x68>

00001290 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    1290:	42 30       	cpi	r20, 0x02	; 2
    1292:	08 f0       	brcs	.+2      	; 0x1296 <DIO_SetPinDirection+0x6>
    1294:	69 c0       	rjmp	.+210    	; 0x1368 <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    1296:	68 30       	cpi	r22, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_SetPinDirection+0xc>
    129a:	68 c0       	rjmp	.+208    	; 0x136c <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	f9 f0       	breq	.+62     	; 0x12de <DIO_SetPinDirection+0x4e>
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	30 f0       	brcs	.+12     	; 0x12b0 <DIO_SetPinDirection+0x20>
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	91 f1       	breq	.+100    	; 0x130c <DIO_SetPinDirection+0x7c>
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	09 f0       	breq	.+2      	; 0x12ae <DIO_SetPinDirection+0x1e>
    12ac:	61 c0       	rjmp	.+194    	; 0x1370 <DIO_SetPinDirection+0xe0>
    12ae:	45 c0       	rjmp	.+138    	; 0x133a <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	06 2e       	mov	r0, r22
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_SetPinDirection+0x2c>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_SetPinDirection+0x28>
    12c0:	80 95       	com	r24
    12c2:	9a b3       	in	r25, 0x1a	; 26
    12c4:	89 23       	and	r24, r25
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	9a 01       	movw	r18, r20
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_SetPinDirection+0x40>
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	6a 95       	dec	r22
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_SetPinDirection+0x3c>
    12d4:	b9 01       	movw	r22, r18
    12d6:	68 2b       	or	r22, r24
    12d8:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
    12da:	80 e0       	ldi	r24, 0x00	; 0
				break;
    12dc:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	06 2e       	mov	r0, r22
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_SetPinDirection+0x5a>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_SetPinDirection+0x56>
    12ee:	80 95       	com	r24
    12f0:	97 b3       	in	r25, 0x17	; 23
    12f2:	89 23       	and	r24, r25
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	9a 01       	movw	r18, r20
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_SetPinDirection+0x6e>
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	6a 95       	dec	r22
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_SetPinDirection+0x6a>
    1302:	b9 01       	movw	r22, r18
    1304:	68 2b       	or	r22, r24
    1306:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
    1308:	80 e0       	ldi	r24, 0x00	; 0
				break;
    130a:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	06 2e       	mov	r0, r22
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_SetPinDirection+0x88>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_SetPinDirection+0x84>
    131c:	80 95       	com	r24
    131e:	94 b3       	in	r25, 0x14	; 20
    1320:	89 23       	and	r24, r25
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	9a 01       	movw	r18, r20
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_SetPinDirection+0x9c>
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	6a 95       	dec	r22
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_SetPinDirection+0x98>
    1330:	b9 01       	movw	r22, r18
    1332:	68 2b       	or	r22, r24
    1334:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
    1336:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1338:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	06 2e       	mov	r0, r22
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_SetPinDirection+0xb6>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_SetPinDirection+0xb2>
    134a:	80 95       	com	r24
    134c:	91 b3       	in	r25, 0x11	; 17
    134e:	89 23       	and	r24, r25
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	9a 01       	movw	r18, r20
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPinDirection+0xca>
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	6a 95       	dec	r22
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_SetPinDirection+0xc6>
    135e:	b9 01       	movw	r22, r18
    1360:	68 2b       	or	r22, r24
    1362:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
    1364:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1366:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1370:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    1372:	08 95       	ret

00001374 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    1374:	42 30       	cpi	r20, 0x02	; 2
    1376:	08 f0       	brcs	.+2      	; 0x137a <DIO_WritePin+0x6>
    1378:	69 c0       	rjmp	.+210    	; 0x144c <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    137a:	68 30       	cpi	r22, 0x08	; 8
    137c:	08 f0       	brcs	.+2      	; 0x1380 <DIO_WritePin+0xc>
    137e:	68 c0       	rjmp	.+208    	; 0x1450 <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	f9 f0       	breq	.+62     	; 0x13c2 <DIO_WritePin+0x4e>
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	30 f0       	brcs	.+12     	; 0x1394 <DIO_WritePin+0x20>
    1388:	82 30       	cpi	r24, 0x02	; 2
    138a:	91 f1       	breq	.+100    	; 0x13f0 <DIO_WritePin+0x7c>
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	09 f0       	breq	.+2      	; 0x1392 <DIO_WritePin+0x1e>
    1390:	61 c0       	rjmp	.+194    	; 0x1454 <DIO_WritePin+0xe0>
    1392:	45 c0       	rjmp	.+138    	; 0x141e <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	06 2e       	mov	r0, r22
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_WritePin+0x2c>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_WritePin+0x28>
    13a4:	80 95       	com	r24
    13a6:	9b b3       	in	r25, 0x1b	; 27
    13a8:	89 23       	and	r24, r25
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	9a 01       	movw	r18, r20
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_WritePin+0x40>
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	6a 95       	dec	r22
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_WritePin+0x3c>
    13b8:	b9 01       	movw	r22, r18
    13ba:	68 2b       	or	r22, r24
    13bc:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    13be:	80 e0       	ldi	r24, 0x00	; 0
				break;
    13c0:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	06 2e       	mov	r0, r22
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_WritePin+0x5a>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_WritePin+0x56>
    13d2:	80 95       	com	r24
    13d4:	98 b3       	in	r25, 0x18	; 24
    13d6:	89 23       	and	r24, r25
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	9a 01       	movw	r18, r20
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_WritePin+0x6e>
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	6a 95       	dec	r22
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_WritePin+0x6a>
    13e6:	b9 01       	movw	r22, r18
    13e8:	68 2b       	or	r22, r24
    13ea:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
				break;
    13ee:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	06 2e       	mov	r0, r22
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_WritePin+0x88>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_WritePin+0x84>
    1400:	80 95       	com	r24
    1402:	95 b3       	in	r25, 0x15	; 21
    1404:	89 23       	and	r24, r25
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	9a 01       	movw	r18, r20
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_WritePin+0x9c>
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	6a 95       	dec	r22
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_WritePin+0x98>
    1414:	b9 01       	movw	r22, r18
    1416:	68 2b       	or	r22, r24
    1418:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    141a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    141c:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	06 2e       	mov	r0, r22
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_WritePin+0xb6>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_WritePin+0xb2>
    142e:	80 95       	com	r24
    1430:	92 b3       	in	r25, 0x12	; 18
    1432:	89 23       	and	r24, r25
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	9a 01       	movw	r18, r20
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_WritePin+0xca>
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	6a 95       	dec	r22
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_WritePin+0xc6>
    1442:	b9 01       	movw	r22, r18
    1444:	68 2b       	or	r22, r24
    1446:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1448:	80 e0       	ldi	r24, 0x00	; 0
				break;
    144a:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    1456:	08 95       	ret

00001458 <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1458:	68 30       	cpi	r22, 0x08	; 8
    145a:	08 f0       	brcs	.+2      	; 0x145e <DIO_TogglePin+0x6>
    145c:	42 c0       	rjmp	.+132    	; 0x14e2 <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	b1 f0       	breq	.+44     	; 0x148e <DIO_TogglePin+0x36>
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	30 f0       	brcs	.+12     	; 0x1472 <DIO_TogglePin+0x1a>
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	01 f1       	breq	.+64     	; 0x14aa <DIO_TogglePin+0x52>
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	09 f0       	breq	.+2      	; 0x1470 <DIO_TogglePin+0x18>
    146e:	3b c0       	rjmp	.+118    	; 0x14e6 <DIO_TogglePin+0x8e>
    1470:	2a c0       	rjmp	.+84     	; 0x14c6 <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 01       	movw	r18, r24
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_TogglePin+0x26>
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	6a 95       	dec	r22
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_TogglePin+0x22>
    1482:	b9 01       	movw	r22, r18
    1484:	8b b3       	in	r24, 0x1b	; 27
    1486:	68 27       	eor	r22, r24
    1488:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    148a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    148c:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 01       	movw	r18, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_TogglePin+0x42>
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	6a 95       	dec	r22
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_TogglePin+0x3e>
    149e:	b9 01       	movw	r22, r18
    14a0:	88 b3       	in	r24, 0x18	; 24
    14a2:	68 27       	eor	r22, r24
    14a4:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
				break;
    14a8:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 01       	movw	r18, r24
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_TogglePin+0x5e>
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	6a 95       	dec	r22
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_TogglePin+0x5a>
    14ba:	b9 01       	movw	r22, r18
    14bc:	85 b3       	in	r24, 0x15	; 21
    14be:	68 27       	eor	r22, r24
    14c0:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    14c4:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9c 01       	movw	r18, r24
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_TogglePin+0x7a>
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	6a 95       	dec	r22
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_TogglePin+0x76>
    14d6:	b9 01       	movw	r22, r18
    14d8:	82 b3       	in	r24, 0x12	; 18
    14da:	68 27       	eor	r22, r24
    14dc:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    14de:	80 e0       	ldi	r24, 0x00	; 0
				break;
    14e0:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
    14e8:	08 95       	ret

000014ea <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    14ea:	68 30       	cpi	r22, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <DIO_ReadPin+0x6>
    14ee:	46 c0       	rjmp	.+140    	; 0x157c <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
    14f0:	41 15       	cp	r20, r1
    14f2:	51 05       	cpc	r21, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <DIO_ReadPin+0xe>
    14f6:	44 c0       	rjmp	.+136    	; 0x1580 <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	b1 f0       	breq	.+44     	; 0x1528 <DIO_ReadPin+0x3e>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	30 f0       	brcs	.+12     	; 0x150c <DIO_ReadPin+0x22>
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	01 f1       	breq	.+64     	; 0x1544 <DIO_ReadPin+0x5a>
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	09 f0       	breq	.+2      	; 0x150a <DIO_ReadPin+0x20>
    1508:	3d c0       	rjmp	.+122    	; 0x1584 <DIO_ReadPin+0x9a>
    150a:	2a c0       	rjmp	.+84     	; 0x1560 <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
    150c:	89 b3       	in	r24, 0x19	; 25
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9c 01       	movw	r18, r24
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_ReadPin+0x2e>
    1514:	35 95       	asr	r19
    1516:	27 95       	ror	r18
    1518:	6a 95       	dec	r22
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_ReadPin+0x2a>
    151c:	b9 01       	movw	r22, r18
    151e:	61 70       	andi	r22, 0x01	; 1
    1520:	fa 01       	movw	r30, r20
    1522:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1524:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1526:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
    1528:	86 b3       	in	r24, 0x16	; 22
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 01       	movw	r18, r24
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_ReadPin+0x4a>
    1530:	35 95       	asr	r19
    1532:	27 95       	ror	r18
    1534:	6a 95       	dec	r22
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_ReadPin+0x46>
    1538:	b9 01       	movw	r22, r18
    153a:	61 70       	andi	r22, 0x01	; 1
    153c:	fa 01       	movw	r30, r20
    153e:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1540:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1542:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
    1544:	83 b3       	in	r24, 0x13	; 19
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 01       	movw	r18, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_ReadPin+0x66>
    154c:	35 95       	asr	r19
    154e:	27 95       	ror	r18
    1550:	6a 95       	dec	r22
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_ReadPin+0x62>
    1554:	b9 01       	movw	r22, r18
    1556:	61 70       	andi	r22, 0x01	; 1
    1558:	fa 01       	movw	r30, r20
    155a:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    155c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    155e:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
    1560:	80 b3       	in	r24, 0x10	; 16
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9c 01       	movw	r18, r24
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_ReadPin+0x82>
    1568:	35 95       	asr	r19
    156a:	27 95       	ror	r18
    156c:	6a 95       	dec	r22
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_ReadPin+0x7e>
    1570:	b9 01       	movw	r22, r18
    1572:	61 70       	andi	r22, 0x01	; 1
    1574:	fa 01       	movw	r30, r20
    1576:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1578:	80 e0       	ldi	r24, 0x00	; 0
				break;
    157a:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1584:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    1586:	08 95       	ret

00001588 <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1588:	68 30       	cpi	r22, 0x08	; 8
    158a:	08 f0       	brcs	.+2      	; 0x158e <DIO_EnablePinPullup+0x6>
    158c:	4e c0       	rjmp	.+156    	; 0x162a <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	c9 f0       	breq	.+50     	; 0x15c4 <DIO_EnablePinPullup+0x3c>
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	30 f0       	brcs	.+12     	; 0x15a2 <DIO_EnablePinPullup+0x1a>
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	31 f1       	breq	.+76     	; 0x15e6 <DIO_EnablePinPullup+0x5e>
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	09 f0       	breq	.+2      	; 0x15a0 <DIO_EnablePinPullup+0x18>
    159e:	47 c0       	rjmp	.+142    	; 0x162e <DIO_EnablePinPullup+0xa6>
    15a0:	33 c0       	rjmp	.+102    	; 0x1608 <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 01       	movw	r18, r24
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_EnablePinPullup+0x26>
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	6a 95       	dec	r22
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_EnablePinPullup+0x22>
    15b2:	b9 01       	movw	r22, r18
    15b4:	92 2f       	mov	r25, r18
    15b6:	90 95       	com	r25
    15b8:	8b b3       	in	r24, 0x1b	; 27
    15ba:	89 23       	and	r24, r25
    15bc:	68 2b       	or	r22, r24
    15be:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    15c2:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9c 01       	movw	r18, r24
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_EnablePinPullup+0x48>
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	6a 95       	dec	r22
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_EnablePinPullup+0x44>
    15d4:	b9 01       	movw	r22, r18
    15d6:	92 2f       	mov	r25, r18
    15d8:	90 95       	com	r25
    15da:	88 b3       	in	r24, 0x18	; 24
    15dc:	89 23       	and	r24, r25
    15de:	68 2b       	or	r22, r24
    15e0:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    15e4:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 01       	movw	r18, r24
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_EnablePinPullup+0x6a>
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	6a 95       	dec	r22
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_EnablePinPullup+0x66>
    15f6:	b9 01       	movw	r22, r18
    15f8:	92 2f       	mov	r25, r18
    15fa:	90 95       	com	r25
    15fc:	85 b3       	in	r24, 0x15	; 21
    15fe:	89 23       	and	r24, r25
    1600:	68 2b       	or	r22, r24
    1602:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1604:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    1606:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 01       	movw	r18, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_EnablePinPullup+0x8c>
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	6a 95       	dec	r22
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_EnablePinPullup+0x88>
    1618:	b9 01       	movw	r22, r18
    161a:	92 2f       	mov	r25, r18
    161c:	90 95       	com	r25
    161e:	82 b3       	in	r24, 0x12	; 18
    1620:	89 23       	and	r24, r25
    1622:	68 2b       	or	r22, r24
    1624:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1626:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1628:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    162e:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    1630:	08 95       	ret

00001632 <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
    1632:	8f b7       	in	r24, 0x3f	; 63
    1634:	80 68       	ori	r24, 0x80	; 128
    1636:	8f bf       	out	0x3f, r24	; 63
}
    1638:	08 95       	ret

0000163a <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   CLEAR_BIT(SREG, I);
    163a:	8f b7       	in	r24, 0x3f	; 63
    163c:	8f 77       	andi	r24, 0x7F	; 127
    163e:	8f bf       	out	0x3f, r24	; 63
    1640:	08 95       	ret

00001642 <ICU_Init>:

//APIs Implementation
ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1642:	88 23       	and	r24, r24
    1644:	11 f5       	brne	.+68     	; 0x168a <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	66 e0       	ldi	r22, 0x06	; 6
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    1650:	80 91 81 00 	lds	r24, 0x0081
    1654:	28 2f       	mov	r18, r24
    1656:	23 70       	andi	r18, 0x03	; 3
    1658:	9f b5       	in	r25, 0x2f	; 47
    165a:	9c 7f       	andi	r25, 0xFC	; 252
    165c:	92 2b       	or	r25, r18
    165e:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    1660:	86 95       	lsr	r24
    1662:	86 95       	lsr	r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	83 70       	andi	r24, 0x03	; 3
    1668:	90 70       	andi	r25, 0x00	; 0
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	9e b5       	in	r25, 0x2e	; 46
    1678:	97 7e       	andi	r25, 0xE7	; 231
    167a:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    167c:	88 7f       	andi	r24, 0xF8	; 248
    167e:	90 91 82 00 	lds	r25, 0x0082
    1682:	89 2b       	or	r24, r25
    1684:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    1686:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1688:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    168a:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    168c:	08 95       	ret

0000168e <ICU_Reset>:

ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    168e:	62 30       	cpi	r22, 0x02	; 2
    1690:	70 f4       	brcc	.+28     	; 0x16ae <ICU_Reset+0x20>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1692:	88 23       	and	r24, r24
    1694:	71 f4       	brne	.+28     	; 0x16b2 <ICU_Reset+0x24>
		{
			#if  ICU1
			case ICU_1:
			REG_WRITE(TCNT1,CLEAR_REGISTER);
    1696:	1d bc       	out	0x2d, r1	; 45
    1698:	1c bc       	out	0x2c, r1	; 44
			BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    169a:	62 95       	swap	r22
    169c:	66 0f       	add	r22, r22
    169e:	66 0f       	add	r22, r22
    16a0:	60 7c       	andi	r22, 0xC0	; 192
    16a2:	8e b5       	in	r24, 0x2e	; 46
    16a4:	8f 7b       	andi	r24, 0xBF	; 191
    16a6:	68 2b       	or	r22, r24
    16a8:	6e bd       	out	0x2e, r22	; 46
			//BIT_WRITE(TIFR,TOV1,BIT_HIGH);
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
    16ac:	08 95       	ret
ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
			break;
			#endif
			default:
			u8_ErrorState = ERROR_NOK;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return u8_ErrorState;
}
    16b4:	08 95       	ret

000016b6 <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    16b6:	8f 92       	push	r8
    16b8:	9f 92       	push	r9
    16ba:	af 92       	push	r10
    16bc:	bf 92       	push	r11
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	8b 01       	movw	r16, r22
    16cc:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    16ce:	61 15       	cp	r22, r1
    16d0:	71 05       	cpc	r23, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <ICU_UpdateTimeOn+0x20>
    16d4:	9c c0       	rjmp	.+312    	; 0x180e <ICU_UpdateTimeOn+0x158>
    16d6:	41 15       	cp	r20, r1
    16d8:	51 05       	cpc	r21, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <ICU_UpdateTimeOn+0x28>
    16dc:	9a c0       	rjmp	.+308    	; 0x1812 <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    16de:	88 23       	and	r24, r24
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <ICU_UpdateTimeOn+0x2e>
    16e2:	99 c0       	rjmp	.+306    	; 0x1816 <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    16e4:	fb 01       	movw	r30, r22
    16e6:	80 81       	ld	r24, Z
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 f0       	breq	.+36     	; 0x1710 <ICU_UpdateTimeOn+0x5a>
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <ICU_UpdateTimeOn+0x42>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <ICU_UpdateTimeOn+0x40>
    16f4:	92 c0       	rjmp	.+292    	; 0x181a <ICU_UpdateTimeOn+0x164>
    16f6:	26 c0       	rjmp	.+76     	; 0x1744 <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	0e 94 47 0b 	call	0x168e	; 0x168e <ICU_Reset>
    1700:	88 23       	and	r24, r24
    1702:	09 f0       	breq	.+2      	; 0x1706 <ICU_UpdateTimeOn+0x50>
    1704:	8c c0       	rjmp	.+280    	; 0x181e <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	f8 01       	movw	r30, r16
    170a:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	8e c0       	rjmp	.+284    	; 0x182c <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1710:	88 b7       	in	r24, 0x38	; 56
    1712:	82 95       	swap	r24
    1714:	86 95       	lsr	r24
    1716:	87 70       	andi	r24, 0x07	; 7
    1718:	80 ff       	sbrs	r24, 0
    171a:	83 c0       	rjmp	.+262    	; 0x1822 <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	0e 94 47 0b 	call	0x168e	; 0x168e <ICU_Reset>
    1724:	88 23       	and	r24, r24
    1726:	09 f0       	breq	.+2      	; 0x172a <ICU_UpdateTimeOn+0x74>
    1728:	7e c0       	rjmp	.+252    	; 0x1826 <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    172a:	10 92 cd 00 	sts	0x00CD, r1
    172e:	10 92 ce 00 	sts	0x00CE, r1
    1732:	10 92 cf 00 	sts	0x00CF, r1
    1736:	10 92 d0 00 	sts	0x00D0, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	f8 01       	movw	r30, r16
    173e:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	74 c0       	rjmp	.+232    	; 0x182c <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1744:	88 b7       	in	r24, 0x38	; 56
    1746:	86 95       	lsr	r24
    1748:	86 95       	lsr	r24
    174a:	80 ff       	sbrs	r24, 0
    174c:	16 c0       	rjmp	.+44     	; 0x177a <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    174e:	80 91 cd 00 	lds	r24, 0x00CD
    1752:	90 91 ce 00 	lds	r25, 0x00CE
    1756:	a0 91 cf 00 	lds	r26, 0x00CF
    175a:	b0 91 d0 00 	lds	r27, 0x00D0
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	a1 1d       	adc	r26, r1
    1762:	b1 1d       	adc	r27, r1
    1764:	80 93 cd 00 	sts	0x00CD, r24
    1768:	90 93 ce 00 	sts	0x00CE, r25
    176c:	a0 93 cf 00 	sts	0x00CF, r26
    1770:	b0 93 d0 00 	sts	0x00D0, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1774:	88 b7       	in	r24, 0x38	; 56
    1776:	84 60       	ori	r24, 0x04	; 4
    1778:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    177a:	88 b7       	in	r24, 0x38	; 56
    177c:	82 95       	swap	r24
    177e:	86 95       	lsr	r24
    1780:	87 70       	andi	r24, 0x07	; 7
    1782:	80 ff       	sbrs	r24, 0
    1784:	52 c0       	rjmp	.+164    	; 0x182a <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1786:	60 91 cd 00 	lds	r22, 0x00CD
    178a:	70 91 ce 00 	lds	r23, 0x00CE
    178e:	80 91 cf 00 	lds	r24, 0x00CF
    1792:	90 91 d0 00 	lds	r25, 0x00D0
    1796:	2f ef       	ldi	r18, 0xFF	; 255
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsi3>
    17a2:	ab 01       	movw	r20, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	86 b5       	in	r24, 0x26	; 38
    17a8:	97 b5       	in	r25, 0x27	; 39
    17aa:	a0 e0       	ldi	r26, 0x00	; 0
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	84 0f       	add	r24, r20
    17b0:	95 1f       	adc	r25, r21
    17b2:	a6 1f       	adc	r26, r22
    17b4:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double64_t)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    17b6:	28 2f       	mov	r18, r24
    17b8:	39 2f       	mov	r19, r25
    17ba:	4a 2f       	mov	r20, r26
    17bc:	5b 2f       	mov	r21, r27
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__floatundisf>
    17ca:	4b 01       	movw	r8, r22
    17cc:	5c 01       	movw	r10, r24
    17ce:	60 91 83 00 	lds	r22, 0x0083
    17d2:	70 91 84 00 	lds	r23, 0x0084
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 a6 13 	call	0x274c	; 0x274c <__floatunsisf>
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	34 e2       	ldi	r19, 0x24	; 36
    17e2:	44 e7       	ldi	r20, 0x74	; 116
    17e4:	5b e4       	ldi	r21, 0x4B	; 75
    17e6:	0e 94 12 13 	call	0x2624	; 0x2624 <__divsf3>
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	c5 01       	movw	r24, r10
    17f0:	b4 01       	movw	r22, r8
    17f2:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f7 01       	movw	r30, r14
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	f8 01       	movw	r30, r16
    1808:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0f c0       	rjmp	.+30     	; 0x182c <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	0d c0       	rjmp	.+26     	; 0x182c <ICU_UpdateTimeOn+0x176>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0b c0       	rjmp	.+22     	; 0x182c <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	09 c0       	rjmp	.+18     	; 0x182c <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	07 c0       	rjmp	.+14     	; 0x182c <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	05 c0       	rjmp	.+10     	; 0x182c <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	03 c0       	rjmp	.+6      	; 0x182c <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	01 c0       	rjmp	.+2      	; 0x182c <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    182a:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	08 95       	ret

00001842 <ICU_GetICR1Registert>:

ERROR_STATE_t ICU_GetICR1Registert(uint8_t ICUNumber,ptr_uint16_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1842:	88 23       	and	r24, r24
    1844:	39 f4       	brne	.+14     	; 0x1854 <ICU_GetICR1Registert+0x12>
	{
		#if  ICU1
			case ICU_1:
				*Register=ICR1;
    1846:	86 b5       	in	r24, 0x26	; 38
    1848:	97 b5       	in	r25, 0x27	; 39
    184a:	fb 01       	movw	r30, r22
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1850:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1852:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1856:	08 95       	ret

00001858 <ICU_GetTIFRRegistert>:

ERROR_STATE_t ICU_GetTIFRRegistert(uint8_t ICUNumber,ptr_uint8_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1858:	88 23       	and	r24, r24
    185a:	29 f4       	brne	.+10     	; 0x1866 <ICU_GetTIFRRegistert+0xe>
	{
		#if  ICU1
			case ICU_1:
				*Register=TIFR;
    185c:	88 b7       	in	r24, 0x38	; 56
    185e:	fb 01       	movw	r30, r22
    1860:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1862:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1864:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1866:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1868:	08 95       	ret

0000186a <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    186a:	88 23       	and	r24, r24
    186c:	19 f4       	brne	.+6      	; 0x1874 <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
    186e:	7d bd       	out	0x2d, r23	; 45
    1870:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
    1872:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1874:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
    1876:	08 95       	ret

00001878 <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1878:	88 23       	and	r24, r24
    187a:	79 f4       	brne	.+30     	; 0x189a <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    187c:	66 23       	and	r22, r22
    187e:	19 f0       	breq	.+6      	; 0x1886 <ICU_EnableInterrupt+0xe>
    1880:	61 30       	cpi	r22, 0x01	; 1
    1882:	69 f4       	brne	.+26     	; 0x189e <ICU_EnableInterrupt+0x26>
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <ICU_EnableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
    1886:	89 b7       	in	r24, 0x39	; 57
    1888:	84 60       	ori	r24, 0x04	; 4
    188a:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    188c:	80 e0       	ldi	r24, 0x00	; 0
						break;
    188e:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
    1890:	89 b7       	in	r24, 0x39	; 57
    1892:	80 62       	ori	r24, 0x20	; 32
    1894:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1896:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1898:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    18a0:	08 95       	ret

000018a2 <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    18a2:	88 23       	and	r24, r24
    18a4:	79 f4       	brne	.+30     	; 0x18c4 <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    18a6:	66 23       	and	r22, r22
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <ICU_DisableInterrupt+0xe>
    18aa:	61 30       	cpi	r22, 0x01	; 1
    18ac:	69 f4       	brne	.+26     	; 0x18c8 <ICU_DisableInterrupt+0x26>
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <ICU_DisableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
    18b0:	89 b7       	in	r24, 0x39	; 57
    18b2:	8b 7f       	andi	r24, 0xFB	; 251
    18b4:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    18b6:	80 e0       	ldi	r24, 0x00	; 0
						break;
    18b8:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
    18ba:	89 b7       	in	r24, 0x39	; 57
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
						break;
    18c2:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    18ca:	08 95       	ret

000018cc <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
    18cc:	41 15       	cp	r20, r1
    18ce:	51 05       	cpc	r21, r1
    18d0:	99 f0       	breq	.+38     	; 0x18f8 <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    18d2:	88 23       	and	r24, r24
    18d4:	99 f4       	brne	.+38     	; 0x18fc <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
    18d6:	66 23       	and	r22, r22
    18d8:	19 f0       	breq	.+6      	; 0x18e0 <ICU_SetCallback+0x14>
    18da:	61 30       	cpi	r22, 0x01	; 1
    18dc:	89 f4       	brne	.+34     	; 0x1900 <ICU_SetCallback+0x34>
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <ICU_SetCallback+0x20>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
    18e0:	50 93 d2 00 	sts	0x00D2, r21
    18e4:	40 93 d1 00 	sts	0x00D1, r20
							u8_ErrorState=ERROR_OK;
    18e8:	80 e0       	ldi	r24, 0x00	; 0
							break;
    18ea:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
    18ec:	50 93 d4 00 	sts	0x00D4, r21
    18f0:	40 93 d3 00 	sts	0x00D3, r20
							u8_ErrorState=ERROR_OK;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
							break;
    18f6:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1900:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
    1902:	08 95       	ret

00001904 <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	2f 93       	push	r18
    1910:	3f 93       	push	r19
    1912:	4f 93       	push	r20
    1914:	5f 93       	push	r21
    1916:	6f 93       	push	r22
    1918:	7f 93       	push	r23
    191a:	8f 93       	push	r24
    191c:	9f 93       	push	r25
    191e:	af 93       	push	r26
    1920:	bf 93       	push	r27
    1922:	ef 93       	push	r30
    1924:	ff 93       	push	r31
   gptr_CallbackOverflow();
    1926:	e0 91 d1 00 	lds	r30, 0x00D1
    192a:	f0 91 d2 00 	lds	r31, 0x00D2
    192e:	09 95       	icall
}
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
   gptr_CallbackInputCapture();
    1974:	e0 91 d3 00 	lds	r30, 0x00D3
    1978:	f0 91 d4 00 	lds	r31, 0x00D4
    197c:	09 95       	icall
}
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	7f 91       	pop	r23
    198c:	6f 91       	pop	r22
    198e:	5f 91       	pop	r21
    1990:	4f 91       	pop	r20
    1992:	3f 91       	pop	r19
    1994:	2f 91       	pop	r18
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	0f 90       	pop	r0
    199c:	1f 90       	pop	r1
    199e:	18 95       	reti

000019a0 <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    19a0:	88 23       	and	r24, r24
    19a2:	69 f5       	brne	.+90     	; 0x19fe <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    19a4:	20 91 86 00 	lds	r18, 0x0086
    19a8:	42 2f       	mov	r20, r18
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	41 70       	andi	r20, 0x01	; 1
    19ae:	50 70       	andi	r21, 0x00	; 0
    19b0:	00 24       	eor	r0, r0
    19b2:	56 95       	lsr	r21
    19b4:	47 95       	ror	r20
    19b6:	07 94       	ror	r0
    19b8:	56 95       	lsr	r21
    19ba:	47 95       	ror	r20
    19bc:	07 94       	ror	r0
    19be:	54 2f       	mov	r21, r20
    19c0:	40 2d       	mov	r20, r0
    19c2:	83 b7       	in	r24, 0x33	; 51
    19c4:	8f 7b       	andi	r24, 0xBF	; 191
    19c6:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    19c8:	47 7f       	andi	r20, 0xF7	; 247
    19ca:	26 95       	lsr	r18
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	21 70       	andi	r18, 0x01	; 1
    19d0:	30 70       	andi	r19, 0x00	; 0
    19d2:	c9 01       	movw	r24, r18
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    19e2:	8f 7c       	andi	r24, 0xCF	; 207
    19e4:	90 91 87 00 	lds	r25, 0x0087
    19e8:	92 95       	swap	r25
    19ea:	90 7f       	andi	r25, 0xF0	; 240
    19ec:	89 2b       	or	r24, r25
    19ee:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	63 e0       	ldi	r22, 0x03	; 3
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
				break;
    19fc:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1a00:	08 95       	ret

00001a02 <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1a02:	88 23       	and	r24, r24
    1a04:	41 f4       	brne	.+16     	; 0x1a16 <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1a06:	83 b7       	in	r24, 0x33	; 51
    1a08:	88 7f       	andi	r24, 0xF8	; 248
    1a0a:	90 91 85 00 	lds	r25, 0x0085
    1a0e:	89 2b       	or	r24, r25
    1a10:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1a12:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1a14:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1a18:	08 95       	ret

00001a1a <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1a1a:	88 23       	and	r24, r24
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    1a1e:	83 b7       	in	r24, 0x33	; 51
    1a20:	88 7f       	andi	r24, 0xF8	; 248
    1a22:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1a24:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1a26:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1a28:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1a2a:	08 95       	ret

00001a2c <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1a2c:	88 23       	and	r24, r24
    1a2e:	51 f4       	brne	.+20     	; 0x1a44 <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1a30:	90 91 87 00 	lds	r25, 0x0087
    1a34:	92 95       	swap	r25
    1a36:	90 7f       	andi	r25, 0xF0	; 240
    1a38:	83 b7       	in	r24, 0x33	; 51
    1a3a:	8f 7c       	andi	r24, 0xCF	; 207
    1a3c:	89 2b       	or	r24, r25
    1a3e:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1a40:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1a42:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    1a46:	08 95       	ret

00001a48 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1a48:	88 23       	and	r24, r24
    1a4a:	29 f4       	brne	.+10     	; 0x1a56 <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    1a4c:	83 b7       	in	r24, 0x33	; 51
    1a4e:	8f 7c       	andi	r24, 0xCF	; 207
    1a50:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1a54:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1a58:	08 95       	ret

00001a5a <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    1a5a:	96 2f       	mov	r25, r22
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	94 36       	cpi	r25, 0x64	; 100
    1a60:	10 f5       	brcc	.+68     	; 0x1aa6 <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    1a62:	88 23       	and	r24, r24
    1a64:	11 f5       	brne	.+68     	; 0x1aaa <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    1a66:	80 91 87 00 	lds	r24, 0x0087
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	01 f5       	brne	.+64     	; 0x1aae <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 a8 13 	call	0x2750	; 0x2750 <__floatsisf>
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	48 ec       	ldi	r20, 0xC8	; 200
    1a7e:	52 e4       	ldi	r21, 0x42	; 66
    1a80:	0e 94 12 13 	call	0x2624	; 0x2624 <__divsf3>
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 a9 12 	call	0x2552	; 0x2552 <__subsf3>
    1a9c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fixunssfsi>
    1aa0:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1aa4:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    1ab0:	08 95       	ret

00001ab2 <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <GetFreqPrescaleRatio+0x6>
    1ab6:	51 c0       	rjmp	.+162    	; 0x1b5a <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	fc 01       	movw	r30, r24
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	8e 0f       	add	r24, r30
    1ac2:	9f 1f       	adc	r25, r31
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ef 56       	subi	r30, 0x6F	; 111
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	21 f1       	breq	.+72     	; 0x1b18 <GetFreqPrescaleRatio+0x66>
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	30 f4       	brcc	.+12     	; 0x1ae0 <GetFreqPrescaleRatio+0x2e>
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	51 f0       	breq	.+20     	; 0x1aec <GetFreqPrescaleRatio+0x3a>
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	09 f0       	breq	.+2      	; 0x1ade <GetFreqPrescaleRatio+0x2c>
    1adc:	a4 c0       	rjmp	.+328    	; 0x1c26 <GetFreqPrescaleRatio+0x174>
    1ade:	11 c0       	rjmp	.+34     	; 0x1b02 <GetFreqPrescaleRatio+0x50>
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	29 f1       	breq	.+74     	; 0x1b2e <GetFreqPrescaleRatio+0x7c>
    1ae4:	85 30       	cpi	r24, 0x05	; 5
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <GetFreqPrescaleRatio+0x38>
    1ae8:	9e c0       	rjmp	.+316    	; 0x1c26 <GetFreqPrescaleRatio+0x174>
    1aea:	2c c0       	rjmp	.+88     	; 0x1b44 <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e8       	ldi	r26, 0x80	; 128
    1af2:	bd e3       	ldi	r27, 0x3D	; 61
    1af4:	fb 01       	movw	r30, r22
    1af6:	80 83       	st	Z, r24
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	a2 83       	std	Z+2, r26	; 0x02
    1afc:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1b00:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	bf e3       	ldi	r27, 0x3F	; 63
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	80 83       	st	Z, r24
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	a2 83       	std	Z+2, r26	; 0x02
    1b12:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1b14:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1b16:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e8       	ldi	r26, 0x80	; 128
    1b1e:	b0 e4       	ldi	r27, 0x40	; 64
    1b20:	fb 01       	movw	r30, r22
    1b22:	80 83       	st	Z, r24
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	a2 83       	std	Z+2, r26	; 0x02
    1b28:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1b2c:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e8       	ldi	r26, 0x80	; 128
    1b34:	b1 e4       	ldi	r27, 0x41	; 65
    1b36:	fb 01       	movw	r30, r22
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1b40:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1b42:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	b2 e4       	ldi	r27, 0x42	; 66
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1b58:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <GetFreqPrescaleRatio+0xae>
    1b5e:	65 c0       	rjmp	.+202    	; 0x1c2a <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1b60:	80 91 99 00 	lds	r24, 0x0099
    1b64:	84 30       	cpi	r24, 0x04	; 4
    1b66:	99 f1       	breq	.+102    	; 0x1bce <GetFreqPrescaleRatio+0x11c>
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	40 f4       	brcc	.+16     	; 0x1b7c <GetFreqPrescaleRatio+0xca>
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	c9 f0       	breq	.+50     	; 0x1ba2 <GetFreqPrescaleRatio+0xf0>
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	10 f5       	brcc	.+68     	; 0x1bb8 <GetFreqPrescaleRatio+0x106>
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <GetFreqPrescaleRatio+0xc8>
    1b78:	5a c0       	rjmp	.+180    	; 0x1c2e <GetFreqPrescaleRatio+0x17c>
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <GetFreqPrescaleRatio+0xda>
    1b7c:	86 30       	cpi	r24, 0x06	; 6
    1b7e:	e9 f1       	breq	.+122    	; 0x1bfa <GetFreqPrescaleRatio+0x148>
    1b80:	86 30       	cpi	r24, 0x06	; 6
    1b82:	80 f1       	brcs	.+96     	; 0x1be4 <GetFreqPrescaleRatio+0x132>
    1b84:	87 30       	cpi	r24, 0x07	; 7
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <GetFreqPrescaleRatio+0xd8>
    1b88:	52 c0       	rjmp	.+164    	; 0x1c2e <GetFreqPrescaleRatio+0x17c>
    1b8a:	42 c0       	rjmp	.+132    	; 0x1c10 <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bd e3       	ldi	r27, 0x3D	; 61
    1b94:	fb 01       	movw	r30, r22
    1b96:	80 83       	st	Z, r24
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	a2 83       	std	Z+2, r26	; 0x02
    1b9c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1ba0:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	bf e3       	ldi	r27, 0x3F	; 63
    1baa:	fb 01       	movw	r30, r22
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1bb6:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e4       	ldi	r27, 0x40	; 64
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	80 83       	st	Z, r24
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	a2 83       	std	Z+2, r26	; 0x02
    1bc8:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1bca:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1bcc:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	b0 e4       	ldi	r27, 0x40	; 64
    1bd6:	fb 01       	movw	r30, r22
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1be2:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a0 e0       	ldi	r26, 0x00	; 0
    1bea:	b1 e4       	ldi	r27, 0x41	; 65
    1bec:	fb 01       	movw	r30, r22
    1bee:	80 83       	st	Z, r24
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	a2 83       	std	Z+2, r26	; 0x02
    1bf4:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1bf8:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a0 e8       	ldi	r26, 0x80	; 128
    1c00:	b1 e4       	ldi	r27, 0x41	; 65
    1c02:	fb 01       	movw	r30, r22
    1c04:	80 83       	st	Z, r24
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	a2 83       	std	Z+2, r26	; 0x02
    1c0a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1c0e:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	b2 e4       	ldi	r27, 0x42	; 66
    1c18:	fb 01       	movw	r30, r22
    1c1a:	80 83       	st	Z, r24
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	a2 83       	std	Z+2, r26	; 0x02
    1c20:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1c22:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1c24:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1c26:	8c ef       	ldi	r24, 0xFC	; 252
    1c28:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1c2e:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    1c30:	08 95       	ret

00001c32 <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <TIM_Init+0x24>
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	18 f0       	brcs	.+6      	; 0x1c40 <TIM_Init+0xe>
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	49 f5       	brne	.+82     	; 0x1c90 <TIM_Init+0x5e>
    1c3e:	19 c0       	rjmp	.+50     	; 0x1c72 <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    1c40:	80 91 91 00 	lds	r24, 0x0091
    1c44:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    1c46:	89 b7       	in	r24, 0x39	; 57
    1c48:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    1c4a:	90 91 92 00 	lds	r25, 0x0092
    1c4e:	89 2b       	or	r24, r25
    1c50:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1c52:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    1c54:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    1c56:	80 91 94 00 	lds	r24, 0x0094
    1c5a:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    1c5c:	99 b7       	in	r25, 0x39	; 57
    1c5e:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    1c60:	80 91 95 00 	lds	r24, 0x0095
    1c64:	88 0f       	add	r24, r24
    1c66:	88 0f       	add	r24, r24
    1c68:	88 0f       	add	r24, r24
    1c6a:	89 2b       	or	r24, r25
    1c6c:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    1c70:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    1c72:	80 91 97 00 	lds	r24, 0x0097
    1c76:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    1c78:	99 b7       	in	r25, 0x39	; 57
    1c7a:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    1c7c:	80 91 98 00 	lds	r24, 0x0098
    1c80:	82 95       	swap	r24
    1c82:	88 0f       	add	r24, r24
    1c84:	88 0f       	add	r24, r24
    1c86:	80 7c       	andi	r24, 0xC0	; 192
    1c88:	89 2b       	or	r24, r25
    1c8a:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    1c8e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    1c90:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1c92:	08 95       	ret

00001c94 <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	79 f0       	breq	.+30     	; 0x1cb6 <TIM_Start+0x22>
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	18 f0       	brcs	.+6      	; 0x1ca2 <TIM_Start+0xe>
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	09 f5       	brne	.+66     	; 0x1ce2 <TIM_Start+0x4e>
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    1ca2:	a2 e5       	ldi	r26, 0x52	; 82
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1ca6:	e3 e5       	ldi	r30, 0x53	; 83
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	09 c0       	rjmp	.+18     	; 0x1cbe <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    1cac:	a4 e4       	ldi	r26, 0x44	; 68
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1cb0:	e5 e4       	ldi	r30, 0x45	; 69
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    1cb6:	ac e4       	ldi	r26, 0x4C	; 76
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    1cbe:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    1cc0:	20 81       	ld	r18, Z
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	aa 0f       	add	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	8a 0f       	add	r24, r26
    1ccc:	9b 1f       	adc	r25, r27
    1cce:	dc 01       	movw	r26, r24
    1cd0:	af 56       	subi	r26, 0x6F	; 111
    1cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	8c 91       	ld	r24, X
    1cd8:	12 97       	sbiw	r26, 0x02	; 2
    1cda:	82 2b       	or	r24, r18
    1cdc:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1ce2:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    1ce4:	08 95       	ret

00001ce6 <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	59 f0       	breq	.+22     	; 0x1d00 <TIM_Stop+0x1a>
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	18 f0       	brcs	.+6      	; 0x1cf4 <TIM_Stop+0xe>
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	71 f4       	brne	.+28     	; 0x1d0e <TIM_Stop+0x28>
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1cf4:	e3 e5       	ldi	r30, 0x53	; 83
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1cfa:	e5 e4       	ldi	r30, 0x45	; 69
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    1d00:	ee e4       	ldi	r30, 0x4E	; 78
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    1d04:	80 81       	ld	r24, Z
    1d06:	88 7f       	andi	r24, 0xF8	; 248
    1d08:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1d0e:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    1d10:	08 95       	ret

00001d12 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1d12:	61 15       	cp	r22, r1
    1d14:	71 05       	cpc	r23, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <TIM_GetStatus+0x8>
    1d18:	64 c0       	rjmp	.+200    	; 0x1de2 <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	11 f1       	breq	.+68     	; 0x1d62 <TIM_GetStatus+0x50>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	20 f0       	brcs	.+8      	; 0x1d2a <TIM_GetStatus+0x18>
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <TIM_GetStatus+0x16>
    1d26:	5f c0       	rjmp	.+190    	; 0x1de6 <TIM_GetStatus+0xd4>
    1d28:	41 c0       	rjmp	.+130    	; 0x1dac <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1d2a:	80 91 91 00 	lds	r24, 0x0091
    1d2e:	88 23       	and	r24, r24
    1d30:	51 f4       	brne	.+20     	; 0x1d46 <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    1d32:	08 b6       	in	r0, 0x38	; 56
    1d34:	00 fe       	sbrs	r0, 0
    1d36:	59 c0       	rjmp	.+178    	; 0x1dea <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1d38:	fb 01       	movw	r30, r22
    1d3a:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    1d3c:	88 b7       	in	r24, 0x38	; 56
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1d46:	88 30       	cpi	r24, 0x08	; 8
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <TIM_GetStatus+0x3a>
    1d4a:	51 c0       	rjmp	.+162    	; 0x1dee <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    1d4c:	08 b6       	in	r0, 0x38	; 56
    1d4e:	01 fe       	sbrs	r0, 1
    1d50:	50 c0       	rjmp	.+160    	; 0x1df2 <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	fb 01       	movw	r30, r22
    1d56:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    1d58:	88 b7       	in	r24, 0x38	; 56
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1d62:	80 91 94 00 	lds	r24, 0x0094
    1d66:	88 23       	and	r24, r24
    1d68:	51 f4       	brne	.+20     	; 0x1d7e <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    1d6a:	08 b6       	in	r0, 0x38	; 56
    1d6c:	02 fe       	sbrs	r0, 2
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1d70:	fb 01       	movw	r30, r22
    1d72:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    1d74:	88 b7       	in	r24, 0x38	; 56
    1d76:	84 60       	ori	r24, 0x04	; 4
    1d78:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1d7e:	88 30       	cpi	r24, 0x08	; 8
    1d80:	e1 f5       	brne	.+120    	; 0x1dfa <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    1d82:	88 b7       	in	r24, 0x38	; 56
    1d84:	84 ff       	sbrs	r24, 4
    1d86:	08 c0       	rjmp	.+16     	; 0x1d98 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    1d8e:	88 b7       	in	r24, 0x38	; 56
    1d90:	80 61       	ori	r24, 0x10	; 16
    1d92:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    1d98:	83 ff       	sbrs	r24, 3
    1d9a:	31 c0       	rjmp	.+98     	; 0x1dfe <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	fb 01       	movw	r30, r22
    1da0:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1da2:	88 b7       	in	r24, 0x38	; 56
    1da4:	88 60       	ori	r24, 0x08	; 8
    1da6:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1dac:	80 91 97 00 	lds	r24, 0x0097
    1db0:	88 23       	and	r24, r24
    1db2:	51 f4       	brne	.+20     	; 0x1dc8 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1db4:	08 b6       	in	r0, 0x38	; 56
    1db6:	06 fe       	sbrs	r0, 6
    1db8:	24 c0       	rjmp	.+72     	; 0x1e02 <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1dba:	fb 01       	movw	r30, r22
    1dbc:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    1dbe:	88 b7       	in	r24, 0x38	; 56
    1dc0:	80 64       	ori	r24, 0x40	; 64
    1dc2:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1dc8:	88 30       	cpi	r24, 0x08	; 8
    1dca:	e9 f4       	brne	.+58     	; 0x1e06 <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1dcc:	08 b6       	in	r0, 0x38	; 56
    1dce:	07 fe       	sbrs	r0, 7
    1dd0:	1c c0       	rjmp	.+56     	; 0x1e0a <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	fb 01       	movw	r30, r22
    1dd6:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1dd8:	88 b7       	in	r24, 0x38	; 56
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1de6:	8e ef       	ldi	r24, 0xFE	; 254
    1de8:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1dea:	8d ef       	ldi	r24, 0xFD	; 253
    1dec:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1df2:	8d ef       	ldi	r24, 0xFD	; 253
    1df4:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1df6:	8d ef       	ldi	r24, 0xFD	; 253
    1df8:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1dfe:	8d ef       	ldi	r24, 0xFD	; 253
    1e00:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1e02:	8d ef       	ldi	r24, 0xFD	; 253
    1e04:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1e0a:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1e0c:	08 95       	ret

00001e0e <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1e0e:	8f 92       	push	r8
    1e10:	9f 92       	push	r9
    1e12:	af 92       	push	r10
    1e14:	bf 92       	push	r11
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <TIM_DelayUs+0x18>
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <TIM_DelayUs+0x1a>
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	18 2f       	mov	r17, r24
    1e2e:	6a 01       	movw	r12, r20
    1e30:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <TIM_DelayUs+0x2a>
    1e36:	5c c0       	rjmp	.+184    	; 0x1ef0 <TIM_DelayUs+0xe2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1e38:	21 15       	cp	r18, r1
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <TIM_DelayUs+0x32>
    1e3e:	5a c0       	rjmp	.+180    	; 0x1ef4 <TIM_DelayUs+0xe6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1e40:	30 93 d6 00 	sts	0x00D6, r19
    1e44:	20 93 d5 00 	sts	0x00D5, r18
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1e48:	80 91 d7 00 	lds	r24, 0x00D7
    1e4c:	88 23       	and	r24, r24
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <TIM_DelayUs+0x44>
    1e50:	53 c0       	rjmp	.+166    	; 0x1ef8 <TIM_DelayUs+0xea>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1e52:	81 2f       	mov	r24, r17
    1e54:	be 01       	movw	r22, r28
    1e56:	6f 5f       	subi	r22, 0xFF	; 255
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1e5e:	8c 3f       	cpi	r24, 0xFC	; 252
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <TIM_DelayUs+0x56>
    1e62:	4c c0       	rjmp	.+152    	; 0x1efc <TIM_DelayUs+0xee>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1e64:	89 80       	ldd	r8, Y+1	; 0x01
    1e66:	9a 80       	ldd	r9, Y+2	; 0x02
    1e68:	ab 80       	ldd	r10, Y+3	; 0x03
    1e6a:	bc 80       	ldd	r11, Y+4	; 0x04
    1e6c:	c5 01       	movw	r24, r10
    1e6e:	b4 01       	movw	r22, r8
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	a9 01       	movw	r20, r18
    1e76:	0e 94 0e 13 	call	0x261c	; 0x261c <__cmpsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	a1 f0       	breq	.+40     	; 0x1ea6 <TIM_DelayUs+0x98>
      {
         TIM_Delay /= f32_FreqRatio;
    1e7e:	c7 01       	movw	r24, r14
    1e80:	b6 01       	movw	r22, r12
    1e82:	0e 94 a6 13 	call	0x274c	; 0x274c <__floatunsisf>
    1e86:	a5 01       	movw	r20, r10
    1e88:	94 01       	movw	r18, r8
    1e8a:	0e 94 12 13 	call	0x2624	; 0x2624 <__divsf3>
    1e8e:	46 2f       	mov	r20, r22
    1e90:	57 2f       	mov	r21, r23
    1e92:	68 2f       	mov	r22, r24
    1e94:	79 2f       	mov	r23, r25
    1e96:	cb 01       	movw	r24, r22
    1e98:	ba 01       	movw	r22, r20
    1e9a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fixunssfsi>
    1e9e:	c6 2e       	mov	r12, r22
    1ea0:	d7 2e       	mov	r13, r23
    1ea2:	e8 2e       	mov	r14, r24
    1ea4:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    1ea6:	bb 27       	eor	r27, r27
    1ea8:	af 2d       	mov	r26, r15
    1eaa:	9e 2d       	mov	r25, r14
    1eac:	8d 2d       	mov	r24, r13
    1eae:	80 93 d8 00 	sts	0x00D8, r24
    1eb2:	90 93 d9 00 	sts	0x00D9, r25
    1eb6:	a0 93 da 00 	sts	0x00DA, r26
    1eba:	b0 93 db 00 	sts	0x00DB, r27
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    1ebe:	6c 2d       	mov	r22, r12
    1ec0:	c0 92 dc 00 	sts	0x00DC, r12
      
      if(gu32_Overflows == 0)
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	a1 05       	cpc	r26, r1
    1ec8:	b1 05       	cpc	r27, r1
    1eca:	41 f4       	brne	.+16     	; 0x1edc <TIM_DelayUs+0xce>
      {
         gu8_OverflowsComplete = HIGH;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	80 93 dd 00 	sts	0x00DD, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    1ed2:	81 2f       	mov	r24, r17
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <TIM_DelayUs+0xd8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1edc:	81 2f       	mov	r24, r17
    1ede:	6f ef       	ldi	r22, 0xFF	; 255
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	80 93 d7 00 	sts	0x00D7, r24
      return TIMER_E_PENDING;
    1eec:	8d ef       	ldi	r24, 0xFD	; 253
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <TIM_DelayUs+0xf0>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1ef0:	8e ef       	ldi	r24, 0xFE	; 254
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <TIM_DelayUs+0xf0>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <TIM_DelayUs+0xf0>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <TIM_DelayUs+0xf0>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1efc:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	bf 90       	pop	r11
    1f16:	af 90       	pop	r10
    1f18:	9f 90       	pop	r9
    1f1a:	8f 90       	pop	r8
    1f1c:	08 95       	ret

00001f1e <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    1f1e:	8f 92       	push	r8
    1f20:	9f 92       	push	r9
    1f22:	af 92       	push	r10
    1f24:	bf 92       	push	r11
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <TIM_DelayMs+0x18>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <TIM_DelayMs+0x1a>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	18 2f       	mov	r17, r24
    1f3e:	04 2f       	mov	r16, r20
    1f40:	f5 2e       	mov	r15, r21
    1f42:	e6 2e       	mov	r14, r22
    1f44:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <TIM_DelayMs+0x2e>
    1f4a:	6d c0       	rjmp	.+218    	; 0x2026 <TIM_DelayMs+0x108>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1f4c:	21 15       	cp	r18, r1
    1f4e:	31 05       	cpc	r19, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <TIM_DelayMs+0x36>
    1f52:	6b c0       	rjmp	.+214    	; 0x202a <TIM_DelayMs+0x10c>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1f54:	30 93 d6 00 	sts	0x00D6, r19
    1f58:	20 93 d5 00 	sts	0x00D5, r18
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1f5c:	80 91 d7 00 	lds	r24, 0x00D7
    1f60:	88 23       	and	r24, r24
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <TIM_DelayMs+0x48>
    1f64:	64 c0       	rjmp	.+200    	; 0x202e <TIM_DelayMs+0x110>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1f66:	81 2f       	mov	r24, r17
    1f68:	be 01       	movw	r22, r28
    1f6a:	6f 5f       	subi	r22, 0xFF	; 255
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1f72:	8c 3f       	cpi	r24, 0xFC	; 252
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <TIM_DelayMs+0x5a>
    1f76:	5d c0       	rjmp	.+186    	; 0x2032 <TIM_DelayMs+0x114>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1f78:	89 80       	ldd	r8, Y+1	; 0x01
    1f7a:	9a 80       	ldd	r9, Y+2	; 0x02
    1f7c:	ab 80       	ldd	r10, Y+3	; 0x03
    1f7e:	bc 80       	ldd	r11, Y+4	; 0x04
    1f80:	c5 01       	movw	r24, r10
    1f82:	b4 01       	movw	r22, r8
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	a9 01       	movw	r20, r18
    1f8a:	0e 94 0e 13 	call	0x261c	; 0x261c <__cmpsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	b1 f0       	breq	.+44     	; 0x1fbe <TIM_DelayMs+0xa0>
      {
         TIM_Delay /= f32_FreqRatio;
    1f92:	60 2f       	mov	r22, r16
    1f94:	7f 2d       	mov	r23, r15
    1f96:	8e 2d       	mov	r24, r14
    1f98:	9d 2d       	mov	r25, r13
    1f9a:	0e 94 a6 13 	call	0x274c	; 0x274c <__floatunsisf>
    1f9e:	a5 01       	movw	r20, r10
    1fa0:	94 01       	movw	r18, r8
    1fa2:	0e 94 12 13 	call	0x2624	; 0x2624 <__divsf3>
    1fa6:	46 2f       	mov	r20, r22
    1fa8:	57 2f       	mov	r21, r23
    1faa:	68 2f       	mov	r22, r24
    1fac:	79 2f       	mov	r23, r25
    1fae:	cb 01       	movw	r24, r22
    1fb0:	ba 01       	movw	r22, r20
    1fb2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fixunssfsi>
    1fb6:	06 2f       	mov	r16, r22
    1fb8:	f7 2e       	mov	r15, r23
    1fba:	e8 2e       	mov	r14, r24
    1fbc:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    1fbe:	60 2f       	mov	r22, r16
    1fc0:	7f 2d       	mov	r23, r15
    1fc2:	8e 2d       	mov	r24, r14
    1fc4:	9d 2d       	mov	r25, r13
    1fc6:	28 ee       	ldi	r18, 0xE8	; 232
    1fc8:	33 e0       	ldi	r19, 0x03	; 3
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsi3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	89 2f       	mov	r24, r25
    1fd8:	9a 2f       	mov	r25, r26
    1fda:	ab 2f       	mov	r26, r27
    1fdc:	bb 27       	eor	r27, r27
    1fde:	80 93 d8 00 	sts	0x00D8, r24
    1fe2:	90 93 d9 00 	sts	0x00D9, r25
    1fe6:	a0 93 da 00 	sts	0x00DA, r26
    1fea:	b0 93 db 00 	sts	0x00DB, r27
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    1fee:	68 ee       	ldi	r22, 0xE8	; 232
    1ff0:	06 9f       	mul	r16, r22
    1ff2:	60 2d       	mov	r22, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	60 93 dc 00 	sts	0x00DC, r22
      
      if(gu32_Overflows == 0)
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	a1 05       	cpc	r26, r1
    1ffe:	b1 05       	cpc	r27, r1
    2000:	41 f4       	brne	.+16     	; 0x2012 <TIM_DelayMs+0xf4>
      {
         gu8_OverflowsComplete = HIGH;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 93 dd 00 	sts	0x00DD, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    2008:	81 2f       	mov	r24, r17
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
    2010:	05 c0       	rjmp	.+10     	; 0x201c <TIM_DelayMs+0xfe>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    2012:	81 2f       	mov	r24, r17
    2014:	6f ef       	ldi	r22, 0xFF	; 255
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 d7 00 	sts	0x00D7, r24
      return TIMER_E_PENDING;
    2022:	8d ef       	ldi	r24, 0xFD	; 253
    2024:	07 c0       	rjmp	.+14     	; 0x2034 <TIM_DelayMs+0x116>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    2026:	8e ef       	ldi	r24, 0xFE	; 254
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <TIM_DelayMs+0x116>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	03 c0       	rjmp	.+6      	; 0x2034 <TIM_DelayMs+0x116>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <TIM_DelayMs+0x116>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    2032:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	08 95       	ret

00002054 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	18 2f       	mov	r17, r24
   if(DelayReady == gEnu_State)
    2062:	20 91 d7 00 	lds	r18, 0x00D7
    2066:	22 23       	and	r18, r18
    2068:	09 f4       	brne	.+2      	; 0x206c <TIM_DelayStatus+0x18>
    206a:	49 c0       	rjmp	.+146    	; 0x20fe <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    206c:	80 91 d5 00 	lds	r24, 0x00D5
    2070:	90 91 d6 00 	lds	r25, 0x00D6
    2074:	68 17       	cp	r22, r24
    2076:	79 07       	cpc	r23, r25
    2078:	09 f0       	breq	.+2      	; 0x207c <TIM_DelayStatus+0x28>
    207a:	43 c0       	rjmp	.+134    	; 0x2102 <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    207c:	21 30       	cpi	r18, 0x01	; 1
    207e:	09 f0       	breq	.+2      	; 0x2082 <TIM_DelayStatus+0x2e>
    2080:	42 c0       	rjmp	.+132    	; 0x2106 <TIM_DelayStatus+0xb2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    2082:	81 2f       	mov	r24, r17
    2084:	be 01       	movw	r22, r28
    2086:	6f 5f       	subi	r22, 0xFF	; 255
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    208e:	88 23       	and	r24, r24
    2090:	a9 f5       	brne	.+106    	; 0x20fc <TIM_DelayStatus+0xa8>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    2092:	80 91 dd 00 	lds	r24, 0x00DD
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	41 f4       	brne	.+16     	; 0x20aa <TIM_DelayStatus+0x56>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    209a:	10 92 d7 00 	sts	0x00D7, r1
            gu8_OverflowsComplete = LOW;
    209e:	10 92 dd 00 	sts	0x00DD, r1
            gu8_Remindar = 0;
    20a2:	10 92 dc 00 	sts	0x00DC, r1
            /* return success message. */
            return ERROR_OK;
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	2f c0       	rjmp	.+94     	; 0x2108 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    20aa:	80 91 d8 00 	lds	r24, 0x00D8
    20ae:	90 91 d9 00 	lds	r25, 0x00D9
    20b2:	a0 91 da 00 	lds	r26, 0x00DA
    20b6:	b0 91 db 00 	lds	r27, 0x00DB
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	a1 09       	sbc	r26, r1
    20be:	b1 09       	sbc	r27, r1
    20c0:	80 93 d8 00 	sts	0x00D8, r24
    20c4:	90 93 d9 00 	sts	0x00D9, r25
    20c8:	a0 93 da 00 	sts	0x00DA, r26
    20cc:	b0 93 db 00 	sts	0x00DB, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	a1 05       	cpc	r26, r1
    20d4:	b1 05       	cpc	r27, r1
    20d6:	59 f4       	brne	.+22     	; 0x20ee <TIM_DelayStatus+0x9a>
         {
            gu8_OverflowsComplete = HIGH;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	80 93 dd 00 	sts	0x00DD, r24
            TIM_Start(TIM_channel, gu8_Remindar);
    20de:	60 91 dc 00 	lds	r22, 0x00DC
    20e2:	81 2f       	mov	r24, r17
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    20ea:	8d ef       	ldi	r24, 0xFD	; 253
    20ec:	0d c0       	rjmp	.+26     	; 0x2108 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    20ee:	81 2f       	mov	r24, r17
    20f0:	6f ef       	ldi	r22, 0xFF	; 255
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    20f8:	8d ef       	ldi	r24, 0xFD	; 253
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <TIM_DelayStatus+0xb4>
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    20fe:	8b ef       	ldi	r24, 0xFB	; 251
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    2106:	81 e0       	ldi	r24, 0x01	; 1
   }      
    2108:	0f 90       	pop	r0
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	08 95       	ret

00002112 <OS_Init>:
	
	SET_BIT(SREG,I);
}

extern ERROR_STATE_t OS_Init(void)
{	
    2112:	cf 93       	push	r28
			/*Do Nothing*/
		}
	#endif
	
	#if OS_TIMER_2
		switch(gstr_OS_SchedulerCfg.u8_OS_TimerResolution)
    2114:	80 91 9d 00 	lds	r24, 0x009D
    2118:	8a 30       	cpi	r24, 0x0A	; 10
    211a:	39 f0       	breq	.+14     	; 0x212a <OS_Init+0x18>
    211c:	84 31       	cpi	r24, 0x14	; 20
    211e:	41 f0       	breq	.+16     	; 0x2130 <OS_Init+0x1e>
    2120:	85 30       	cpi	r24, 0x05	; 5
    2122:	49 f4       	brne	.+18     	; 0x2136 <OS_Init+0x24>
		{
			case OS_TIMER_RESOLUATION_5U:
				REG_WRITE(OCR2,OS_RES_5U_PRESCALER_8);
    2124:	8a e0       	ldi	r24, 0x0A	; 10
    2126:	83 bd       	out	0x23, r24	; 35
				break;	
    2128:	25 c0       	rjmp	.+74     	; 0x2174 <OS_Init+0x62>
			case OS_TIMER_RESOLUATION_10U:
				REG_WRITE(OCR2,OS_RES_10U_PRESCALER_8);
    212a:	84 e1       	ldi	r24, 0x14	; 20
    212c:	83 bd       	out	0x23, r24	; 35
				break;
    212e:	22 c0       	rjmp	.+68     	; 0x2174 <OS_Init+0x62>
			case OS_TIMER_RESOLUATION_20U:
				REG_WRITE(OCR2,OS_RES_20U_PRESCALER_8);
    2130:	88 e2       	ldi	r24, 0x28	; 40
    2132:	83 bd       	out	0x23, r24	; 35
				break;
    2134:	1f c0       	rjmp	.+62     	; 0x2174 <OS_Init+0x62>
		else
		{
			/*Do Nothing*/
		}
	#endif
	u8_ErrorState=OS_Get(&gpstr_Task);
    2136:	8e ed       	ldi	r24, 0xDE	; 222
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 9e 12 	call	0x253c	; 0x253c <OS_Get>
    213e:	c8 2f       	mov	r28, r24
	gu32_OS_TicksNumber = gstr_OS_SchedulerCfg.u32_OS_TickTime_Us/gstr_OS_SchedulerCfg.u8_OS_TimerResolution;
    2140:	20 91 9d 00 	lds	r18, 0x009D
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	60 91 9e 00 	lds	r22, 0x009E
    214e:	70 91 9f 00 	lds	r23, 0x009F
    2152:	80 91 a0 00 	lds	r24, 0x00A0
    2156:	90 91 a1 00 	lds	r25, 0x00A1
    215a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__udivmodsi4>
    215e:	20 93 e4 00 	sts	0x00E4, r18
    2162:	30 93 e5 00 	sts	0x00E5, r19
    2166:	40 93 e6 00 	sts	0x00E6, r20
    216a:	50 93 e7 00 	sts	0x00E7, r21
	return u8_ErrorState;
}
    216e:	8c 2f       	mov	r24, r28
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret
				u8_ErrorState=OS_UNSUPPORTED_RESOLUTION;
				break;
		}
		if(ERROR_OK==u8_ErrorState)
		{
			SET_BIT(TCCR2,WGM21);
    2174:	85 b5       	in	r24, 0x25	; 37
			CLR_BIT(TCCR2,WGM20);
			THREE_BITS_WRITE(TCCR2,CS20,OS_T2_PRESCALER_8);		
    2176:	80 7b       	andi	r24, 0xB0	; 176
    2178:	8a 60       	ori	r24, 0x0A	; 10
    217a:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TIMSK,OCIE2); 	
    217c:	89 b7       	in	r24, 0x39	; 57
    217e:	80 68       	ori	r24, 0x80	; 128
    2180:	89 bf       	out	0x39, r24	; 57
    2182:	d9 cf       	rjmp	.-78     	; 0x2136 <OS_Init+0x24>

00002184 <OS_Run>:
	#if OS_TIMER_1
		REG_WRITE(TCNT1,ZERO);
	#endif
		
	#if OS_TIMER_2
		REG_WRITE(TCNT2,ZERO);
    2184:	14 bc       	out	0x24, r1	; 36
	#endif
	
	SET_BIT(SREG,I);
    2186:	8f b7       	in	r24, 0x3f	; 63
    2188:	80 68       	ori	r24, 0x80	; 128
    218a:	8f bf       	out	0x3f, r24	; 63
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback))
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	10 e0       	ldi	r17, 0x00	; 0
			{
				continue ;
			}
			else if(OS_TASKREADY==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
			{
				gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKRUNING;
    2190:	ff 24       	eor	r15, r15
    2192:	f3 94       	inc	r15
				
				if(ZERO!=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity)
				{
					if(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
					{
						gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKWAIT;						
    2194:	ee 24       	eor	r14, r14
    2196:	68 94       	set
    2198:	e1 f8       	bld	r14, 1
		
	#if OS_TIMER_2
		REG_WRITE(TCNT2,ZERO);
	#endif
	
	SET_BIT(SREG,I);
    219a:	e0 91 de 00 	lds	r30, 0x00DE
    219e:	f0 91 df 00 	lds	r31, 0x00DF
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback))
    21a2:	98 01       	movw	r18, r16
    21a4:	e9 01       	movw	r28, r18
    21a6:	80 85       	ldd	r24, Z+8	; 0x08
    21a8:	91 85       	ldd	r25, Z+9	; 0x09
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	21 f1       	breq	.+72     	; 0x21f6 <OS_Run+0x72>
			{
				continue ;
			}
			else if(OS_TASKREADY==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
    21ae:	83 81       	ldd	r24, Z+3	; 0x03
    21b0:	88 23       	and	r24, r24
    21b2:	09 f5       	brne	.+66     	; 0x21f6 <OS_Run+0x72>
			{
				gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKRUNING;
    21b4:	f3 82       	std	Z+3, r15	; 0x03
				(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback)();
    21b6:	00 84       	ldd	r0, Z+8	; 0x08
    21b8:	f1 85       	ldd	r31, Z+9	; 0x09
    21ba:	e0 2d       	mov	r30, r0
    21bc:	09 95       	icall
				gu8_OS_ReadyTasksCounter--;
    21be:	80 91 e8 00 	lds	r24, 0x00E8
    21c2:	81 50       	subi	r24, 0x01	; 1
    21c4:	80 93 e8 00 	sts	0x00E8, r24
				
				if(ZERO!=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity)
    21c8:	80 91 de 00 	lds	r24, 0x00DE
    21cc:	90 91 df 00 	lds	r25, 0x00DF
    21d0:	c8 0f       	add	r28, r24
    21d2:	d9 1f       	adc	r29, r25
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	ae 81       	ldd	r26, Y+6	; 0x06
    21da:	bf 81       	ldd	r27, Y+7	; 0x07
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	a1 05       	cpc	r26, r1
    21e0:	b1 05       	cpc	r27, r1
    21e2:	29 f0       	breq	.+10     	; 0x21ee <OS_Run+0x6a>
				{
					if(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	61 f4       	brne	.+24     	; 0x2202 <OS_Run+0x7e>
					{
						gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKWAIT;						
    21ea:	eb 82       	std	Y+3, r14	; 0x03
    21ec:	0a c0       	rjmp	.+20     	; 0x2202 <OS_Run+0x7e>
						/*Do Nothing*/
					}
				}
				else
				{
					OS_DeleteTask((gpstr_Task+u8_TaskCounter));
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 75 12 	call	0x24ea	; 0x24ea <OS_DeleteTask>
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <OS_Run+0x7e>
    21f6:	26 5f       	subi	r18, 0xF6	; 246
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	3a 96       	adiw	r30, 0x0a	; 10
{
	uint8_t u8_TaskCounter;
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
    21fc:	2e 31       	cpi	r18, 0x1E	; 30
    21fe:	31 05       	cpc	r19, r1
    2200:	89 f6       	brne	.-94     	; 0x21a4 <OS_Run+0x20>
			else
			{
				/*Do Nothing*/
			}
		}
		if(ZERO==gu8_OS_ReadyTasksCounter)
    2202:	80 91 e8 00 	lds	r24, 0x00E8
    2206:	88 23       	and	r24, r24
    2208:	41 f6       	brne	.-112    	; 0x219a <OS_Run+0x16>

static void OS_IdealTask(void)
{
	while(TRUE)
	{
		if(ZERO!=gu8_OS_ReadyTasksCounter)
    220a:	80 91 e8 00 	lds	r24, 0x00E8
    220e:	88 23       	and	r24, r24
    2210:	e1 f3       	breq	.-8      	; 0x220a <OS_Run+0x86>
    2212:	c3 cf       	rjmp	.-122    	; 0x219a <OS_Run+0x16>

00002214 <__vector_4>:
#endif

#if OS_TIMER_2
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	2f 93       	push	r18
    2220:	3f 93       	push	r19
    2222:	4f 93       	push	r20
    2224:	5f 93       	push	r21
    2226:	6f 93       	push	r22
    2228:	7f 93       	push	r23
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	af 93       	push	r26
    2230:	bf 93       	push	r27
    2232:	ef 93       	push	r30
    2234:	ff 93       	push	r31
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
    2236:	80 91 e0 00 	lds	r24, 0x00E0
    223a:	90 91 e1 00 	lds	r25, 0x00E1
    223e:	a0 91 e2 00 	lds	r26, 0x00E2
    2242:	b0 91 e3 00 	lds	r27, 0x00E3
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	a1 1d       	adc	r26, r1
    224a:	b1 1d       	adc	r27, r1
    224c:	80 93 e0 00 	sts	0x00E0, r24
    2250:	90 93 e1 00 	sts	0x00E1, r25
    2254:	a0 93 e2 00 	sts	0x00E2, r26
    2258:	b0 93 e3 00 	sts	0x00E3, r27
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
    225c:	80 91 e0 00 	lds	r24, 0x00E0
    2260:	90 91 e1 00 	lds	r25, 0x00E1
    2264:	a0 91 e2 00 	lds	r26, 0x00E2
    2268:	b0 91 e3 00 	lds	r27, 0x00E3
    226c:	40 91 e4 00 	lds	r20, 0x00E4
    2270:	50 91 e5 00 	lds	r21, 0x00E5
    2274:	60 91 e6 00 	lds	r22, 0x00E6
    2278:	70 91 e7 00 	lds	r23, 0x00E7
    227c:	48 17       	cp	r20, r24
    227e:	59 07       	cpc	r21, r25
    2280:	6a 07       	cpc	r22, r26
    2282:	7b 07       	cpc	r23, r27
    2284:	91 f5       	brne	.+100    	; 0x22ea <__vector_4+0xd6>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback)
    228a:	e0 91 de 00 	lds	r30, 0x00DE
    228e:	f0 91 df 00 	lds	r31, 0x00DF
    2292:	e8 0f       	add	r30, r24
    2294:	f9 1f       	adc	r31, r25
    2296:	20 85       	ldd	r18, Z+8	; 0x08
    2298:	31 85       	ldd	r19, Z+9	; 0x09
    229a:	21 15       	cp	r18, r1
    229c:	31 05       	cpc	r19, r1
    229e:	c9 f0       	breq	.+50     	; 0x22d2 <__vector_4+0xbe>
			{
				continue ;
			}
			else if((OS_TASKWAIT==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)||(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState))
    22a0:	23 81       	ldd	r18, Z+3	; 0x03
    22a2:	21 50       	subi	r18, 0x01	; 1
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	a8 f4       	brcc	.+42     	; 0x22d2 <__vector_4+0xbe>
			{
				if(ZERO==gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay)
    22a8:	21 81       	ldd	r18, Z+1	; 0x01
    22aa:	22 23       	and	r18, r18
    22ac:	81 f4       	brne	.+32     	; 0x22ce <__vector_4+0xba>
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKREADY;
    22ae:	13 82       	std	Z+3, r1	; 0x03
					gu8_OS_ReadyTasksCounter++;
    22b0:	20 91 e8 00 	lds	r18, 0x00E8
    22b4:	2f 5f       	subi	r18, 0xFF	; 255
    22b6:	20 93 e8 00 	sts	0x00E8, r18
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity-1;
    22ba:	e0 91 de 00 	lds	r30, 0x00DE
    22be:	f0 91 df 00 	lds	r31, 0x00DF
    22c2:	e8 0f       	add	r30, r24
    22c4:	f9 1f       	adc	r31, r25
    22c6:	24 81       	ldd	r18, Z+4	; 0x04
    22c8:	21 50       	subi	r18, 0x01	; 1
    22ca:	21 83       	std	Z+1, r18	; 0x01
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <__vector_4+0xbe>
				}
				else
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay--;
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	21 83       	std	Z+1, r18	; 0x01
    22d2:	0a 96       	adiw	r24, 0x0a	; 10
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
    22d4:	8e 31       	cpi	r24, 0x1E	; 30
    22d6:	91 05       	cpc	r25, r1
    22d8:	c1 f6       	brne	.-80     	; 0x228a <__vector_4+0x76>
			else
			{
				/*Do Nothing*/
			}
		}
		u32_ISRsCounter=ZERO;
    22da:	10 92 e0 00 	sts	0x00E0, r1
    22de:	10 92 e1 00 	sts	0x00E1, r1
    22e2:	10 92 e2 00 	sts	0x00E2, r1
    22e6:	10 92 e3 00 	sts	0x00E3, r1
	}
	else
	{
		/*Do Nothing*/
	}   
}
    22ea:	ff 91       	pop	r31
    22ec:	ef 91       	pop	r30
    22ee:	bf 91       	pop	r27
    22f0:	af 91       	pop	r26
    22f2:	9f 91       	pop	r25
    22f4:	8f 91       	pop	r24
    22f6:	7f 91       	pop	r23
    22f8:	6f 91       	pop	r22
    22fa:	5f 91       	pop	r21
    22fc:	4f 91       	pop	r20
    22fe:	3f 91       	pop	r19
    2300:	2f 91       	pop	r18
    2302:	0f 90       	pop	r0
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	0f 90       	pop	r0
    2308:	1f 90       	pop	r1
    230a:	18 95       	reti

0000230c <OS_CreateTask>:
								uint8_t Delay,
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
    230c:	6f 92       	push	r6
    230e:	7f 92       	push	r7
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	78 2f       	mov	r23, r24
    232a:	49 01       	movw	r8, r18
    232c:	5a 01       	movw	r10, r20
    232e:	67 01       	movw	r12, r14
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	uint8_t u8_TempArrayIndex=ZERO;
	uint8_t u8_Counter;
	uint8_t u8_CurrentPrioritySize=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[Priority];
    2330:	c8 2f       	mov	r28, r24
    2332:	d0 e0       	ldi	r29, 0x00	; 0
    2334:	fe 01       	movw	r30, r28
    2336:	e6 56       	subi	r30, 0x66	; 102
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	e0 80       	ld	r14, Z
	if(NULL_PTR==TaskCallback)
    233c:	01 15       	cp	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <OS_CreateTask+0x38>
    2342:	bd c0       	rjmp	.+378    	; 0x24be <OS_CreateTask+0x1b2>
	{
		u8_ErrorState=ERROR_NULL_PTR;
	}
	else if(Priority>=OS_PRIORITIES_NUMBER)
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	08 f0       	brcs	.+2      	; 0x234a <OS_CreateTask+0x3e>
    2348:	bc c0       	rjmp	.+376    	; 0x24c2 <OS_CreateTask+0x1b6>
	{
		u8_ErrorState=OS_UNSUPPORTED_PRIORITY;
	}
	else if(gau8_OS_TaskCounter[Priority]>=u8_CurrentPrioritySize)
    234a:	ff 24       	eor	r15, r15
    234c:	fe 01       	movw	r30, r28
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e7 51       	subi	r30, 0x17	; 23
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	8e 15       	cp	r24, r14
    235c:	9f 05       	cpc	r25, r15
    235e:	0c f0       	brlt	.+2      	; 0x2362 <OS_CreateTask+0x56>
    2360:	b2 c0       	rjmp	.+356    	; 0x24c6 <OS_CreateTask+0x1ba>
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    2362:	77 23       	and	r23, r23
    2364:	59 f0       	breq	.+22     	; 0x237c <OS_CreateTask+0x70>
    2366:	ea e9       	ldi	r30, 0x9A	; 154
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	80 e0       	ldi	r24, 0x00	; 0
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
    236e:	21 91       	ld	r18, Z+
    2370:	82 0f       	add	r24, r18
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    2372:	9f 5f       	subi	r25, 0xFF	; 255
    2374:	97 17       	cp	r25, r23
    2376:	d9 f7       	brne	.-10     	; 0x236e <OS_CreateTask+0x62>
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
    2378:	48 2f       	mov	r20, r24
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <OS_CreateTask+0x74>
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
    2380:	a4 2f       	mov	r26, r20
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e8 0e       	add	r14, r24
    2386:	f1 1c       	adc	r15, r1
    2388:	ae 15       	cp	r26, r14
    238a:	bf 05       	cpc	r27, r15
    238c:	0c f0       	brlt	.+2      	; 0x2390 <OS_CreateTask+0x84>
    238e:	9d c0       	rjmp	.+314    	; 0x24ca <OS_CreateTask+0x1be>
		{
			if(NULL_PTR==gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback)
    2390:	cd 01       	movw	r24, r26
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	9d 01       	movw	r18, r26
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	82 0f       	add	r24, r18
    23a6:	93 1f       	adc	r25, r19
    23a8:	81 51       	subi	r24, 0x11	; 17
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 85       	ldd	r24, Z+8	; 0x08
    23b0:	91 85       	ldd	r25, Z+9	; 0x09
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <OS_CreateTask+0xac>
    23b6:	74 c0       	rjmp	.+232    	; 0x24a0 <OS_CreateTask+0x194>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <OS_CreateTask+0xd6>
    23ba:	cd 01       	movw	r24, r26
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	9d 01       	movw	r18, r26
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	22 0f       	add	r18, r18
    23cc:	33 1f       	adc	r19, r19
    23ce:	82 0f       	add	r24, r18
    23d0:	93 1f       	adc	r25, r19
    23d2:	86 0d       	add	r24, r6
    23d4:	97 1d       	adc	r25, r7
    23d6:	fc 01       	movw	r30, r24
    23d8:	80 85       	ldd	r24, Z+8	; 0x08
    23da:	91 85       	ldd	r25, Z+9	; 0x09
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <OS_CreateTask+0xd6>
    23e0:	65 c0       	rjmp	.+202    	; 0x24ac <OS_CreateTask+0x1a0>
			{
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskPriority=Priority;
    23e2:	cd 01       	movw	r24, r26
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	9d 01       	movw	r18, r26
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	22 0f       	add	r18, r18
    23f4:	33 1f       	adc	r19, r19
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	fc 01       	movw	r30, r24
    23fc:	e1 51       	subi	r30, 0x11	; 17
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	70 83       	st	Z, r23
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskDelay=Delay;
    2402:	61 83       	std	Z+1, r22	; 0x01
				gastr_OS_TaskCfg[u8_Counter].u32_OS_TaskPeriodicity=Periodicity;
    2404:	84 82       	std	Z+4, r8	; 0x04
    2406:	95 82       	std	Z+5, r9	; 0x05
    2408:	a6 82       	std	Z+6, r10	; 0x06
    240a:	b7 82       	std	Z+7, r11	; 0x07
				gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback=TaskCallback;
    240c:	11 87       	std	Z+9, r17	; 0x09
    240e:	00 87       	std	Z+8, r16	; 0x08
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskID=u8_Counter;
    2410:	42 83       	std	Z+2, r20	; 0x02
				
				if(NULL_PTR!=TaskHandler)
    2412:	c1 14       	cp	r12, r1
    2414:	d1 04       	cpc	r13, r1
    2416:	81 f0       	breq	.+32     	; 0x2438 <OS_CreateTask+0x12c>
				{
					*TaskHandler=gastr_OS_TaskCfg+u8_Counter;				
    2418:	84 2f       	mov	r24, r20
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	9c 01       	movw	r18, r24
    2422:	22 0f       	add	r18, r18
    2424:	33 1f       	adc	r19, r19
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	82 0f       	add	r24, r18
    242c:	93 1f       	adc	r25, r19
    242e:	81 51       	subi	r24, 0x11	; 17
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	f6 01       	movw	r30, r12
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
				else
				{
					/*Do Nothing*/
				}
				
				if(ZERO==Delay)
    2438:	66 23       	and	r22, r22
    243a:	b1 f4       	brne	.+44     	; 0x2468 <OS_CreateTask+0x15c>
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKREADY;
    243c:	cd 01       	movw	r24, r26
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	aa 0f       	add	r26, r26
    2444:	bb 1f       	adc	r27, r27
    2446:	aa 0f       	add	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	aa 0f       	add	r26, r26
    244c:	bb 1f       	adc	r27, r27
    244e:	a8 0f       	add	r26, r24
    2450:	b9 1f       	adc	r27, r25
    2452:	a1 51       	subi	r26, 0x11	; 17
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	13 96       	adiw	r26, 0x03	; 3
    2458:	1c 92       	st	X, r1
    245a:	13 97       	sbiw	r26, 0x03	; 3
					gu8_OS_ReadyTasksCounter++;
    245c:	80 91 e8 00 	lds	r24, 0x00E8
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	80 93 e8 00 	sts	0x00E8, r24
    2466:	11 c0       	rjmp	.+34     	; 0x248a <OS_CreateTask+0x17e>
				}
				else
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKWAIT;
    2468:	cd 01       	movw	r24, r26
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	aa 0f       	add	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	aa 0f       	add	r26, r26
    2474:	bb 1f       	adc	r27, r27
    2476:	aa 0f       	add	r26, r26
    2478:	bb 1f       	adc	r27, r27
    247a:	a8 0f       	add	r26, r24
    247c:	b9 1f       	adc	r27, r25
    247e:	a1 51       	subi	r26, 0x11	; 17
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	13 96       	adiw	r26, 0x03	; 3
    2486:	8c 93       	st	X, r24
    2488:	13 97       	sbiw	r26, 0x03	; 3
				}
				gau8_OS_TaskCounter[Priority]++;
    248a:	cc 0f       	add	r28, r28
    248c:	dd 1f       	adc	r29, r29
    248e:	c7 51       	subi	r28, 0x17	; 23
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	88 81       	ld	r24, Y
    2494:	99 81       	ldd	r25, Y+1	; 0x01
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	99 83       	std	Y+1, r25	; 0x01
    249a:	88 83       	st	Y, r24
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    249c:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKWAIT;
				}
				gau8_OS_TaskCounter[Priority]++;
				break;
    249e:	16 c0       	rjmp	.+44     	; 0x24cc <OS_CreateTask+0x1c0>
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
		{
			if(NULL_PTR==gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback)
    24a0:	0f 2e       	mov	r0, r31
    24a2:	ff ee       	ldi	r31, 0xEF	; 239
    24a4:	6f 2e       	mov	r6, r31
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	7f 2e       	mov	r7, r31
    24aa:	f0 2d       	mov	r31, r0
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
    24ac:	4f 5f       	subi	r20, 0xFF	; 255
    24ae:	a4 2f       	mov	r26, r20
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ae 15       	cp	r26, r14
    24b4:	bf 05       	cpc	r27, r15
    24b6:	0c f4       	brge	.+2      	; 0x24ba <OS_CreateTask+0x1ae>
    24b8:	80 cf       	rjmp	.-256    	; 0x23ba <OS_CreateTask+0xae>
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	07 c0       	rjmp	.+14     	; 0x24cc <OS_CreateTask+0x1c0>
	uint8_t u8_TempArrayIndex=ZERO;
	uint8_t u8_Counter;
	uint8_t u8_CurrentPrioritySize=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[Priority];
	if(NULL_PTR==TaskCallback)
	{
		u8_ErrorState=ERROR_NULL_PTR;
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	05 c0       	rjmp	.+10     	; 0x24cc <OS_CreateTask+0x1c0>
	}
	else if(Priority>=OS_PRIORITIES_NUMBER)
	{
		u8_ErrorState=OS_UNSUPPORTED_PRIORITY;
    24c2:	8e ef       	ldi	r24, 0xFE	; 254
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <OS_CreateTask+0x1c0>
	}
	else if(gau8_OS_TaskCounter[Priority]>=u8_CurrentPrioritySize)
	{
		u8_ErrorState=OS_MEMORY_FULL;	
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <OS_CreateTask+0x1c0>
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    24ca:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}			
	}
	return u8_ErrorState;
}
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	9f 90       	pop	r9
    24e2:	8f 90       	pop	r8
    24e4:	7f 90       	pop	r7
    24e6:	6f 90       	pop	r6
    24e8:	08 95       	ret

000024ea <OS_DeleteTask>:

extern ERROR_STATE_t OS_DeleteTask(TaskHandler_t TaskHandler)
{
    24ea:	fc 01       	movw	r30, r24
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	79 f0       	breq	.+30     	; 0x250e <OS_DeleteTask+0x24>
	{
		TaskHandler->ptr_OS_TaskCallback=NULL_PTR;
    24f0:	11 86       	std	Z+9, r1	; 0x09
    24f2:	10 86       	std	Z+8, r1	; 0x08
		TaskHandler->u8_OS_TaskState=OS_TASKDELETED;
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	83 83       	std	Z+3, r24	; 0x03
		gau8_OS_TaskCounter[TaskHandler->u8_OS_TaskPriority]--;
    24f8:	e0 81       	ld	r30, Z
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	e7 51       	subi	r30, 0x17	; 23
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
	else
	{
		
	}
	return u8_ErrorState;
}
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	08 95       	ret

00002512 <OS_SuspandTask>:

extern ERROR_STATE_t OS_SuspandTask(TaskHandler_t TaskHandler)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	19 f0       	breq	.+6      	; 0x251c <OS_SuspandTask+0xa>
	{
		TaskHandler->u8_OS_TaskState=OS_TASKSUSPEND;
    2516:	23 e0       	ldi	r18, 0x03	; 3
    2518:	fc 01       	movw	r30, r24
    251a:	23 83       	std	Z+3, r18	; 0x03
	else
	{
		
	}
	return u8_ErrorState;	
}
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	08 95       	ret

00002520 <OS_UnsuspandTask>:

extern ERROR_STATE_t OS_UnsuspandTask(TaskHandler_t TaskHandler)
{
    2520:	fc 01       	movw	r30, r24
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	49 f0       	breq	.+18     	; 0x2538 <OS_UnsuspandTask+0x18>
	{
		TaskHandler->u8_OS_TaskState=OS_TASKREADY;
    2526:	13 82       	std	Z+3, r1	; 0x03
		TaskHandler->u8_OS_TaskDelay=TaskHandler->u32_OS_TaskPeriodicity-1;
    2528:	84 81       	ldd	r24, Z+4	; 0x04
    252a:	81 50       	subi	r24, 0x01	; 1
    252c:	81 83       	std	Z+1, r24	; 0x01
		gu8_OS_ReadyTasksCounter++;
    252e:	80 91 e8 00 	lds	r24, 0x00E8
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	80 93 e8 00 	sts	0x00E8, r24
	else
	{
		
	}
	return u8_ErrorState;	
}
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	08 95       	ret

0000253c <OS_Get>:

extern ERROR_STATE_t OS_Get(TaskHandler_t* Task)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Task)
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	39 f0       	breq	.+14     	; 0x254e <OS_Get+0x12>
	{
		u8_ErrorState=ERROR_NULL_PTR;
	}
	else
	{
		*Task=gastr_OS_TaskCfg;
    2540:	2f ee       	ldi	r18, 0xEF	; 239
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	fc 01       	movw	r30, r24
    2546:	31 83       	std	Z+1, r19	; 0x01
    2548:	20 83       	st	Z, r18
	return u8_ErrorState;	
}

extern ERROR_STATE_t OS_Get(TaskHandler_t* Task)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	08 95       	ret
	if(NULL_PTR==Task)
	{
		u8_ErrorState=ERROR_NULL_PTR;
    254e:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		*Task=gastr_OS_TaskCfg;
	}
	return u8_ErrorState;	
    2550:	08 95       	ret

00002552 <__subsf3>:
    2552:	50 58       	subi	r21, 0x80	; 128

00002554 <__addsf3>:
    2554:	bb 27       	eor	r27, r27
    2556:	aa 27       	eor	r26, r26
    2558:	0e d0       	rcall	.+28     	; 0x2576 <__addsf3x>
    255a:	ae c1       	rjmp	.+860    	; 0x28b8 <__fp_round>
    255c:	9f d1       	rcall	.+830    	; 0x289c <__fp_pscA>
    255e:	30 f0       	brcs	.+12     	; 0x256c <__addsf3+0x18>
    2560:	a4 d1       	rcall	.+840    	; 0x28aa <__fp_pscB>
    2562:	20 f0       	brcs	.+8      	; 0x256c <__addsf3+0x18>
    2564:	31 f4       	brne	.+12     	; 0x2572 <__addsf3+0x1e>
    2566:	9f 3f       	cpi	r25, 0xFF	; 255
    2568:	11 f4       	brne	.+4      	; 0x256e <__addsf3+0x1a>
    256a:	1e f4       	brtc	.+6      	; 0x2572 <__addsf3+0x1e>
    256c:	94 c1       	rjmp	.+808    	; 0x2896 <__fp_nan>
    256e:	0e f4       	brtc	.+2      	; 0x2572 <__addsf3+0x1e>
    2570:	e0 95       	com	r30
    2572:	e7 fb       	bst	r30, 7
    2574:	8a c1       	rjmp	.+788    	; 0x288a <__fp_inf>

00002576 <__addsf3x>:
    2576:	e9 2f       	mov	r30, r25
    2578:	b0 d1       	rcall	.+864    	; 0x28da <__fp_split3>
    257a:	80 f3       	brcs	.-32     	; 0x255c <__addsf3+0x8>
    257c:	ba 17       	cp	r27, r26
    257e:	62 07       	cpc	r22, r18
    2580:	73 07       	cpc	r23, r19
    2582:	84 07       	cpc	r24, r20
    2584:	95 07       	cpc	r25, r21
    2586:	18 f0       	brcs	.+6      	; 0x258e <__addsf3x+0x18>
    2588:	71 f4       	brne	.+28     	; 0x25a6 <__addsf3x+0x30>
    258a:	9e f5       	brtc	.+102    	; 0x25f2 <__addsf3x+0x7c>
    258c:	c8 c1       	rjmp	.+912    	; 0x291e <__fp_zero>
    258e:	0e f4       	brtc	.+2      	; 0x2592 <__addsf3x+0x1c>
    2590:	e0 95       	com	r30
    2592:	0b 2e       	mov	r0, r27
    2594:	ba 2f       	mov	r27, r26
    2596:	a0 2d       	mov	r26, r0
    2598:	0b 01       	movw	r0, r22
    259a:	b9 01       	movw	r22, r18
    259c:	90 01       	movw	r18, r0
    259e:	0c 01       	movw	r0, r24
    25a0:	ca 01       	movw	r24, r20
    25a2:	a0 01       	movw	r20, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	ff 27       	eor	r31, r31
    25a8:	59 1b       	sub	r21, r25
    25aa:	99 f0       	breq	.+38     	; 0x25d2 <__addsf3x+0x5c>
    25ac:	59 3f       	cpi	r21, 0xF9	; 249
    25ae:	50 f4       	brcc	.+20     	; 0x25c4 <__addsf3x+0x4e>
    25b0:	50 3e       	cpi	r21, 0xE0	; 224
    25b2:	68 f1       	brcs	.+90     	; 0x260e <__addsf3x+0x98>
    25b4:	1a 16       	cp	r1, r26
    25b6:	f0 40       	sbci	r31, 0x00	; 0
    25b8:	a2 2f       	mov	r26, r18
    25ba:	23 2f       	mov	r18, r19
    25bc:	34 2f       	mov	r19, r20
    25be:	44 27       	eor	r20, r20
    25c0:	58 5f       	subi	r21, 0xF8	; 248
    25c2:	f3 cf       	rjmp	.-26     	; 0x25aa <__addsf3x+0x34>
    25c4:	46 95       	lsr	r20
    25c6:	37 95       	ror	r19
    25c8:	27 95       	ror	r18
    25ca:	a7 95       	ror	r26
    25cc:	f0 40       	sbci	r31, 0x00	; 0
    25ce:	53 95       	inc	r21
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__addsf3x+0x4e>
    25d2:	7e f4       	brtc	.+30     	; 0x25f2 <__addsf3x+0x7c>
    25d4:	1f 16       	cp	r1, r31
    25d6:	ba 0b       	sbc	r27, r26
    25d8:	62 0b       	sbc	r22, r18
    25da:	73 0b       	sbc	r23, r19
    25dc:	84 0b       	sbc	r24, r20
    25de:	ba f0       	brmi	.+46     	; 0x260e <__addsf3x+0x98>
    25e0:	91 50       	subi	r25, 0x01	; 1
    25e2:	a1 f0       	breq	.+40     	; 0x260c <__addsf3x+0x96>
    25e4:	ff 0f       	add	r31, r31
    25e6:	bb 1f       	adc	r27, r27
    25e8:	66 1f       	adc	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	88 1f       	adc	r24, r24
    25ee:	c2 f7       	brpl	.-16     	; 0x25e0 <__addsf3x+0x6a>
    25f0:	0e c0       	rjmp	.+28     	; 0x260e <__addsf3x+0x98>
    25f2:	ba 0f       	add	r27, r26
    25f4:	62 1f       	adc	r22, r18
    25f6:	73 1f       	adc	r23, r19
    25f8:	84 1f       	adc	r24, r20
    25fa:	48 f4       	brcc	.+18     	; 0x260e <__addsf3x+0x98>
    25fc:	87 95       	ror	r24
    25fe:	77 95       	ror	r23
    2600:	67 95       	ror	r22
    2602:	b7 95       	ror	r27
    2604:	f7 95       	ror	r31
    2606:	9e 3f       	cpi	r25, 0xFE	; 254
    2608:	08 f0       	brcs	.+2      	; 0x260c <__addsf3x+0x96>
    260a:	b3 cf       	rjmp	.-154    	; 0x2572 <__addsf3+0x1e>
    260c:	93 95       	inc	r25
    260e:	88 0f       	add	r24, r24
    2610:	08 f0       	brcs	.+2      	; 0x2614 <__addsf3x+0x9e>
    2612:	99 27       	eor	r25, r25
    2614:	ee 0f       	add	r30, r30
    2616:	97 95       	ror	r25
    2618:	87 95       	ror	r24
    261a:	08 95       	ret

0000261c <__cmpsf2>:
    261c:	12 d1       	rcall	.+548    	; 0x2842 <__fp_cmp>
    261e:	08 f4       	brcc	.+2      	; 0x2622 <__cmpsf2+0x6>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	08 95       	ret

00002624 <__divsf3>:
    2624:	0c d0       	rcall	.+24     	; 0x263e <__divsf3x>
    2626:	48 c1       	rjmp	.+656    	; 0x28b8 <__fp_round>
    2628:	40 d1       	rcall	.+640    	; 0x28aa <__fp_pscB>
    262a:	40 f0       	brcs	.+16     	; 0x263c <__divsf3+0x18>
    262c:	37 d1       	rcall	.+622    	; 0x289c <__fp_pscA>
    262e:	30 f0       	brcs	.+12     	; 0x263c <__divsf3+0x18>
    2630:	21 f4       	brne	.+8      	; 0x263a <__divsf3+0x16>
    2632:	5f 3f       	cpi	r21, 0xFF	; 255
    2634:	19 f0       	breq	.+6      	; 0x263c <__divsf3+0x18>
    2636:	29 c1       	rjmp	.+594    	; 0x288a <__fp_inf>
    2638:	51 11       	cpse	r21, r1
    263a:	72 c1       	rjmp	.+740    	; 0x2920 <__fp_szero>
    263c:	2c c1       	rjmp	.+600    	; 0x2896 <__fp_nan>

0000263e <__divsf3x>:
    263e:	4d d1       	rcall	.+666    	; 0x28da <__fp_split3>
    2640:	98 f3       	brcs	.-26     	; 0x2628 <__divsf3+0x4>

00002642 <__divsf3_pse>:
    2642:	99 23       	and	r25, r25
    2644:	c9 f3       	breq	.-14     	; 0x2638 <__divsf3+0x14>
    2646:	55 23       	and	r21, r21
    2648:	b1 f3       	breq	.-20     	; 0x2636 <__divsf3+0x12>
    264a:	95 1b       	sub	r25, r21
    264c:	55 0b       	sbc	r21, r21
    264e:	bb 27       	eor	r27, r27
    2650:	aa 27       	eor	r26, r26
    2652:	62 17       	cp	r22, r18
    2654:	73 07       	cpc	r23, r19
    2656:	84 07       	cpc	r24, r20
    2658:	38 f0       	brcs	.+14     	; 0x2668 <__divsf3_pse+0x26>
    265a:	9f 5f       	subi	r25, 0xFF	; 255
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	22 0f       	add	r18, r18
    2660:	33 1f       	adc	r19, r19
    2662:	44 1f       	adc	r20, r20
    2664:	aa 1f       	adc	r26, r26
    2666:	a9 f3       	breq	.-22     	; 0x2652 <__divsf3_pse+0x10>
    2668:	33 d0       	rcall	.+102    	; 0x26d0 <__divsf3_pse+0x8e>
    266a:	0e 2e       	mov	r0, r30
    266c:	3a f0       	brmi	.+14     	; 0x267c <__divsf3_pse+0x3a>
    266e:	e0 e8       	ldi	r30, 0x80	; 128
    2670:	30 d0       	rcall	.+96     	; 0x26d2 <__divsf3_pse+0x90>
    2672:	91 50       	subi	r25, 0x01	; 1
    2674:	50 40       	sbci	r21, 0x00	; 0
    2676:	e6 95       	lsr	r30
    2678:	00 1c       	adc	r0, r0
    267a:	ca f7       	brpl	.-14     	; 0x266e <__divsf3_pse+0x2c>
    267c:	29 d0       	rcall	.+82     	; 0x26d0 <__divsf3_pse+0x8e>
    267e:	fe 2f       	mov	r31, r30
    2680:	27 d0       	rcall	.+78     	; 0x26d0 <__divsf3_pse+0x8e>
    2682:	66 0f       	add	r22, r22
    2684:	77 1f       	adc	r23, r23
    2686:	88 1f       	adc	r24, r24
    2688:	bb 1f       	adc	r27, r27
    268a:	26 17       	cp	r18, r22
    268c:	37 07       	cpc	r19, r23
    268e:	48 07       	cpc	r20, r24
    2690:	ab 07       	cpc	r26, r27
    2692:	b0 e8       	ldi	r27, 0x80	; 128
    2694:	09 f0       	breq	.+2      	; 0x2698 <__divsf3_pse+0x56>
    2696:	bb 0b       	sbc	r27, r27
    2698:	80 2d       	mov	r24, r0
    269a:	bf 01       	movw	r22, r30
    269c:	ff 27       	eor	r31, r31
    269e:	93 58       	subi	r25, 0x83	; 131
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	2a f0       	brmi	.+10     	; 0x26ae <__divsf3_pse+0x6c>
    26a4:	9e 3f       	cpi	r25, 0xFE	; 254
    26a6:	51 05       	cpc	r21, r1
    26a8:	68 f0       	brcs	.+26     	; 0x26c4 <__divsf3_pse+0x82>
    26aa:	ef c0       	rjmp	.+478    	; 0x288a <__fp_inf>
    26ac:	39 c1       	rjmp	.+626    	; 0x2920 <__fp_szero>
    26ae:	5f 3f       	cpi	r21, 0xFF	; 255
    26b0:	ec f3       	brlt	.-6      	; 0x26ac <__divsf3_pse+0x6a>
    26b2:	98 3e       	cpi	r25, 0xE8	; 232
    26b4:	dc f3       	brlt	.-10     	; 0x26ac <__divsf3_pse+0x6a>
    26b6:	86 95       	lsr	r24
    26b8:	77 95       	ror	r23
    26ba:	67 95       	ror	r22
    26bc:	b7 95       	ror	r27
    26be:	f7 95       	ror	r31
    26c0:	9f 5f       	subi	r25, 0xFF	; 255
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <__divsf3_pse+0x74>
    26c4:	88 0f       	add	r24, r24
    26c6:	91 1d       	adc	r25, r1
    26c8:	96 95       	lsr	r25
    26ca:	87 95       	ror	r24
    26cc:	97 f9       	bld	r25, 7
    26ce:	08 95       	ret
    26d0:	e1 e0       	ldi	r30, 0x01	; 1
    26d2:	66 0f       	add	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	bb 1f       	adc	r27, r27
    26da:	62 17       	cp	r22, r18
    26dc:	73 07       	cpc	r23, r19
    26de:	84 07       	cpc	r24, r20
    26e0:	ba 07       	cpc	r27, r26
    26e2:	20 f0       	brcs	.+8      	; 0x26ec <__divsf3_pse+0xaa>
    26e4:	62 1b       	sub	r22, r18
    26e6:	73 0b       	sbc	r23, r19
    26e8:	84 0b       	sbc	r24, r20
    26ea:	ba 0b       	sbc	r27, r26
    26ec:	ee 1f       	adc	r30, r30
    26ee:	88 f7       	brcc	.-30     	; 0x26d2 <__divsf3_pse+0x90>
    26f0:	e0 95       	com	r30
    26f2:	08 95       	ret

000026f4 <__fixunssfsi>:
    26f4:	fa d0       	rcall	.+500    	; 0x28ea <__fp_splitA>
    26f6:	88 f0       	brcs	.+34     	; 0x271a <__fixunssfsi+0x26>
    26f8:	9f 57       	subi	r25, 0x7F	; 127
    26fa:	90 f0       	brcs	.+36     	; 0x2720 <__fixunssfsi+0x2c>
    26fc:	b9 2f       	mov	r27, r25
    26fe:	99 27       	eor	r25, r25
    2700:	b7 51       	subi	r27, 0x17	; 23
    2702:	a0 f0       	brcs	.+40     	; 0x272c <__fixunssfsi+0x38>
    2704:	d1 f0       	breq	.+52     	; 0x273a <__fixunssfsi+0x46>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	1a f0       	brmi	.+6      	; 0x2716 <__fixunssfsi+0x22>
    2710:	ba 95       	dec	r27
    2712:	c9 f7       	brne	.-14     	; 0x2706 <__fixunssfsi+0x12>
    2714:	12 c0       	rjmp	.+36     	; 0x273a <__fixunssfsi+0x46>
    2716:	b1 30       	cpi	r27, 0x01	; 1
    2718:	81 f0       	breq	.+32     	; 0x273a <__fixunssfsi+0x46>
    271a:	01 d1       	rcall	.+514    	; 0x291e <__fp_zero>
    271c:	b1 e0       	ldi	r27, 0x01	; 1
    271e:	08 95       	ret
    2720:	fe c0       	rjmp	.+508    	; 0x291e <__fp_zero>
    2722:	67 2f       	mov	r22, r23
    2724:	78 2f       	mov	r23, r24
    2726:	88 27       	eor	r24, r24
    2728:	b8 5f       	subi	r27, 0xF8	; 248
    272a:	39 f0       	breq	.+14     	; 0x273a <__fixunssfsi+0x46>
    272c:	b9 3f       	cpi	r27, 0xF9	; 249
    272e:	cc f3       	brlt	.-14     	; 0x2722 <__fixunssfsi+0x2e>
    2730:	86 95       	lsr	r24
    2732:	77 95       	ror	r23
    2734:	67 95       	ror	r22
    2736:	b3 95       	inc	r27
    2738:	d9 f7       	brne	.-10     	; 0x2730 <__fixunssfsi+0x3c>
    273a:	3e f4       	brtc	.+14     	; 0x274a <__fixunssfsi+0x56>
    273c:	90 95       	com	r25
    273e:	80 95       	com	r24
    2740:	70 95       	com	r23
    2742:	61 95       	neg	r22
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	8f 4f       	sbci	r24, 0xFF	; 255
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	08 95       	ret

0000274c <__floatunsisf>:
    274c:	e8 94       	clt
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <__floatsisf+0x12>

00002750 <__floatsisf>:
    2750:	97 fb       	bst	r25, 7
    2752:	3e f4       	brtc	.+14     	; 0x2762 <__floatsisf+0x12>
    2754:	90 95       	com	r25
    2756:	80 95       	com	r24
    2758:	70 95       	com	r23
    275a:	61 95       	neg	r22
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	8f 4f       	sbci	r24, 0xFF	; 255
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	99 23       	and	r25, r25
    2764:	a9 f0       	breq	.+42     	; 0x2790 <__floatsisf+0x40>
    2766:	f9 2f       	mov	r31, r25
    2768:	96 e9       	ldi	r25, 0x96	; 150
    276a:	bb 27       	eor	r27, r27
    276c:	93 95       	inc	r25
    276e:	f6 95       	lsr	r31
    2770:	87 95       	ror	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b7 95       	ror	r27
    2778:	f1 11       	cpse	r31, r1
    277a:	f8 cf       	rjmp	.-16     	; 0x276c <__floatsisf+0x1c>
    277c:	fa f4       	brpl	.+62     	; 0x27bc <__floatsisf+0x6c>
    277e:	bb 0f       	add	r27, r27
    2780:	11 f4       	brne	.+4      	; 0x2786 <__floatsisf+0x36>
    2782:	60 ff       	sbrs	r22, 0
    2784:	1b c0       	rjmp	.+54     	; 0x27bc <__floatsisf+0x6c>
    2786:	6f 5f       	subi	r22, 0xFF	; 255
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	8f 4f       	sbci	r24, 0xFF	; 255
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	16 c0       	rjmp	.+44     	; 0x27bc <__floatsisf+0x6c>
    2790:	88 23       	and	r24, r24
    2792:	11 f0       	breq	.+4      	; 0x2798 <__floatsisf+0x48>
    2794:	96 e9       	ldi	r25, 0x96	; 150
    2796:	11 c0       	rjmp	.+34     	; 0x27ba <__floatsisf+0x6a>
    2798:	77 23       	and	r23, r23
    279a:	21 f0       	breq	.+8      	; 0x27a4 <__floatsisf+0x54>
    279c:	9e e8       	ldi	r25, 0x8E	; 142
    279e:	87 2f       	mov	r24, r23
    27a0:	76 2f       	mov	r23, r22
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <__floatsisf+0x5e>
    27a4:	66 23       	and	r22, r22
    27a6:	71 f0       	breq	.+28     	; 0x27c4 <__floatsisf+0x74>
    27a8:	96 e8       	ldi	r25, 0x86	; 134
    27aa:	86 2f       	mov	r24, r22
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	2a f0       	brmi	.+10     	; 0x27bc <__floatsisf+0x6c>
    27b2:	9a 95       	dec	r25
    27b4:	66 0f       	add	r22, r22
    27b6:	77 1f       	adc	r23, r23
    27b8:	88 1f       	adc	r24, r24
    27ba:	da f7       	brpl	.-10     	; 0x27b2 <__floatsisf+0x62>
    27bc:	88 0f       	add	r24, r24
    27be:	96 95       	lsr	r25
    27c0:	87 95       	ror	r24
    27c2:	97 f9       	bld	r25, 7
    27c4:	08 95       	ret

000027c6 <__floatundisf>:
    27c6:	e8 94       	clt

000027c8 <__fp_di2sf>:
    27c8:	f9 2f       	mov	r31, r25
    27ca:	96 eb       	ldi	r25, 0xB6	; 182
    27cc:	ff 23       	and	r31, r31
    27ce:	81 f0       	breq	.+32     	; 0x27f0 <__fp_di2sf+0x28>
    27d0:	12 16       	cp	r1, r18
    27d2:	13 06       	cpc	r1, r19
    27d4:	14 06       	cpc	r1, r20
    27d6:	44 0b       	sbc	r20, r20
    27d8:	93 95       	inc	r25
    27da:	f6 95       	lsr	r31
    27dc:	87 95       	ror	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	57 95       	ror	r21
    27e4:	40 40       	sbci	r20, 0x00	; 0
    27e6:	ff 23       	and	r31, r31
    27e8:	b9 f7       	brne	.-18     	; 0x27d8 <__fp_di2sf+0x10>
    27ea:	1b c0       	rjmp	.+54     	; 0x2822 <__fp_di2sf+0x5a>
    27ec:	99 27       	eor	r25, r25
    27ee:	08 95       	ret
    27f0:	88 23       	and	r24, r24
    27f2:	51 f4       	brne	.+20     	; 0x2808 <__fp_di2sf+0x40>
    27f4:	98 50       	subi	r25, 0x08	; 8
    27f6:	d2 f7       	brpl	.-12     	; 0x27ec <__fp_di2sf+0x24>
    27f8:	87 2b       	or	r24, r23
    27fa:	76 2f       	mov	r23, r22
    27fc:	65 2f       	mov	r22, r21
    27fe:	54 2f       	mov	r21, r20
    2800:	43 2f       	mov	r20, r19
    2802:	32 2f       	mov	r19, r18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	b1 f3       	breq	.-20     	; 0x27f4 <__fp_di2sf+0x2c>
    2808:	12 16       	cp	r1, r18
    280a:	13 06       	cpc	r1, r19
    280c:	14 06       	cpc	r1, r20
    280e:	44 0b       	sbc	r20, r20
    2810:	88 23       	and	r24, r24
    2812:	3a f0       	brmi	.+14     	; 0x2822 <__fp_di2sf+0x5a>
    2814:	9a 95       	dec	r25
    2816:	44 0f       	add	r20, r20
    2818:	55 1f       	adc	r21, r21
    281a:	66 1f       	adc	r22, r22
    281c:	77 1f       	adc	r23, r23
    281e:	88 1f       	adc	r24, r24
    2820:	ca f7       	brpl	.-14     	; 0x2814 <__fp_di2sf+0x4c>
    2822:	55 23       	and	r21, r21
    2824:	4a f4       	brpl	.+18     	; 0x2838 <__fp_di2sf+0x70>
    2826:	44 0f       	add	r20, r20
    2828:	55 1f       	adc	r21, r21
    282a:	11 f4       	brne	.+4      	; 0x2830 <__fp_di2sf+0x68>
    282c:	60 ff       	sbrs	r22, 0
    282e:	04 c0       	rjmp	.+8      	; 0x2838 <__fp_di2sf+0x70>
    2830:	6f 5f       	subi	r22, 0xFF	; 255
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	8f 4f       	sbci	r24, 0xFF	; 255
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	88 0f       	add	r24, r24
    283a:	96 95       	lsr	r25
    283c:	87 95       	ror	r24
    283e:	97 f9       	bld	r25, 7
    2840:	08 95       	ret

00002842 <__fp_cmp>:
    2842:	99 0f       	add	r25, r25
    2844:	00 08       	sbc	r0, r0
    2846:	55 0f       	add	r21, r21
    2848:	aa 0b       	sbc	r26, r26
    284a:	e0 e8       	ldi	r30, 0x80	; 128
    284c:	fe ef       	ldi	r31, 0xFE	; 254
    284e:	16 16       	cp	r1, r22
    2850:	17 06       	cpc	r1, r23
    2852:	e8 07       	cpc	r30, r24
    2854:	f9 07       	cpc	r31, r25
    2856:	c0 f0       	brcs	.+48     	; 0x2888 <__fp_cmp+0x46>
    2858:	12 16       	cp	r1, r18
    285a:	13 06       	cpc	r1, r19
    285c:	e4 07       	cpc	r30, r20
    285e:	f5 07       	cpc	r31, r21
    2860:	98 f0       	brcs	.+38     	; 0x2888 <__fp_cmp+0x46>
    2862:	62 1b       	sub	r22, r18
    2864:	73 0b       	sbc	r23, r19
    2866:	84 0b       	sbc	r24, r20
    2868:	95 0b       	sbc	r25, r21
    286a:	39 f4       	brne	.+14     	; 0x287a <__fp_cmp+0x38>
    286c:	0a 26       	eor	r0, r26
    286e:	61 f0       	breq	.+24     	; 0x2888 <__fp_cmp+0x46>
    2870:	23 2b       	or	r18, r19
    2872:	24 2b       	or	r18, r20
    2874:	25 2b       	or	r18, r21
    2876:	21 f4       	brne	.+8      	; 0x2880 <__fp_cmp+0x3e>
    2878:	08 95       	ret
    287a:	0a 26       	eor	r0, r26
    287c:	09 f4       	brne	.+2      	; 0x2880 <__fp_cmp+0x3e>
    287e:	a1 40       	sbci	r26, 0x01	; 1
    2880:	a6 95       	lsr	r26
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	81 1d       	adc	r24, r1
    2886:	81 1d       	adc	r24, r1
    2888:	08 95       	ret

0000288a <__fp_inf>:
    288a:	97 f9       	bld	r25, 7
    288c:	9f 67       	ori	r25, 0x7F	; 127
    288e:	80 e8       	ldi	r24, 0x80	; 128
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	08 95       	ret

00002896 <__fp_nan>:
    2896:	9f ef       	ldi	r25, 0xFF	; 255
    2898:	80 ec       	ldi	r24, 0xC0	; 192
    289a:	08 95       	ret

0000289c <__fp_pscA>:
    289c:	00 24       	eor	r0, r0
    289e:	0a 94       	dec	r0
    28a0:	16 16       	cp	r1, r22
    28a2:	17 06       	cpc	r1, r23
    28a4:	18 06       	cpc	r1, r24
    28a6:	09 06       	cpc	r0, r25
    28a8:	08 95       	ret

000028aa <__fp_pscB>:
    28aa:	00 24       	eor	r0, r0
    28ac:	0a 94       	dec	r0
    28ae:	12 16       	cp	r1, r18
    28b0:	13 06       	cpc	r1, r19
    28b2:	14 06       	cpc	r1, r20
    28b4:	05 06       	cpc	r0, r21
    28b6:	08 95       	ret

000028b8 <__fp_round>:
    28b8:	09 2e       	mov	r0, r25
    28ba:	03 94       	inc	r0
    28bc:	00 0c       	add	r0, r0
    28be:	11 f4       	brne	.+4      	; 0x28c4 <__fp_round+0xc>
    28c0:	88 23       	and	r24, r24
    28c2:	52 f0       	brmi	.+20     	; 0x28d8 <__fp_round+0x20>
    28c4:	bb 0f       	add	r27, r27
    28c6:	40 f4       	brcc	.+16     	; 0x28d8 <__fp_round+0x20>
    28c8:	bf 2b       	or	r27, r31
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <__fp_round+0x18>
    28cc:	60 ff       	sbrs	r22, 0
    28ce:	04 c0       	rjmp	.+8      	; 0x28d8 <__fp_round+0x20>
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	7f 4f       	sbci	r23, 0xFF	; 255
    28d4:	8f 4f       	sbci	r24, 0xFF	; 255
    28d6:	9f 4f       	sbci	r25, 0xFF	; 255
    28d8:	08 95       	ret

000028da <__fp_split3>:
    28da:	57 fd       	sbrc	r21, 7
    28dc:	90 58       	subi	r25, 0x80	; 128
    28de:	44 0f       	add	r20, r20
    28e0:	55 1f       	adc	r21, r21
    28e2:	59 f0       	breq	.+22     	; 0x28fa <__fp_splitA+0x10>
    28e4:	5f 3f       	cpi	r21, 0xFF	; 255
    28e6:	71 f0       	breq	.+28     	; 0x2904 <__fp_splitA+0x1a>
    28e8:	47 95       	ror	r20

000028ea <__fp_splitA>:
    28ea:	88 0f       	add	r24, r24
    28ec:	97 fb       	bst	r25, 7
    28ee:	99 1f       	adc	r25, r25
    28f0:	61 f0       	breq	.+24     	; 0x290a <__fp_splitA+0x20>
    28f2:	9f 3f       	cpi	r25, 0xFF	; 255
    28f4:	79 f0       	breq	.+30     	; 0x2914 <__fp_splitA+0x2a>
    28f6:	87 95       	ror	r24
    28f8:	08 95       	ret
    28fa:	12 16       	cp	r1, r18
    28fc:	13 06       	cpc	r1, r19
    28fe:	14 06       	cpc	r1, r20
    2900:	55 1f       	adc	r21, r21
    2902:	f2 cf       	rjmp	.-28     	; 0x28e8 <__fp_split3+0xe>
    2904:	46 95       	lsr	r20
    2906:	f1 df       	rcall	.-30     	; 0x28ea <__fp_splitA>
    2908:	08 c0       	rjmp	.+16     	; 0x291a <__fp_splitA+0x30>
    290a:	16 16       	cp	r1, r22
    290c:	17 06       	cpc	r1, r23
    290e:	18 06       	cpc	r1, r24
    2910:	99 1f       	adc	r25, r25
    2912:	f1 cf       	rjmp	.-30     	; 0x28f6 <__fp_splitA+0xc>
    2914:	86 95       	lsr	r24
    2916:	71 05       	cpc	r23, r1
    2918:	61 05       	cpc	r22, r1
    291a:	08 94       	sec
    291c:	08 95       	ret

0000291e <__fp_zero>:
    291e:	e8 94       	clt

00002920 <__fp_szero>:
    2920:	bb 27       	eor	r27, r27
    2922:	66 27       	eor	r22, r22
    2924:	77 27       	eor	r23, r23
    2926:	cb 01       	movw	r24, r22
    2928:	97 f9       	bld	r25, 7
    292a:	08 95       	ret

0000292c <__gesf2>:
    292c:	8a df       	rcall	.-236    	; 0x2842 <__fp_cmp>
    292e:	08 f4       	brcc	.+2      	; 0x2932 <__gesf2+0x6>
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	08 95       	ret

00002934 <__mulsf3>:
    2934:	0b d0       	rcall	.+22     	; 0x294c <__mulsf3x>
    2936:	c0 cf       	rjmp	.-128    	; 0x28b8 <__fp_round>
    2938:	b1 df       	rcall	.-158    	; 0x289c <__fp_pscA>
    293a:	28 f0       	brcs	.+10     	; 0x2946 <__mulsf3+0x12>
    293c:	b6 df       	rcall	.-148    	; 0x28aa <__fp_pscB>
    293e:	18 f0       	brcs	.+6      	; 0x2946 <__mulsf3+0x12>
    2940:	95 23       	and	r25, r21
    2942:	09 f0       	breq	.+2      	; 0x2946 <__mulsf3+0x12>
    2944:	a2 cf       	rjmp	.-188    	; 0x288a <__fp_inf>
    2946:	a7 cf       	rjmp	.-178    	; 0x2896 <__fp_nan>
    2948:	11 24       	eor	r1, r1
    294a:	ea cf       	rjmp	.-44     	; 0x2920 <__fp_szero>

0000294c <__mulsf3x>:
    294c:	c6 df       	rcall	.-116    	; 0x28da <__fp_split3>
    294e:	a0 f3       	brcs	.-24     	; 0x2938 <__mulsf3+0x4>

00002950 <__mulsf3_pse>:
    2950:	95 9f       	mul	r25, r21
    2952:	d1 f3       	breq	.-12     	; 0x2948 <__mulsf3+0x14>
    2954:	95 0f       	add	r25, r21
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	55 1f       	adc	r21, r21
    295a:	62 9f       	mul	r22, r18
    295c:	f0 01       	movw	r30, r0
    295e:	72 9f       	mul	r23, r18
    2960:	bb 27       	eor	r27, r27
    2962:	f0 0d       	add	r31, r0
    2964:	b1 1d       	adc	r27, r1
    2966:	63 9f       	mul	r22, r19
    2968:	aa 27       	eor	r26, r26
    296a:	f0 0d       	add	r31, r0
    296c:	b1 1d       	adc	r27, r1
    296e:	aa 1f       	adc	r26, r26
    2970:	64 9f       	mul	r22, r20
    2972:	66 27       	eor	r22, r22
    2974:	b0 0d       	add	r27, r0
    2976:	a1 1d       	adc	r26, r1
    2978:	66 1f       	adc	r22, r22
    297a:	82 9f       	mul	r24, r18
    297c:	22 27       	eor	r18, r18
    297e:	b0 0d       	add	r27, r0
    2980:	a1 1d       	adc	r26, r1
    2982:	62 1f       	adc	r22, r18
    2984:	73 9f       	mul	r23, r19
    2986:	b0 0d       	add	r27, r0
    2988:	a1 1d       	adc	r26, r1
    298a:	62 1f       	adc	r22, r18
    298c:	83 9f       	mul	r24, r19
    298e:	a0 0d       	add	r26, r0
    2990:	61 1d       	adc	r22, r1
    2992:	22 1f       	adc	r18, r18
    2994:	74 9f       	mul	r23, r20
    2996:	33 27       	eor	r19, r19
    2998:	a0 0d       	add	r26, r0
    299a:	61 1d       	adc	r22, r1
    299c:	23 1f       	adc	r18, r19
    299e:	84 9f       	mul	r24, r20
    29a0:	60 0d       	add	r22, r0
    29a2:	21 1d       	adc	r18, r1
    29a4:	82 2f       	mov	r24, r18
    29a6:	76 2f       	mov	r23, r22
    29a8:	6a 2f       	mov	r22, r26
    29aa:	11 24       	eor	r1, r1
    29ac:	9f 57       	subi	r25, 0x7F	; 127
    29ae:	50 40       	sbci	r21, 0x00	; 0
    29b0:	8a f0       	brmi	.+34     	; 0x29d4 <__mulsf3_pse+0x84>
    29b2:	e1 f0       	breq	.+56     	; 0x29ec <__mulsf3_pse+0x9c>
    29b4:	88 23       	and	r24, r24
    29b6:	4a f0       	brmi	.+18     	; 0x29ca <__mulsf3_pse+0x7a>
    29b8:	ee 0f       	add	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	bb 1f       	adc	r27, r27
    29be:	66 1f       	adc	r22, r22
    29c0:	77 1f       	adc	r23, r23
    29c2:	88 1f       	adc	r24, r24
    29c4:	91 50       	subi	r25, 0x01	; 1
    29c6:	50 40       	sbci	r21, 0x00	; 0
    29c8:	a9 f7       	brne	.-22     	; 0x29b4 <__mulsf3_pse+0x64>
    29ca:	9e 3f       	cpi	r25, 0xFE	; 254
    29cc:	51 05       	cpc	r21, r1
    29ce:	70 f0       	brcs	.+28     	; 0x29ec <__mulsf3_pse+0x9c>
    29d0:	5c cf       	rjmp	.-328    	; 0x288a <__fp_inf>
    29d2:	a6 cf       	rjmp	.-180    	; 0x2920 <__fp_szero>
    29d4:	5f 3f       	cpi	r21, 0xFF	; 255
    29d6:	ec f3       	brlt	.-6      	; 0x29d2 <__mulsf3_pse+0x82>
    29d8:	98 3e       	cpi	r25, 0xE8	; 232
    29da:	dc f3       	brlt	.-10     	; 0x29d2 <__mulsf3_pse+0x82>
    29dc:	86 95       	lsr	r24
    29de:	77 95       	ror	r23
    29e0:	67 95       	ror	r22
    29e2:	b7 95       	ror	r27
    29e4:	f7 95       	ror	r31
    29e6:	e7 95       	ror	r30
    29e8:	9f 5f       	subi	r25, 0xFF	; 255
    29ea:	c1 f7       	brne	.-16     	; 0x29dc <__mulsf3_pse+0x8c>
    29ec:	fe 2b       	or	r31, r30
    29ee:	88 0f       	add	r24, r24
    29f0:	91 1d       	adc	r25, r1
    29f2:	96 95       	lsr	r25
    29f4:	87 95       	ror	r24
    29f6:	97 f9       	bld	r25, 7
    29f8:	08 95       	ret

000029fa <__mulsi3>:
    29fa:	62 9f       	mul	r22, r18
    29fc:	d0 01       	movw	r26, r0
    29fe:	73 9f       	mul	r23, r19
    2a00:	f0 01       	movw	r30, r0
    2a02:	82 9f       	mul	r24, r18
    2a04:	e0 0d       	add	r30, r0
    2a06:	f1 1d       	adc	r31, r1
    2a08:	64 9f       	mul	r22, r20
    2a0a:	e0 0d       	add	r30, r0
    2a0c:	f1 1d       	adc	r31, r1
    2a0e:	92 9f       	mul	r25, r18
    2a10:	f0 0d       	add	r31, r0
    2a12:	83 9f       	mul	r24, r19
    2a14:	f0 0d       	add	r31, r0
    2a16:	74 9f       	mul	r23, r20
    2a18:	f0 0d       	add	r31, r0
    2a1a:	65 9f       	mul	r22, r21
    2a1c:	f0 0d       	add	r31, r0
    2a1e:	99 27       	eor	r25, r25
    2a20:	72 9f       	mul	r23, r18
    2a22:	b0 0d       	add	r27, r0
    2a24:	e1 1d       	adc	r30, r1
    2a26:	f9 1f       	adc	r31, r25
    2a28:	63 9f       	mul	r22, r19
    2a2a:	b0 0d       	add	r27, r0
    2a2c:	e1 1d       	adc	r30, r1
    2a2e:	f9 1f       	adc	r31, r25
    2a30:	bd 01       	movw	r22, r26
    2a32:	cf 01       	movw	r24, r30
    2a34:	11 24       	eor	r1, r1
    2a36:	08 95       	ret

00002a38 <__udivmodsi4>:
    2a38:	a1 e2       	ldi	r26, 0x21	; 33
    2a3a:	1a 2e       	mov	r1, r26
    2a3c:	aa 1b       	sub	r26, r26
    2a3e:	bb 1b       	sub	r27, r27
    2a40:	fd 01       	movw	r30, r26
    2a42:	0d c0       	rjmp	.+26     	; 0x2a5e <__udivmodsi4_ep>

00002a44 <__udivmodsi4_loop>:
    2a44:	aa 1f       	adc	r26, r26
    2a46:	bb 1f       	adc	r27, r27
    2a48:	ee 1f       	adc	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	a2 17       	cp	r26, r18
    2a4e:	b3 07       	cpc	r27, r19
    2a50:	e4 07       	cpc	r30, r20
    2a52:	f5 07       	cpc	r31, r21
    2a54:	20 f0       	brcs	.+8      	; 0x2a5e <__udivmodsi4_ep>
    2a56:	a2 1b       	sub	r26, r18
    2a58:	b3 0b       	sbc	r27, r19
    2a5a:	e4 0b       	sbc	r30, r20
    2a5c:	f5 0b       	sbc	r31, r21

00002a5e <__udivmodsi4_ep>:
    2a5e:	66 1f       	adc	r22, r22
    2a60:	77 1f       	adc	r23, r23
    2a62:	88 1f       	adc	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	1a 94       	dec	r1
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <__udivmodsi4_loop>
    2a6a:	60 95       	com	r22
    2a6c:	70 95       	com	r23
    2a6e:	80 95       	com	r24
    2a70:	90 95       	com	r25
    2a72:	9b 01       	movw	r18, r22
    2a74:	ac 01       	movw	r20, r24
    2a76:	bd 01       	movw	r22, r26
    2a78:	cf 01       	movw	r24, r30
    2a7a:	08 95       	ret

00002a7c <_exit>:
    2a7c:	f8 94       	cli

00002a7e <__stop_program>:
    2a7e:	ff cf       	rjmp	.-2      	; 0x2a7e <__stop_program>
