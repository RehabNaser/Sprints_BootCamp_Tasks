
Obstacle_Avoidance_Car_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000204c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000204c  000020e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00800090  00800090  00002110  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00004fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e5f  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  000080bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118c  00000000  00000000  00008ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000a180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001098  00000000  00000000  0000a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b7c  00000000  00000000  0000b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000d508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_5>
      18:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 06 	call	0xc86	; 0xc86 <main>
      8a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRASH_MainFunction>:
-----------------------------------*/
/**
* @brief: This is the main function of CRASH module.
*/
extern void CRASH_MainFunction(void)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
   ERROR_STATE_t CRASH_MainErrorState;
   
   /* Call Distance Getter Function */
   SENSING_Get(&gd64_distance);
      9a:	80 e9       	ldi	r24, 0x90	; 144
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 a3 01 	call	0x346	; 0x346 <SENSING_Get>
static ERROR_STATE_t CRASH_Logic(void)
{
   static Enu_LogicStateMachine u8_CurrentState = CRASH_Ready;
   static Enu_LogicStateMachine u8_PreviousState = CRASH_Ready;

   if(gd64_distance > gd64_UpperDistanceLimit)
      a2:	c0 90 90 00 	lds	r12, 0x0090
      a6:	d0 90 91 00 	lds	r13, 0x0091
      aa:	e0 90 92 00 	lds	r14, 0x0092
      ae:	f0 90 93 00 	lds	r15, 0x0093
      b2:	c7 01       	movw	r24, r14
      b4:	b6 01       	movw	r22, r12
      b6:	20 91 64 00 	lds	r18, 0x0064
      ba:	30 91 65 00 	lds	r19, 0x0065
      be:	40 91 66 00 	lds	r20, 0x0066
      c2:	50 91 67 00 	lds	r21, 0x0067
      c6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gesf2>
      ca:	18 16       	cp	r1, r24
      cc:	24 f4       	brge	.+8      	; 0xd6 <CRASH_MainFunction+0x44>
   {
      u8_CurrentState = CRASH_Forward;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 97 00 	sts	0x0097, r24
      d4:	15 c0       	rjmp	.+42     	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else if (gd64_distance < gd64_LowerDistanceLimit)
      d6:	c7 01       	movw	r24, r14
      d8:	b6 01       	movw	r22, r12
      da:	20 91 60 00 	lds	r18, 0x0060
      de:	30 91 61 00 	lds	r19, 0x0061
      e2:	40 91 62 00 	lds	r20, 0x0062
      e6:	50 91 63 00 	lds	r21, 0x0063
      ea:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	24 f4       	brge	.+8      	; 0xfa <CRASH_MainFunction+0x68>
   {
      u8_CurrentState = CRASH_Backward;
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 97 00 	sts	0x0097, r24
      f8:	03 c0       	rjmp	.+6      	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else
   {
      u8_CurrentState = CRASH_RotateRight;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 97 00 	sts	0x0097, r24
   }
   
   if(u8_PreviousState != u8_CurrentState)
     100:	80 91 97 00 	lds	r24, 0x0097
     104:	90 91 98 00 	lds	r25, 0x0098
     108:	98 17       	cp	r25, r24
     10a:	59 f1       	breq	.+86     	; 0x162 <CRASH_MainFunction+0xd0>
   {
      switch(u8_CurrentState)
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	81 f0       	breq	.+32     	; 0x130 <CRASH_MainFunction+0x9e>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	d9 f0       	breq	.+54     	; 0x14a <CRASH_MainFunction+0xb8>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	69 f5       	brne	.+90     	; 0x172 <CRASH_MainFunction+0xe0>
      {
         case CRASH_Forward:
            gu8_CarDirection = STEERING_FORWARD;
     118:	10 92 94 00 	sts	0x0094, r1
            gu8_CarSpeed = 15;
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 96 00 	sts	0x0096, r25
     124:	80 93 95 00 	sts	0x0095, r24
            u8_PreviousState = u8_CurrentState;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 98 00 	sts	0x0098, r24
     12e:	19 c0       	rjmp	.+50     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_Backward:
            gu8_CarDirection = STEERING_BACKWARD;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 94 00 	sts	0x0094, r24
            gu8_CarSpeed = 15;
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 96 00 	sts	0x0096, r25
     13e:	80 93 95 00 	sts	0x0095, r24
            u8_PreviousState = u8_CurrentState;
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 98 00 	sts	0x0098, r24
     148:	0c c0       	rjmp	.+24     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_RotateRight:
            gu8_CarDirection = STEERING_RIGHT;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 94 00 	sts	0x0094, r24
            gu8_CarSpeed = 100;
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 96 00 	sts	0x0096, r25
     158:	80 93 95 00 	sts	0x0095, r24
            u8_PreviousState = u8_CurrentState;
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	80 93 98 00 	sts	0x0098, r24
   CRASH_MainErrorState = CRASH_Logic();
   
   /* Call Speed and Direction Setters */
   if(ERROR_OK == CRASH_MainErrorState)
   {
      STEERING_Set(gu8_CarDirection, gu8_CarSpeed);
     162:	60 91 95 00 	lds	r22, 0x0095
     166:	70 91 96 00 	lds	r23, 0x0096
     16a:	80 91 94 00 	lds	r24, 0x0094
     16e:	0e 94 18 02 	call	0x430	; 0x430 <STEERING_Set>
   }
}
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <REALTIMEMONITORING_MainFunction>:
uint32_t Average_CPU_LOAD = 0;
uint32_t AverageCounter = 0;
uint32_t AccumlationOfCPULoad = 0;
void __vector_5(void)__attribute__((signal,used));
void REALTIMEMONITORING_MainFunction(void)
{
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
	static uint8_t State = OperationStarted;
	switch(State)
     180:	80 91 68 00 	lds	r24, 0x0068
     184:	88 23       	and	r24, r24
     186:	59 f0       	breq	.+22     	; 0x19e <REALTIMEMONITORING_MainFunction+0x22>
     188:	8f 3f       	cpi	r24, 0xFF	; 255
     18a:	09 f0       	breq	.+2      	; 0x18e <REALTIMEMONITORING_MainFunction+0x12>
     18c:	8e c0       	rjmp	.+284    	; 0x2aa <REALTIMEMONITORING_MainFunction+0x12e>
	{
		case OperationStarted:
		TIMSK |= 1<<6;/*Enable interrupt*/
     18e:	89 b7       	in	r24, 0x39	; 57
     190:	80 64       	ori	r24, 0x40	; 64
     192:	89 bf       	out	0x39, r24	; 57
		TCCR2 = 0X03;/*prescalar 32*/
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	85 bd       	out	0x25, r24	; 37
		State = CALCULATION;
     198:	10 92 68 00 	sts	0x0068, r1
		break;
     19c:	86 c0       	rjmp	.+268    	; 0x2aa <REALTIMEMONITORING_MainFunction+0x12e>
		case CALCULATION:
		Counter += TCNT2*2;
     19e:	44 b5       	in	r20, 0x24	; 36
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	66 27       	eor	r22, r22
     1a8:	57 fd       	sbrc	r21, 7
     1aa:	60 95       	com	r22
     1ac:	76 2f       	mov	r23, r22
     1ae:	80 91 a9 00 	lds	r24, 0x00A9
     1b2:	90 91 aa 00 	lds	r25, 0x00AA
     1b6:	a0 91 ab 00 	lds	r26, 0x00AB
     1ba:	b0 91 ac 00 	lds	r27, 0x00AC
     1be:	8a 01       	movw	r16, r20
     1c0:	9b 01       	movw	r18, r22
     1c2:	08 0f       	add	r16, r24
     1c4:	19 1f       	adc	r17, r25
     1c6:	2a 1f       	adc	r18, r26
     1c8:	3b 1f       	adc	r19, r27
     1ca:	c9 01       	movw	r24, r18
     1cc:	b8 01       	movw	r22, r16
		CPU_LOAD = (uint32_t)((uint32_t)(Counter*100) / (uint32_t)WINDOWTIMEINMICROSEC);
     1ce:	24 e6       	ldi	r18, 0x64	; 100
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsi3>
     1da:	2a ef       	ldi	r18, 0xFA	; 250
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 02 10 	call	0x2004	; 0x2004 <__udivmodsi4>
     1e6:	89 01       	movw	r16, r18
     1e8:	9a 01       	movw	r18, r20
     1ea:	00 93 a5 00 	sts	0x00A5, r16
     1ee:	10 93 a6 00 	sts	0x00A6, r17
     1f2:	20 93 a7 00 	sts	0x00A7, r18
     1f6:	30 93 a8 00 	sts	0x00A8, r19
		AccumlationOfCPULoad += CPU_LOAD;
     1fa:	80 91 99 00 	lds	r24, 0x0099
     1fe:	90 91 9a 00 	lds	r25, 0x009A
     202:	a0 91 9b 00 	lds	r26, 0x009B
     206:	b0 91 9c 00 	lds	r27, 0x009C
     20a:	08 0f       	add	r16, r24
     20c:	19 1f       	adc	r17, r25
     20e:	2a 1f       	adc	r18, r26
     210:	3b 1f       	adc	r19, r27
     212:	00 93 99 00 	sts	0x0099, r16
     216:	10 93 9a 00 	sts	0x009A, r17
     21a:	20 93 9b 00 	sts	0x009B, r18
     21e:	30 93 9c 00 	sts	0x009C, r19
		AverageCounter++;
     222:	80 91 9d 00 	lds	r24, 0x009D
     226:	90 91 9e 00 	lds	r25, 0x009E
     22a:	a0 91 9f 00 	lds	r26, 0x009F
     22e:	b0 91 a0 00 	lds	r27, 0x00A0
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	a1 1d       	adc	r26, r1
     236:	b1 1d       	adc	r27, r1
     238:	80 93 9d 00 	sts	0x009D, r24
     23c:	90 93 9e 00 	sts	0x009E, r25
     240:	a0 93 9f 00 	sts	0x009F, r26
     244:	b0 93 a0 00 	sts	0x00A0, r27
		if(AverageCounter == NUMBEROFITERATIONSFORAVERAGE)
     248:	80 38       	cpi	r24, 0x80	; 128
     24a:	48 e3       	ldi	r20, 0x38	; 56
     24c:	94 07       	cpc	r25, r20
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	a4 07       	cpc	r26, r20
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	b4 07       	cpc	r27, r20
     256:	01 f5       	brne	.+64     	; 0x298 <REALTIMEMONITORING_MainFunction+0x11c>
		{
			AverageCounter = 0;
     258:	10 92 9d 00 	sts	0x009D, r1
     25c:	10 92 9e 00 	sts	0x009E, r1
     260:	10 92 9f 00 	sts	0x009F, r1
     264:	10 92 a0 00 	sts	0x00A0, r1
			Average_CPU_LOAD = AccumlationOfCPULoad/NUMBEROFITERATIONSFORAVERAGE;
     268:	c9 01       	movw	r24, r18
     26a:	b8 01       	movw	r22, r16
     26c:	20 e8       	ldi	r18, 0x80	; 128
     26e:	38 e3       	ldi	r19, 0x38	; 56
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	0e 94 02 10 	call	0x2004	; 0x2004 <__udivmodsi4>
     278:	20 93 a1 00 	sts	0x00A1, r18
     27c:	30 93 a2 00 	sts	0x00A2, r19
     280:	40 93 a3 00 	sts	0x00A3, r20
     284:	50 93 a4 00 	sts	0x00A4, r21
			AccumlationOfCPULoad = 0;
     288:	10 92 99 00 	sts	0x0099, r1
     28c:	10 92 9a 00 	sts	0x009A, r1
     290:	10 92 9b 00 	sts	0x009B, r1
     294:	10 92 9c 00 	sts	0x009C, r1
		} 
		Counter = 0;
     298:	10 92 a9 00 	sts	0x00A9, r1
     29c:	10 92 aa 00 	sts	0x00AA, r1
     2a0:	10 92 ab 00 	sts	0x00AB, r1
     2a4:	10 92 ac 00 	sts	0x00AC, r1
		TCNT2 = 0;
     2a8:	14 bc       	out	0x24, r1	; 36
		break;
		default:
		break;
	}
}
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <__vector_5>:
void __vector_5(void) {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
	Counter += 256*2;
     2c2:	80 91 a9 00 	lds	r24, 0x00A9
     2c6:	90 91 aa 00 	lds	r25, 0x00AA
     2ca:	a0 91 ab 00 	lds	r26, 0x00AB
     2ce:	b0 91 ac 00 	lds	r27, 0x00AC
     2d2:	80 50       	subi	r24, 0x00	; 0
     2d4:	9e 4f       	sbci	r25, 0xFE	; 254
     2d6:	af 4f       	sbci	r26, 0xFF	; 255
     2d8:	bf 4f       	sbci	r27, 0xFF	; 255
     2da:	80 93 a9 00 	sts	0x00A9, r24
     2de:	90 93 aa 00 	sts	0x00AA, r25
     2e2:	a0 93 ab 00 	sts	0x00AB, r26
     2e6:	b0 93 ac 00 	sts	0x00AC, r27
     2ea:	bf 91       	pop	r27
     2ec:	af 91       	pop	r26
     2ee:	9f 91       	pop	r25
     2f0:	8f 91       	pop	r24
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <SENSING_MainFunction>:
	u8_ErrorState = USONIC_Init();
	return u8_ErrorState;
}

void SENSING_MainFunction(void)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	00 d0       	rcall	.+0      	; 0x302 <SENSING_MainFunction+0x6>
     302:	00 d0       	rcall	.+0      	; 0x304 <SENSING_MainFunction+0x8>
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     308:	80 91 ad 00 	lds	r24, 0x00AD
     30c:	88 23       	and	r24, r24
     30e:	41 f4       	brne	.+16     	; 0x320 <SENSING_MainFunction+0x24>

static ERROR_STATE_t SENSING_Init(void);
static ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
     310:	0e 94 2e 04 	call	0x85c	; 0x85c <USONIC_Init>
void SENSING_MainFunction(void)
{
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==SENSING_Init()){
     314:	88 23       	and	r24, r24
     316:	81 f4       	brne	.+32     	; 0x338 <SENSING_MainFunction+0x3c>
			u8_InitFlag=INIT;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 ad 00 	sts	0x00AD, r24
     31e:	0c c0       	rjmp	.+24     	; 0x338 <SENSING_MainFunction+0x3c>
		}
	}
	else
	{
		uint8_t u8_UsonicState = USONIC_GetDistance(&d64_Distance);
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 58 04 	call	0x8b0	; 0x8b0 <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
     328:	88 23       	and	r24, r24
     32a:	31 f4       	brne	.+12     	; 0x338 <SENSING_MainFunction+0x3c>
		{
			SENSING_Set(d64_Distance);
     32c:	69 81       	ldd	r22, Y+1	; 0x01
     32e:	7a 81       	ldd	r23, Y+2	; 0x02
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	0e 94 b6 01 	call	0x36c	; 0x36c <SENSING_Set>
		}	
	}			
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	79 f0       	breq	.+30     	; 0x368 <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
     34a:	40 91 ae 00 	lds	r20, 0x00AE
     34e:	50 91 af 00 	lds	r21, 0x00AF
     352:	60 91 b0 00 	lds	r22, 0x00B0
     356:	70 91 b1 00 	lds	r23, 0x00B1
     35a:	fc 01       	movw	r30, r24
     35c:	40 83       	st	Z, r20
     35e:	51 83       	std	Z+1, r21	; 0x01
     360:	62 83       	std	Z+2, r22	; 0x02
     362:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
     368:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
     36a:	08 95       	ret

0000036c <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
     36c:	dc 01       	movw	r26, r24
     36e:	cb 01       	movw	r24, r22
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
     370:	80 93 ae 00 	sts	0x00AE, r24
     374:	90 93 af 00 	sts	0x00AF, r25
     378:	a0 93 b0 00 	sts	0x00B0, r26
     37c:	b0 93 b1 00 	sts	0x00B1, r27
	
	return u8_ErrorState;
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	08 95       	ret

00000384 <STEERING_MainFunction>:
* @brief: This function Moves the robot to a given direction.
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     384:	80 91 b2 00 	lds	r24, 0x00B2
     388:	88 23       	and	r24, r24
     38a:	41 f4       	brne	.+16     	; 0x39c <STEERING_MainFunction+0x18>
------------------------*/
static ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   MOTOR_ErrorState = MOTOR_init();
     38c:	0e 94 3f 02 	call	0x47e	; 0x47e <MOTOR_init>
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==STEERING_Init()){
     390:	88 23       	and	r24, r24
     392:	21 f4       	brne	.+8      	; 0x39c <STEERING_MainFunction+0x18>
			u8_InitFlag=INIT;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 b2 00 	sts	0x00B2, r24
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <STEERING_MainFunction+0x22>
		}
	}
	else{
        //DO Nothing
	}
    if(INIT==u8_InitFlag){
     39c:	80 91 b2 00 	lds	r24, 0x00B2
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <STEERING_MainFunction+0x22>
     3a4:	44 c0       	rjmp	.+136    	; 0x42e <STEERING_MainFunction+0xaa>
		STEERING_Get(&u8_dir,&u16_speed);
     3a6:	83 eb       	ldi	r24, 0xB3	; 179
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	64 eb       	ldi	r22, 0xB4	; 180
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	0e 94 29 02 	call	0x452	; 0x452 <STEERING_Get>
		switch(u8_dir)
     3b2:	80 91 b3 00 	lds	r24, 0x00B3
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	a1 f0       	breq	.+40     	; 0x3e2 <STEERING_MainFunction+0x5e>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	28 f0       	brcs	.+10     	; 0x3c8 <STEERING_MainFunction+0x44>
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	e9 f0       	breq	.+58     	; 0x3fc <STEERING_MainFunction+0x78>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	a1 f5       	brne	.+104    	; 0x42e <STEERING_MainFunction+0xaa>
     3c6:	27 c0       	rjmp	.+78     	; 0x416 <STEERING_MainFunction+0x92>
		{
		  case STEERING_FORWARD:
             MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	60 91 b4 00 	lds	r22, 0x00B4
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	60 91 b4 00 	lds	r22, 0x00B4
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
			 break;
     3e0:	08 95       	ret
		  case STEERING_BACKWARD:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	60 91 b4 00 	lds	r22, 0x00B4
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	60 91 b4 00 	lds	r22, 0x00B4
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
			 break;
     3fa:	08 95       	ret
		  case STEERING_RIGHT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	60 91 b4 00 	lds	r22, 0x00B4
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	60 91 b4 00 	lds	r22, 0x00B4
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
			 break;
     414:	08 95       	ret
		  case STEERING_LEFT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	60 91 b4 00 	lds	r22, 0x00B4
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	60 91 b4 00 	lds	r22, 0x00B4
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MOTOR_start>
     42e:	08 95       	ret

00000430 <STEERING_Set>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
     430:	84 30       	cpi	r24, 0x04	; 4
     432:	58 f4       	brcc	.+22     	; 0x44a <STEERING_Set+0x1a>
		STEERING_ErrorState = ERROR_NOK;
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED){
     434:	65 36       	cpi	r22, 0x65	; 101
     436:	71 05       	cpc	r23, r1
     438:	50 f4       	brcc	.+20     	; 0x44e <STEERING_Set+0x1e>
		STEERING_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE SPEED*/
		gstr_Steering_State.u16_steering_Speed=Speed;
     43a:	70 93 b7 00 	sts	0x00B7, r23
     43e:	60 93 b6 00 	sts	0x00B6, r22
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
     442:	80 93 b8 00 	sts	0x00B8, r24
		STEERING_ErrorState = ERROR_OK;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	08 95       	ret
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
		STEERING_ErrorState = ERROR_NOK;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	08 95       	ret
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED){
		STEERING_ErrorState = ERROR_NOK;
     44e:	81 e0       	ldi	r24, 0x01	; 1
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
}
     450:	08 95       	ret

00000452 <STEERING_Get>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	81 f0       	breq	.+32     	; 0x476 <STEERING_Get+0x24>
     456:	61 15       	cp	r22, r1
     458:	71 05       	cpc	r23, r1
     45a:	79 f0       	breq	.+30     	; 0x47a <STEERING_Get+0x28>
		STEERING_ErrorState=ERROR_NOK;
	}
	else
    {
		/*GET THE SPEED*/
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
     45c:	20 91 b6 00 	lds	r18, 0x00B6
     460:	30 91 b7 00 	lds	r19, 0x00B7
     464:	fb 01       	movw	r30, r22
     466:	31 83       	std	Z+1, r19	; 0x01
     468:	20 83       	st	Z, r18
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
     46a:	20 91 b8 00 	lds	r18, 0x00B8
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
		STEERING_ErrorState = ERROR_OK;
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	08 95       	ret
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
    {
		STEERING_ErrorState=ERROR_NOK;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	08 95       	ret
     47a:	81 e0       	ldi	r24, 0x01	; 1
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
     47c:	08 95       	ret

0000047e <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     47e:	80 91 b9 00 	lds	r24, 0x00B9
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	21 f4       	brne	.+8      	; 0x48e <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	80 93 ba 00 	sts	0x00BA, r24
     48c:	28 c0       	rjmp	.+80     	; 0x4de <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     48e:	88 23       	and	r24, r24
     490:	31 f5       	brne	.+76     	; 0x4de <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     492:	0e 94 d6 09 	call	0x13ac	; 0x13ac <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     496:	80 91 69 00 	lds	r24, 0x0069
     49a:	60 91 6a 00 	lds	r22, 0x006A
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     4a4:	80 91 6b 00 	lds	r24, 0x006B
     4a8:	60 91 6c 00 	lds	r22, 0x006C
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     4b2:	80 91 6d 00 	lds	r24, 0x006D
     4b6:	60 91 6e 00 	lds	r22, 0x006E
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     4c0:	80 91 6f 00 	lds	r24, 0x006F
     4c4:	60 91 70 00 	lds	r22, 0x0070
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 07 0a 	call	0x140e	; 0x140e <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 b9 00 	sts	0x00B9, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     4da:	10 92 ba 00 	sts	0x00BA, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     4de:	80 91 ba 00 	lds	r24, 0x00BA
     4e2:	08 95       	ret

000004e4 <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	c8 2f       	mov	r28, r24
     4ea:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     4ec:	80 91 b9 00 	lds	r24, 0x00B9
     4f0:	88 23       	and	r24, r24
     4f2:	21 f4       	brne	.+8      	; 0x4fc <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     4f4:	8e ef       	ldi	r24, 0xFE	; 254
     4f6:	80 93 ba 00 	sts	0x00BA, r24
     4fa:	66 c0       	rjmp	.+204    	; 0x5c8 <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f0       	breq	.+2      	; 0x502 <MOTOR_start+0x1e>
     500:	63 c0       	rjmp	.+198    	; 0x5c8 <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 33 0a 	call	0x1466	; 0x1466 <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <PWM_Connect>
	switch (motor_no) {
     50e:	cc 23       	and	r28, r28
     510:	21 f0       	breq	.+8      	; 0x51a <MOTOR_start+0x36>
     512:	c1 30       	cpi	r28, 0x01	; 1
     514:	09 f0       	breq	.+2      	; 0x518 <MOTOR_start+0x34>
     516:	55 c0       	rjmp	.+170    	; 0x5c2 <MOTOR_start+0xde>
     518:	2a c0       	rjmp	.+84     	; 0x56e <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     51a:	dd 23       	and	r29, r29
     51c:	99 f0       	breq	.+38     	; 0x544 <MOTOR_start+0x60>
     51e:	d1 30       	cpi	r29, 0x01	; 1
     520:	11 f5       	brne	.+68     	; 0x566 <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     522:	80 91 69 00 	lds	r24, 0x0069
     526:	60 91 6a 00 	lds	r22, 0x006A
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     530:	80 91 6b 00 	lds	r24, 0x006B
     534:	60 91 6c 00 	lds	r22, 0x006C
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     53e:	10 92 ba 00 	sts	0x00BA, r1
			break;
     542:	42 c0       	rjmp	.+132    	; 0x5c8 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     544:	80 91 69 00 	lds	r24, 0x0069
     548:	60 91 6a 00 	lds	r22, 0x006A
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     552:	80 91 6b 00 	lds	r24, 0x006B
     556:	60 91 6c 00 	lds	r22, 0x006C
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     560:	10 92 ba 00 	sts	0x00BA, r1

			break;
     564:	31 c0       	rjmp	.+98     	; 0x5c8 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     566:	8d ef       	ldi	r24, 0xFD	; 253
     568:	80 93 ba 00 	sts	0x00BA, r24
			break;
     56c:	2d c0       	rjmp	.+90     	; 0x5c8 <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     56e:	dd 23       	and	r29, r29
     570:	99 f0       	breq	.+38     	; 0x598 <MOTOR_start+0xb4>
     572:	d1 30       	cpi	r29, 0x01	; 1
     574:	11 f5       	brne	.+68     	; 0x5ba <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     576:	80 91 6d 00 	lds	r24, 0x006D
     57a:	60 91 6e 00 	lds	r22, 0x006E
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     584:	80 91 6f 00 	lds	r24, 0x006F
     588:	60 91 70 00 	lds	r22, 0x0070
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     592:	10 92 ba 00 	sts	0x00BA, r1

			break;
     596:	18 c0       	rjmp	.+48     	; 0x5c8 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     598:	80 91 6d 00 	lds	r24, 0x006D
     59c:	60 91 6e 00 	lds	r22, 0x006E
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     5a6:	80 91 6f 00 	lds	r24, 0x006F
     5aa:	60 91 70 00 	lds	r22, 0x0070
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     5b4:	10 92 ba 00 	sts	0x00BA, r1

			break;
     5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     5ba:	8d ef       	ldi	r24, 0xFD	; 253
     5bc:	80 93 ba 00 	sts	0x00BA, r24
			break;
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     5c2:	8c ef       	ldi	r24, 0xFC	; 252
     5c4:	80 93 ba 00 	sts	0x00BA, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     5c8:	80 91 ba 00 	lds	r24, 0x00BA
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     5d2:	cf 93       	push	r28
     5d4:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     5d6:	80 91 b9 00 	lds	r24, 0x00B9
     5da:	88 23       	and	r24, r24
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     5de:	8e ef       	ldi	r24, 0xFE	; 254
     5e0:	80 93 ba 00 	sts	0x00BA, r24
     5e4:	2f c0       	rjmp	.+94     	; 0x644 <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	69 f5       	brne	.+90     	; 0x644 <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 2a 0a 	call	0x1454	; 0x1454 <PWM_Disconnect>
       switch (motor_no){
     5f0:	cc 23       	and	r28, r28
     5f2:	19 f0       	breq	.+6      	; 0x5fa <MOTOR_stop+0x28>
     5f4:	c1 30       	cpi	r28, 0x01	; 1
     5f6:	19 f5       	brne	.+70     	; 0x63e <MOTOR_stop+0x6c>
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     5fa:	80 91 69 00 	lds	r24, 0x0069
     5fe:	60 91 6a 00 	lds	r22, 0x006A
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     608:	80 91 6b 00 	lds	r24, 0x006B
     60c:	60 91 6c 00 	lds	r22, 0x006C
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     616:	10 92 ba 00 	sts	0x00BA, r1
            break;
     61a:	14 c0       	rjmp	.+40     	; 0x644 <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     61c:	80 91 6d 00 	lds	r24, 0x006D
     620:	60 91 6e 00 	lds	r22, 0x006E
     624:	41 e0       	ldi	r20, 0x01	; 1
     626:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     62a:	80 91 6f 00 	lds	r24, 0x006F
     62e:	60 91 70 00 	lds	r22, 0x0070
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     638:	10 92 ba 00 	sts	0x00BA, r1
            break;
     63c:	03 c0       	rjmp	.+6      	; 0x644 <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     63e:	8c ef       	ldi	r24, 0xFC	; 252
     640:	80 93 ba 00 	sts	0x00BA, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     644:	80 91 ba 00 	lds	r24, 0x00BA
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     64c:	90 91 b9 00 	lds	r25, 0x00B9
     650:	99 23       	and	r25, r25
     652:	21 f4       	brne	.+8      	; 0x65c <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     654:	8e ef       	ldi	r24, 0xFE	; 254
     656:	80 93 ba 00 	sts	0x00BA, r24
     65a:	60 c0       	rjmp	.+192    	; 0x71c <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <MOTOR_Update_dir+0x16>
     660:	5d c0       	rjmp	.+186    	; 0x71c <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     662:	88 23       	and	r24, r24
     664:	21 f0       	breq	.+8      	; 0x66e <MOTOR_Update_dir+0x22>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	09 f0       	breq	.+2      	; 0x66c <MOTOR_Update_dir+0x20>
     66a:	55 c0       	rjmp	.+170    	; 0x716 <MOTOR_Update_dir+0xca>
     66c:	2a c0       	rjmp	.+84     	; 0x6c2 <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     66e:	66 23       	and	r22, r22
     670:	99 f0       	breq	.+38     	; 0x698 <MOTOR_Update_dir+0x4c>
     672:	61 30       	cpi	r22, 0x01	; 1
     674:	11 f5       	brne	.+68     	; 0x6ba <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     676:	80 91 69 00 	lds	r24, 0x0069
     67a:	60 91 6a 00 	lds	r22, 0x006A
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     684:	80 91 6b 00 	lds	r24, 0x006B
     688:	60 91 6c 00 	lds	r22, 0x006C
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     692:	10 92 ba 00 	sts	0x00BA, r1

                    break;
     696:	42 c0       	rjmp	.+132    	; 0x71c <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     698:	80 91 69 00 	lds	r24, 0x0069
     69c:	60 91 6a 00 	lds	r22, 0x006A
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     6a6:	80 91 6b 00 	lds	r24, 0x006B
     6aa:	60 91 6c 00 	lds	r22, 0x006C
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     6b4:	10 92 ba 00 	sts	0x00BA, r1

                    break;
     6b8:	31 c0       	rjmp	.+98     	; 0x71c <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     6ba:	8d ef       	ldi	r24, 0xFD	; 253
     6bc:	80 93 ba 00 	sts	0x00BA, r24
                    break;
     6c0:	2d c0       	rjmp	.+90     	; 0x71c <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
     6c2:	66 23       	and	r22, r22
     6c4:	99 f0       	breq	.+38     	; 0x6ec <MOTOR_Update_dir+0xa0>
     6c6:	61 30       	cpi	r22, 0x01	; 1
     6c8:	11 f5       	brne	.+68     	; 0x70e <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     6ca:	80 91 6d 00 	lds	r24, 0x006D
     6ce:	60 91 6e 00 	lds	r22, 0x006E
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     6d8:	80 91 6f 00 	lds	r24, 0x006F
     6dc:	60 91 70 00 	lds	r22, 0x0070
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     6e6:	10 92 ba 00 	sts	0x00BA, r1

                    break;
     6ea:	18 c0       	rjmp	.+48     	; 0x71c <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     6ec:	80 91 6d 00 	lds	r24, 0x006D
     6f0:	60 91 6e 00 	lds	r22, 0x006E
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     6fa:	80 91 6f 00 	lds	r24, 0x006F
     6fe:	60 91 70 00 	lds	r22, 0x0070
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     708:	10 92 ba 00 	sts	0x00BA, r1

                    break;
     70c:	07 c0       	rjmp	.+14     	; 0x71c <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     70e:	8d ef       	ldi	r24, 0xFD	; 253
     710:	80 93 ba 00 	sts	0x00BA, r24
                    break;
     714:	03 c0       	rjmp	.+6      	; 0x71c <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
     716:	8c ef       	ldi	r24, 0xFC	; 252
     718:	80 93 ba 00 	sts	0x00BA, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
     71c:	80 91 ba 00 	lds	r24, 0x00BA
     720:	08 95       	ret

00000722 <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
     722:	80 91 bf 00 	lds	r24, 0x00BF
     726:	90 91 c0 00 	lds	r25, 0x00C0
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	90 93 c0 00 	sts	0x00C0, r25
     730:	80 93 bf 00 	sts	0x00BF, r24
     734:	08 95       	ret

00000736 <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
     74a:	80 91 cb 00 	lds	r24, 0x00CB
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	21 f0       	breq	.+8      	; 0x75a <USONIC_ICU1Callback+0x24>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f0       	breq	.+2      	; 0x758 <USONIC_ICU1Callback+0x22>
     756:	77 c0       	rjmp	.+238    	; 0x846 <USONIC_ICU1Callback+0x110>
     758:	0c c0       	rjmp	.+24     	; 0x772 <USONIC_ICU1Callback+0x3c>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
     75a:	10 92 c0 00 	sts	0x00C0, r1
     75e:	10 92 bf 00 	sts	0x00BF, r1
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	80 93 cb 00 	sts	0x00CB, r24
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 4d 08 	call	0x109a	; 0x109a <ICU_Reset>
				break;
     770:	6a c0       	rjmp	.+212    	; 0x846 <USONIC_ICU1Callback+0x110>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	69 ec       	ldi	r22, 0xC9	; 201
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	0e 94 27 09 	call	0x124e	; 0x124e <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
     77c:	80 91 c9 00 	lds	r24, 0x00C9
     780:	90 91 ca 00 	lds	r25, 0x00CA
     784:	20 91 bf 00 	lds	r18, 0x00BF
     788:	30 91 c0 00 	lds	r19, 0x00C0
     78c:	82 1b       	sub	r24, r18
     78e:	93 0b       	sbc	r25, r19
     790:	80 93 c1 00 	sts	0x00C1, r24
     794:	90 93 c2 00 	sts	0x00C2, r25
     798:	10 92 c3 00 	sts	0x00C3, r1
     79c:	10 92 c4 00 	sts	0x00C4, r1
     7a0:	10 92 c5 00 	sts	0x00C5, r1
     7a4:	10 92 c6 00 	sts	0x00C6, r1
     7a8:	10 92 c7 00 	sts	0x00C7, r1
     7ac:	10 92 c8 00 	sts	0x00C8, r1
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
     7b0:	20 91 c1 00 	lds	r18, 0x00C1
     7b4:	30 91 c2 00 	lds	r19, 0x00C2
     7b8:	40 91 c3 00 	lds	r20, 0x00C3
     7bc:	50 91 c4 00 	lds	r21, 0x00C4
     7c0:	60 91 c5 00 	lds	r22, 0x00C5
     7c4:	70 91 c6 00 	lds	r23, 0x00C6
     7c8:	80 91 c7 00 	lds	r24, 0x00C7
     7cc:	90 91 c8 00 	lds	r25, 0x00C8
     7d0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatundisf>
     7d4:	4b 01       	movw	r8, r22
     7d6:	5c 01       	movw	r10, r24
     7d8:	60 91 79 00 	lds	r22, 0x0079
     7dc:	70 91 7a 00 	lds	r23, 0x007A
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatunsisf>
     7e8:	6b 01       	movw	r12, r22
     7ea:	7c 01       	movw	r14, r24
     7ec:	60 91 71 00 	lds	r22, 0x0071
     7f0:	70 91 72 00 	lds	r23, 0x0072
     7f4:	80 91 73 00 	lds	r24, 0x0073
     7f8:	90 91 74 00 	lds	r25, 0x0074
     7fc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatunsisf>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
     808:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c5 01       	movw	r24, r10
     812:	b4 01       	movw	r22, r8
     814:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsf3>
     818:	46 2f       	mov	r20, r22
     81a:	57 2f       	mov	r21, r23
     81c:	68 2f       	mov	r22, r24
     81e:	79 2f       	mov	r23, r25
     820:	40 93 bb 00 	sts	0x00BB, r20
     824:	50 93 bc 00 	sts	0x00BC, r21
     828:	60 93 bd 00 	sts	0x00BD, r22
     82c:	70 93 be 00 	sts	0x00BE, r23
				gu8_ICU_State=END_STATE;
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	80 93 cb 00 	sts	0x00CB, r24
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	0e 94 57 09 	call	0x12ae	; 0x12ae <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	0e 94 57 09 	call	0x12ae	; 0x12ae <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	08 95       	ret

0000085c <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
     85c:	80 91 cc 00 	lds	r24, 0x00CC
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	21 f4       	brne	.+8      	; 0x86c <__stack+0xd>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	80 93 cd 00 	sts	0x00CD, r24
     86a:	1f c0       	rjmp	.+62     	; 0x8aa <__stack+0x4b>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
     86c:	88 23       	and	r24, r24
     86e:	e9 f4       	brne	.+58     	; 0x8aa <__stack+0x4b>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
     870:	80 91 75 00 	lds	r24, 0x0075
     874:	60 91 76 00 	lds	r22, 0x0076
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 27 08 	call	0x104e	; 0x104e <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	4b e9       	ldi	r20, 0x9B	; 155
     88a:	53 e0       	ldi	r21, 0x03	; 3
     88c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	41 e9       	ldi	r20, 0x91	; 145
     896:	53 e0       	ldi	r21, 0x03	; 3
     898:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
     89c:	0e 94 1f 08 	call	0x103e	; 0x103e <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 cc 00 	sts	0x00CC, r24
		gu8_ERROR_STATE=ERROR_OK;
     8a6:	10 92 cd 00 	sts	0x00CD, r1
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
     8aa:	80 91 cd 00 	lds	r24, 0x00CD
     8ae:	08 95       	ret

000008b0 <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
     8b6:	80 91 cc 00 	lds	r24, 0x00CC
     8ba:	88 23       	and	r24, r24
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     8be:	8e ef       	ldi	r24, 0xFE	; 254
     8c0:	80 93 cd 00 	sts	0x00CD, r24
     8c4:	5b c0       	rjmp	.+182    	; 0x97c <USONIC_GetDistance+0xcc>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <USONIC_GetDistance+0x1c>
     8ca:	58 c0       	rjmp	.+176    	; 0x97c <USONIC_GetDistance+0xcc>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
     8cc:	20 97       	sbiw	r28, 0x00	; 0
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <USONIC_GetDistance+0x28>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
     8d0:	8d ef       	ldi	r24, 0xFD	; 253
     8d2:	80 93 cd 00 	sts	0x00CD, r24
     8d6:	52 c0       	rjmp	.+164    	; 0x97c <USONIC_GetDistance+0xcc>
		} 
		else 
		{
			switch(gu8_ICU_State)
     8d8:	80 91 cb 00 	lds	r24, 0x00CB
     8dc:	88 23       	and	r24, r24
     8de:	21 f0       	breq	.+8      	; 0x8e8 <USONIC_GetDistance+0x38>
     8e0:	83 30       	cpi	r24, 0x03	; 3
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <USONIC_GetDistance+0x36>
     8e4:	4b c0       	rjmp	.+150    	; 0x97c <USONIC_GetDistance+0xcc>
     8e6:	2c c0       	rjmp	.+88     	; 0x940 <USONIC_GetDistance+0x90>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 cb 00 	sts	0x00CB, r24
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
					
					gu16_OverflowCounter=COUNTER_RESET;
     8f8:	10 92 c0 00 	sts	0x00C0, r1
     8fc:	10 92 bf 00 	sts	0x00BF, r1
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	6e ef       	ldi	r22, 0xFE	; 254
     904:	7f ef       	ldi	r23, 0xFF	; 255
     906:	0e 94 3b 09 	call	0x1276	; 0x1276 <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	0e 94 42 09 	call	0x1284	; 0x1284 <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
     912:	80 91 bf 00 	lds	r24, 0x00BF
     916:	90 91 c0 00 	lds	r25, 0x00C0
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	d1 f3       	breq	.-12     	; 0x912 <USONIC_GetDistance+0x62>
						{
							
						}
					}*/
					
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	0e 94 4d 08 	call	0x109a	; 0x109a <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	0e 94 42 09 	call	0x1284	; 0x1284 <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 cd 00 	sts	0x00CD, r24
					break;
     93e:	1e c0       	rjmp	.+60     	; 0x97c <USONIC_GetDistance+0xcc>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
     940:	60 91 bb 00 	lds	r22, 0x00BB
     944:	70 91 bc 00 	lds	r23, 0x00BC
     948:	80 91 bd 00 	lds	r24, 0x00BD
     94c:	90 91 be 00 	lds	r25, 0x00BE
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	3c ef       	ldi	r19, 0xFC	; 252
     954:	45 e0       	ldi	r20, 0x05	; 5
     956:	57 e4       	ldi	r21, 0x47	; 71
     958:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	88 83       	st	Y, r24
     96e:	99 83       	std	Y+1, r25	; 0x01
     970:	aa 83       	std	Y+2, r26	; 0x02
     972:	bb 83       	std	Y+3, r27	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
     974:	10 92 cd 00 	sts	0x00CD, r1
					gu8_ICU_State=START_STATE;
     978:	10 92 cb 00 	sts	0x00CB, r1
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
     97c:	80 91 cd 00 	lds	r24, 0x00CD
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	00 d0       	rcall	.+0      	; 0x98c <dummy_delay+0x6>
     98c:	00 d0       	rcall	.+0      	; 0x98e <dummy_delay+0x8>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
     992:	1c 82       	std	Y+4, r1	; 0x04
     994:	1b 82       	std	Y+3, r1	; 0x03
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	84 36       	cpi	r24, 0x64	; 100
     99c:	91 05       	cpc	r25, r1
     99e:	f0 f4       	brcc	.+60     	; 0x9dc <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
     9a0:	1a 82       	std	Y+2, r1	; 0x02
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	80 32       	cpi	r24, 0x20	; 32
     9a6:	80 f4       	brcc	.+32     	; 0x9c8 <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
     9a8:	19 82       	std	Y+1, r1	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	30 f4       	brcc	.+12     	; 0x9bc <dummy_delay+0x36>
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	d0 f3       	brcs	.-12     	; 0x9b0 <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	8a 83       	std	Y+2, r24	; 0x02
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	80 32       	cpi	r24, 0x20	; 32
     9c6:	80 f3       	brcs	.-32     	; 0x9a8 <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	84 36       	cpi	r24, 0x64	; 100
     9d8:	91 05       	cpc	r25, r1
     9da:	10 f3       	brcs	.-60     	; 0x9a0 <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
     9ea:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     9ec:	8c 91       	ld	r24, X
     9ee:	88 23       	and	r24, r24
     9f0:	01 f1       	breq	.+64     	; 0xa32 <StringCompare+0x48>
     9f2:	8d 30       	cpi	r24, 0x0D	; 13
     9f4:	09 f1       	breq	.+66     	; 0xa38 <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
     9f6:	fb 01       	movw	r30, r22
     9f8:	90 81       	ld	r25, Z
     9fa:	89 17       	cp	r24, r25
     9fc:	49 f4       	brne	.+18     	; 0xa10 <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	0b c0       	rjmp	.+22     	; 0xa18 <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
     a02:	86 0f       	add	r24, r22
     a04:	97 1f       	adc	r25, r23
     a06:	fc 01       	movw	r30, r24
     a08:	80 81       	ld	r24, Z
     a0a:	28 17       	cp	r18, r24
     a0c:	29 f0       	breq	.+10     	; 0xa18 <StringCompare+0x2e>
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     a10:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
     a12:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
     a14:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
     a16:	14 c0       	rjmp	.+40     	; 0xa40 <StringCompare+0x56>
      }
      u8_counter++;
     a18:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     a1a:	83 2f       	mov	r24, r19
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	fd 01       	movw	r30, r26
     a20:	e8 0f       	add	r30, r24
     a22:	f9 1f       	adc	r31, r25
     a24:	20 81       	ld	r18, Z
     a26:	22 23       	and	r18, r18
     a28:	51 f0       	breq	.+20     	; 0xa3e <StringCompare+0x54>
     a2a:	2d 30       	cpi	r18, 0x0D	; 13
     a2c:	51 f7       	brne	.-44     	; 0xa02 <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <StringCompare+0x56>
     a32:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     a38:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
     a40:	63 0f       	add	r22, r19
     a42:	71 1d       	adc	r23, r1
     a44:	fb 01       	movw	r30, r22
     a46:	90 81       	ld	r25, Z
     a48:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
     a4c:	08 95       	ret

00000a4e <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
     a4e:	fb 01       	movw	r30, r22
	*StringLength = 0;
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	10 82       	st	Z, r1
	while(*String!='\0')
     a54:	dc 01       	movw	r26, r24
     a56:	2c 91       	ld	r18, X
     a58:	22 23       	and	r18, r18
     a5a:	49 f0       	breq	.+18     	; 0xa6e <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
     a5c:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
     a68:	8d 91       	ld	r24, X+
     a6a:	88 23       	and	r24, r24
     a6c:	c1 f7       	brne	.-16     	; 0xa5e <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret

00000a72 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
     a72:	80 53       	subi	r24, 0x30	; 48
     a74:	8a 30       	cpi	r24, 0x0A	; 10
     a76:	20 f4       	brcc	.+8      	; 0xa80 <STR_CharIsNumeric+0xe>
	{
		*Result=1;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	fb 01       	movw	r30, r22
     a7c:	80 83       	st	Z, r24
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
     a80:	fb 01       	movw	r30, r22
     a82:	10 82       	st	Z, r1
	}
	return 0;
}
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	08 95       	ret

00000a88 <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	0f 92       	push	r0
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	fc 01       	movw	r30, r24
     a9e:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
     aa0:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
     aa2:	80 81       	ld	r24, Z
     aa4:	88 23       	and	r24, r24
     aa6:	b9 f0       	breq	.+46     	; 0xad6 <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
     aa8:	8f 01       	movw	r16, r30
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
     aae:	dd 24       	eor	r13, r13
     ab0:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
     ab2:	be 01       	movw	r22, r28
     ab4:	6f 5f       	subi	r22, 0xFF	; 255
     ab6:	7f 4f       	sbci	r23, 0xFF	; 255
     ab8:	0e 94 39 05 	call	0xa72	; 0xa72 <STR_CharIsNumeric>
		if(!FunRetVal)
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	88 23       	and	r24, r24
     ac0:	19 f4       	brne	.+6      	; 0xac8 <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
     ac2:	f7 01       	movw	r30, r14
     ac4:	10 82       	st	Z, r1
			break;
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
     ac8:	f7 01       	movw	r30, r14
     aca:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
     acc:	f8 01       	movw	r30, r16
     ace:	81 91       	ld	r24, Z+
     ad0:	8f 01       	movw	r16, r30
     ad2:	88 23       	and	r24, r24
     ad4:	71 f7       	brne	.-36     	; 0xab2 <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	08 95       	ret

00000aea <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	fc 01       	movw	r30, r24
     af4:	ec 01       	movw	r28, r24
     af6:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
     af8:	db 01       	movw	r26, r22
     afa:	11 96       	adiw	r26, 0x01	; 1
     afc:	8f 01       	movw	r16, r30
     afe:	0f 5f       	subi	r16, 0xFF	; 255
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
     b06:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
     b08:	29 91       	ld	r18, Y+
     b0a:	fc 01       	movw	r30, r24
     b0c:	31 91       	ld	r19, Z+
     b0e:	cf 01       	movw	r24, r30
     b10:	23 17       	cp	r18, r19
     b12:	59 f4       	brne	.+22     	; 0xb2a <STR_CompareString+0x40>
		{
			*Result = 1;
     b14:	fa 01       	movw	r30, r20
     b16:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
     b18:	f8 01       	movw	r30, r16
     b1a:	21 91       	ld	r18, Z+
     b1c:	8f 01       	movw	r16, r30
     b1e:	22 23       	and	r18, r18
     b20:	91 f7       	brne	.-28     	; 0xb06 <STR_CompareString+0x1c>
     b22:	2c 91       	ld	r18, X
     b24:	22 23       	and	r18, r18
     b26:	79 f7       	brne	.-34     	; 0xb06 <STR_CompareString+0x1c>
     b28:	0a c0       	rjmp	.+20     	; 0xb3e <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
     b2a:	22 23       	and	r18, r18
     b2c:	31 f4       	brne	.+12     	; 0xb3a <STR_CompareString+0x50>
     b2e:	33 23       	and	r19, r19
     b30:	21 f4       	brne	.+8      	; 0xb3a <STR_CompareString+0x50>
		{
			*Result = 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	fa 01       	movw	r30, r20
     b36:	80 83       	st	Z, r24
			break;
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
     b3a:	fa 01       	movw	r30, r20
     b3c:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
     b58:	fb 01       	movw	r30, r22
     b5a:	11 82       	std	Z+1, r1	; 0x01
     b5c:	10 82       	st	Z, r1
	while(*String!='\0')
     b5e:	fc 01       	movw	r30, r24
     b60:	20 81       	ld	r18, Z
     b62:	22 23       	and	r18, r18
     b64:	39 f0       	breq	.+14     	; 0xb74 <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
     b66:	31 96       	adiw	r30, 0x01	; 1
     b68:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
     b6a:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
     b6c:	21 91       	ld	r18, Z+
     b6e:	22 23       	and	r18, r18
     b70:	e1 f7       	brne	.-8      	; 0xb6a <STR_String2Number+0x20>
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <STR_String2Number+0x2c>
     b74:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
     b76:	7c 01       	movw	r14, r24
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
     b80:	8a 91       	ld	r24, -Y
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	c0 97       	sbiw	r24, 0x30	; 48
     b86:	84 9f       	mul	r24, r20
     b88:	90 01       	movw	r18, r0
     b8a:	85 9f       	mul	r24, r21
     b8c:	30 0d       	add	r19, r0
     b8e:	94 9f       	mul	r25, r20
     b90:	30 0d       	add	r19, r0
     b92:	11 24       	eor	r1, r1
     b94:	f8 01       	movw	r30, r16
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
		Multiplier*=10;
     ba2:	cb 01       	movw	r24, r22
     ba4:	ba 01       	movw	r22, r20
     ba6:	2a e0       	ldi	r18, 0x0A	; 10
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsi3>
     bb2:	ab 01       	movw	r20, r22
     bb4:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
     bb6:	ce 15       	cp	r28, r14
     bb8:	df 05       	cpc	r29, r15
     bba:	11 f7       	brne	.-60     	; 0xb80 <STR_String2Number+0x36>
	return 0;
}
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     bcc:	fc 01       	movw	r30, r24
     bce:	20 81       	ld	r18, Z
     bd0:	22 23       	and	r18, r18
     bd2:	39 f0       	breq	.+14     	; 0xbe2 <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
     bd4:	dc 01       	movw	r26, r24
     bd6:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
     bd8:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     bda:	2d 91       	ld	r18, X+
     bdc:	22 23       	and	r18, r18
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <STR_StringReverse+0xc>
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
     be2:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
     be4:	9f 01       	movw	r18, r30
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
     bea:	82 17       	cp	r24, r18
     bec:	93 07       	cpc	r25, r19
     bee:	50 f4       	brcc	.+20     	; 0xc04 <STR_StringReverse+0x38>
     bf0:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
     bf2:	8c 91       	ld	r24, X
		*A=*B;
     bf4:	92 91       	ld	r25, -Z
     bf6:	9d 93       	st	X+, r25
		*B=Temp;
     bf8:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
     bfa:	cf 01       	movw	r24, r30
     bfc:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
     bfe:	a8 17       	cp	r26, r24
     c00:	b9 07       	cpc	r27, r25
     c02:	b8 f3       	brcs	.-18     	; 0xbf2 <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret

00000c08 <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	a1 05       	cpc	r26, r1
     c22:	b1 05       	cpc	r27, r1
     c24:	21 f4       	brne	.+8      	; 0xc2e <STR_Number2String+0x26>
	{
		*String='0';
     c26:	80 e3       	ldi	r24, 0x30	; 48
     c28:	fa 01       	movw	r30, r20
     c2a:	80 83       	st	Z, r24
     c2c:	1f c0       	rjmp	.+62     	; 0xc6c <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
     c2e:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     c30:	0f 2e       	mov	r0, r31
     c32:	fa e0       	ldi	r31, 0x0A	; 10
     c34:	cf 2e       	mov	r12, r31
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	df 2e       	mov	r13, r31
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ef 2e       	mov	r14, r31
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ff 2e       	mov	r15, r31
     c42:	f0 2d       	mov	r31, r0
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <STR_Number2String+0x40>
			String++;
     c46:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	a7 01       	movw	r20, r14
     c4e:	96 01       	movw	r18, r12
     c50:	0e 94 02 10 	call	0x2004	; 0x2004 <__udivmodsi4>
     c54:	60 5d       	subi	r22, 0xD0	; 208
     c56:	fe 01       	movw	r30, r28
     c58:	61 93       	st	Z+, r22
			String++;
			Number/=10;
     c5a:	82 2f       	mov	r24, r18
     c5c:	93 2f       	mov	r25, r19
     c5e:	a4 2f       	mov	r26, r20
     c60:	b5 2f       	mov	r27, r21
		}while(Number);
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
     c68:	71 f7       	brne	.-36     	; 0xc46 <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
     c6a:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
     c6c:	c8 01       	movw	r24, r16
     c6e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <STR_StringReverse>
	return 0;
}
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret

00000c86 <main>:
#include "CRASH.h"
#include "REALTIMEMONITORING.h"

int main(void)
{  
	REALTIMEMONITORING_MainFunction();
     c86:	0e 94 be 00 	call	0x17c	; 0x17c <REALTIMEMONITORING_MainFunction>
   while(1)
   {
		
		SENSING_MainFunction();
     c8a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SENSING_MainFunction>
		CRASH_MainFunction();
     c8e:	0e 94 49 00 	call	0x92	; 0x92 <CRASH_MainFunction>
		STEERING_MainFunction();
     c92:	0e 94 c2 01 	call	0x384	; 0x384 <STEERING_MainFunction>
		REALTIMEMONITORING_MainFunction();
     c96:	0e 94 be 00 	call	0x17c	; 0x17c <REALTIMEMONITORING_MainFunction>
     c9a:	f7 cf       	rjmp	.-18     	; 0xc8a <main+0x4>

00000c9c <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
     c9c:	42 30       	cpi	r20, 0x02	; 2
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <DIO_SetPinDirection+0x6>
     ca0:	69 c0       	rjmp	.+210    	; 0xd74 <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     ca2:	68 30       	cpi	r22, 0x08	; 8
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <DIO_SetPinDirection+0xc>
     ca6:	68 c0       	rjmp	.+208    	; 0xd78 <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	f9 f0       	breq	.+62     	; 0xcea <DIO_SetPinDirection+0x4e>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	30 f0       	brcs	.+12     	; 0xcbc <DIO_SetPinDirection+0x20>
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	91 f1       	breq	.+100    	; 0xd18 <DIO_SetPinDirection+0x7c>
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_SetPinDirection+0x1e>
     cb8:	61 c0       	rjmp	.+194    	; 0xd7c <DIO_SetPinDirection+0xe0>
     cba:	45 c0       	rjmp	.+138    	; 0xd46 <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	06 2e       	mov	r0, r22
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_SetPinDirection+0x2c>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_SetPinDirection+0x28>
     ccc:	80 95       	com	r24
     cce:	9a b3       	in	r25, 0x1a	; 26
     cd0:	89 23       	and	r24, r25
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	9a 01       	movw	r18, r20
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_SetPinDirection+0x40>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	6a 95       	dec	r22
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_SetPinDirection+0x3c>
     ce0:	b9 01       	movw	r22, r18
     ce2:	68 2b       	or	r22, r24
     ce4:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
				break;
     ce8:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	06 2e       	mov	r0, r22
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_SetPinDirection+0x5a>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <DIO_SetPinDirection+0x56>
     cfa:	80 95       	com	r24
     cfc:	97 b3       	in	r25, 0x17	; 23
     cfe:	89 23       	and	r24, r25
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	9a 01       	movw	r18, r20
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_SetPinDirection+0x6e>
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	6a 95       	dec	r22
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_SetPinDirection+0x6a>
     d0e:	b9 01       	movw	r22, r18
     d10:	68 2b       	or	r22, r24
     d12:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
     d14:	80 e0       	ldi	r24, 0x00	; 0
				break;
     d16:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	06 2e       	mov	r0, r22
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_SetPinDirection+0x88>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_SetPinDirection+0x84>
     d28:	80 95       	com	r24
     d2a:	94 b3       	in	r25, 0x14	; 20
     d2c:	89 23       	and	r24, r25
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	9a 01       	movw	r18, r20
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_SetPinDirection+0x9c>
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	6a 95       	dec	r22
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_SetPinDirection+0x98>
     d3c:	b9 01       	movw	r22, r18
     d3e:	68 2b       	or	r22, r24
     d40:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
     d42:	80 e0       	ldi	r24, 0x00	; 0
				break;
     d44:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	06 2e       	mov	r0, r22
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_SetPinDirection+0xb6>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_SetPinDirection+0xb2>
     d56:	80 95       	com	r24
     d58:	91 b3       	in	r25, 0x11	; 17
     d5a:	89 23       	and	r24, r25
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	9a 01       	movw	r18, r20
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_SetPinDirection+0xca>
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	6a 95       	dec	r22
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_SetPinDirection+0xc6>
     d6a:	b9 01       	movw	r22, r18
     d6c:	68 2b       	or	r22, r24
     d6e:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
     d70:	80 e0       	ldi	r24, 0x00	; 0
				break;
     d72:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
     d7e:	08 95       	ret

00000d80 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
     d80:	42 30       	cpi	r20, 0x02	; 2
     d82:	08 f0       	brcs	.+2      	; 0xd86 <DIO_WritePin+0x6>
     d84:	69 c0       	rjmp	.+210    	; 0xe58 <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
     d86:	68 30       	cpi	r22, 0x08	; 8
     d88:	08 f0       	brcs	.+2      	; 0xd8c <DIO_WritePin+0xc>
     d8a:	68 c0       	rjmp	.+208    	; 0xe5c <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	f9 f0       	breq	.+62     	; 0xdce <DIO_WritePin+0x4e>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	30 f0       	brcs	.+12     	; 0xda0 <DIO_WritePin+0x20>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	91 f1       	breq	.+100    	; 0xdfc <DIO_WritePin+0x7c>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f0       	breq	.+2      	; 0xd9e <DIO_WritePin+0x1e>
     d9c:	61 c0       	rjmp	.+194    	; 0xe60 <DIO_WritePin+0xe0>
     d9e:	45 c0       	rjmp	.+138    	; 0xe2a <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	06 2e       	mov	r0, r22
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_WritePin+0x2c>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_WritePin+0x28>
     db0:	80 95       	com	r24
     db2:	9b b3       	in	r25, 0x1b	; 27
     db4:	89 23       	and	r24, r25
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	9a 01       	movw	r18, r20
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_WritePin+0x40>
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	6a 95       	dec	r22
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_WritePin+0x3c>
     dc4:	b9 01       	movw	r22, r18
     dc6:	68 2b       	or	r22, r24
     dc8:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
     dca:	80 e0       	ldi	r24, 0x00	; 0
				break;
     dcc:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	06 2e       	mov	r0, r22
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_WritePin+0x5a>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_WritePin+0x56>
     dde:	80 95       	com	r24
     de0:	98 b3       	in	r25, 0x18	; 24
     de2:	89 23       	and	r24, r25
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	9a 01       	movw	r18, r20
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_WritePin+0x6e>
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	6a 95       	dec	r22
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_WritePin+0x6a>
     df2:	b9 01       	movw	r22, r18
     df4:	68 2b       	or	r22, r24
     df6:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
     df8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     dfa:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	06 2e       	mov	r0, r22
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_WritePin+0x88>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_WritePin+0x84>
     e0c:	80 95       	com	r24
     e0e:	95 b3       	in	r25, 0x15	; 21
     e10:	89 23       	and	r24, r25
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	9a 01       	movw	r18, r20
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_WritePin+0x9c>
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	6a 95       	dec	r22
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_WritePin+0x98>
     e20:	b9 01       	movw	r22, r18
     e22:	68 2b       	or	r22, r24
     e24:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
     e26:	80 e0       	ldi	r24, 0x00	; 0
				break;
     e28:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	06 2e       	mov	r0, r22
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_WritePin+0xb6>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_WritePin+0xb2>
     e3a:	80 95       	com	r24
     e3c:	92 b3       	in	r25, 0x12	; 18
     e3e:	89 23       	and	r24, r25
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	9a 01       	movw	r18, r20
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_WritePin+0xca>
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	6a 95       	dec	r22
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_WritePin+0xc6>
     e4e:	b9 01       	movw	r22, r18
     e50:	68 2b       	or	r22, r24
     e52:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
     e54:	80 e0       	ldi	r24, 0x00	; 0
				break;
     e56:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     e60:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     e62:	08 95       	ret

00000e64 <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
     e64:	68 30       	cpi	r22, 0x08	; 8
     e66:	08 f0       	brcs	.+2      	; 0xe6a <DIO_TogglePin+0x6>
     e68:	42 c0       	rjmp	.+132    	; 0xeee <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	b1 f0       	breq	.+44     	; 0xe9a <DIO_TogglePin+0x36>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	30 f0       	brcs	.+12     	; 0xe7e <DIO_TogglePin+0x1a>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	01 f1       	breq	.+64     	; 0xeb6 <DIO_TogglePin+0x52>
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	09 f0       	breq	.+2      	; 0xe7c <DIO_TogglePin+0x18>
     e7a:	3b c0       	rjmp	.+118    	; 0xef2 <DIO_TogglePin+0x8e>
     e7c:	2a c0       	rjmp	.+84     	; 0xed2 <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 01       	movw	r18, r24
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_TogglePin+0x26>
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	6a 95       	dec	r22
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_TogglePin+0x22>
     e8e:	b9 01       	movw	r22, r18
     e90:	8b b3       	in	r24, 0x1b	; 27
     e92:	68 27       	eor	r22, r24
     e94:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
     e96:	80 e0       	ldi	r24, 0x00	; 0
				break;
     e98:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_TogglePin+0x42>
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	6a 95       	dec	r22
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_TogglePin+0x3e>
     eaa:	b9 01       	movw	r22, r18
     eac:	88 b3       	in	r24, 0x18	; 24
     eae:	68 27       	eor	r22, r24
     eb0:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     eb4:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9c 01       	movw	r18, r24
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_TogglePin+0x5e>
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	6a 95       	dec	r22
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_TogglePin+0x5a>
     ec6:	b9 01       	movw	r22, r18
     ec8:	85 b3       	in	r24, 0x15	; 21
     eca:	68 27       	eor	r22, r24
     ecc:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
     ece:	80 e0       	ldi	r24, 0x00	; 0
				break;
     ed0:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9c 01       	movw	r18, r24
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_TogglePin+0x7a>
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	6a 95       	dec	r22
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_TogglePin+0x76>
     ee2:	b9 01       	movw	r22, r18
     ee4:	82 b3       	in	r24, 0x12	; 18
     ee6:	68 27       	eor	r22, r24
     ee8:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
     eea:	80 e0       	ldi	r24, 0x00	; 0
				break;
     eec:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
     ef4:	08 95       	ret

00000ef6 <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
     ef6:	68 30       	cpi	r22, 0x08	; 8
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_ReadPin+0x6>
     efa:	46 c0       	rjmp	.+140    	; 0xf88 <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
     efc:	41 15       	cp	r20, r1
     efe:	51 05       	cpc	r21, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <DIO_ReadPin+0xe>
     f02:	44 c0       	rjmp	.+136    	; 0xf8c <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	b1 f0       	breq	.+44     	; 0xf34 <DIO_ReadPin+0x3e>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	30 f0       	brcs	.+12     	; 0xf18 <DIO_ReadPin+0x22>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	01 f1       	breq	.+64     	; 0xf50 <DIO_ReadPin+0x5a>
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	09 f0       	breq	.+2      	; 0xf16 <DIO_ReadPin+0x20>
     f14:	3d c0       	rjmp	.+122    	; 0xf90 <DIO_ReadPin+0x9a>
     f16:	2a c0       	rjmp	.+84     	; 0xf6c <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
     f18:	89 b3       	in	r24, 0x19	; 25
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 01       	movw	r18, r24
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_ReadPin+0x2e>
     f20:	35 95       	asr	r19
     f22:	27 95       	ror	r18
     f24:	6a 95       	dec	r22
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_ReadPin+0x2a>
     f28:	b9 01       	movw	r22, r18
     f2a:	61 70       	andi	r22, 0x01	; 1
     f2c:	fa 01       	movw	r30, r20
     f2e:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
     f30:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f32:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
     f34:	86 b3       	in	r24, 0x16	; 22
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 01       	movw	r18, r24
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_ReadPin+0x4a>
     f3c:	35 95       	asr	r19
     f3e:	27 95       	ror	r18
     f40:	6a 95       	dec	r22
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_ReadPin+0x46>
     f44:	b9 01       	movw	r22, r18
     f46:	61 70       	andi	r22, 0x01	; 1
     f48:	fa 01       	movw	r30, r20
     f4a:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f4e:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
     f50:	83 b3       	in	r24, 0x13	; 19
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9c 01       	movw	r18, r24
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_ReadPin+0x66>
     f58:	35 95       	asr	r19
     f5a:	27 95       	ror	r18
     f5c:	6a 95       	dec	r22
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_ReadPin+0x62>
     f60:	b9 01       	movw	r22, r18
     f62:	61 70       	andi	r22, 0x01	; 1
     f64:	fa 01       	movw	r30, r20
     f66:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
     f68:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f6a:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
     f6c:	80 b3       	in	r24, 0x10	; 16
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9c 01       	movw	r18, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_ReadPin+0x82>
     f74:	35 95       	asr	r19
     f76:	27 95       	ror	r18
     f78:	6a 95       	dec	r22
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_ReadPin+0x7e>
     f7c:	b9 01       	movw	r22, r18
     f7e:	61 70       	andi	r22, 0x01	; 1
     f80:	fa 01       	movw	r30, r20
     f82:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
     f84:	80 e0       	ldi	r24, 0x00	; 0
				break;
     f86:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
     f90:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
     f92:	08 95       	ret

00000f94 <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
     f94:	68 30       	cpi	r22, 0x08	; 8
     f96:	08 f0       	brcs	.+2      	; 0xf9a <DIO_EnablePinPullup+0x6>
     f98:	4e c0       	rjmp	.+156    	; 0x1036 <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	c9 f0       	breq	.+50     	; 0xfd0 <DIO_EnablePinPullup+0x3c>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	30 f0       	brcs	.+12     	; 0xfae <DIO_EnablePinPullup+0x1a>
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	31 f1       	breq	.+76     	; 0xff2 <DIO_EnablePinPullup+0x5e>
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	09 f0       	breq	.+2      	; 0xfac <DIO_EnablePinPullup+0x18>
     faa:	47 c0       	rjmp	.+142    	; 0x103a <DIO_EnablePinPullup+0xa6>
     fac:	33 c0       	rjmp	.+102    	; 0x1014 <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c 01       	movw	r18, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_EnablePinPullup+0x26>
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_EnablePinPullup+0x22>
     fbe:	b9 01       	movw	r22, r18
     fc0:	92 2f       	mov	r25, r18
     fc2:	90 95       	com	r25
     fc4:	8b b3       	in	r24, 0x1b	; 27
     fc6:	89 23       	and	r24, r25
     fc8:	68 2b       	or	r22, r24
     fca:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
				break;
     fce:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 01       	movw	r18, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_EnablePinPullup+0x48>
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	6a 95       	dec	r22
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_EnablePinPullup+0x44>
     fe0:	b9 01       	movw	r22, r18
     fe2:	92 2f       	mov	r25, r18
     fe4:	90 95       	com	r25
     fe6:	88 b3       	in	r24, 0x18	; 24
     fe8:	89 23       	and	r24, r25
     fea:	68 2b       	or	r22, r24
     fec:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
     fee:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
     ff0:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9c 01       	movw	r18, r24
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_EnablePinPullup+0x6a>
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_EnablePinPullup+0x66>
    1002:	b9 01       	movw	r22, r18
    1004:	92 2f       	mov	r25, r18
    1006:	90 95       	com	r25
    1008:	85 b3       	in	r24, 0x15	; 21
    100a:	89 23       	and	r24, r25
    100c:	68 2b       	or	r22, r24
    100e:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1010:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    1012:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 01       	movw	r18, r24
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_EnablePinPullup+0x8c>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	6a 95       	dec	r22
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_EnablePinPullup+0x88>
    1024:	b9 01       	movw	r22, r18
    1026:	92 2f       	mov	r25, r18
    1028:	90 95       	com	r25
    102a:	82 b3       	in	r24, 0x12	; 18
    102c:	89 23       	and	r24, r25
    102e:	68 2b       	or	r22, r24
    1030:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1032:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1034:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    103c:	08 95       	ret

0000103e <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
    103e:	8f b7       	in	r24, 0x3f	; 63
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	8f bf       	out	0x3f, r24	; 63
}
    1044:	08 95       	ret

00001046 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   CLEAR_BIT(SREG, I);
    1046:	8f b7       	in	r24, 0x3f	; 63
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	8f bf       	out	0x3f, r24	; 63
    104c:	08 95       	ret

0000104e <ICU_Init>:

//APIs Implementation
ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    104e:	88 23       	and	r24, r24
    1050:	11 f5       	brne	.+68     	; 0x1096 <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	66 e0       	ldi	r22, 0x06	; 6
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    105c:	80 91 77 00 	lds	r24, 0x0077
    1060:	28 2f       	mov	r18, r24
    1062:	23 70       	andi	r18, 0x03	; 3
    1064:	9f b5       	in	r25, 0x2f	; 47
    1066:	9c 7f       	andi	r25, 0xFC	; 252
    1068:	92 2b       	or	r25, r18
    106a:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    106c:	86 95       	lsr	r24
    106e:	86 95       	lsr	r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	83 70       	andi	r24, 0x03	; 3
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	9e b5       	in	r25, 0x2e	; 46
    1084:	97 7e       	andi	r25, 0xE7	; 231
    1086:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    1088:	88 7f       	andi	r24, 0xF8	; 248
    108a:	90 91 78 00 	lds	r25, 0x0078
    108e:	89 2b       	or	r24, r25
    1090:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    1092:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1094:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1096:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    1098:	08 95       	ret

0000109a <ICU_Reset>:

ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    109a:	62 30       	cpi	r22, 0x02	; 2
    109c:	70 f4       	brcc	.+28     	; 0x10ba <ICU_Reset+0x20>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    109e:	88 23       	and	r24, r24
    10a0:	71 f4       	brne	.+28     	; 0x10be <ICU_Reset+0x24>
		{
			#if  ICU1
			case ICU_1:
			REG_WRITE(TCNT1,CLEAR_REGISTER);
    10a2:	1d bc       	out	0x2d, r1	; 45
    10a4:	1c bc       	out	0x2c, r1	; 44
			BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    10a6:	62 95       	swap	r22
    10a8:	66 0f       	add	r22, r22
    10aa:	66 0f       	add	r22, r22
    10ac:	60 7c       	andi	r22, 0xC0	; 192
    10ae:	8e b5       	in	r24, 0x2e	; 46
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	68 2b       	or	r22, r24
    10b4:	6e bd       	out	0x2e, r22	; 46
			//BIT_WRITE(TIFR,TOV1,BIT_HIGH);
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
    10b6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    10b8:	08 95       	ret
ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
			break;
			#endif
			default:
			u8_ErrorState = ERROR_NOK;
    10be:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return u8_ErrorState;
}
    10c0:	08 95       	ret

000010c2 <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	8b 01       	movw	r16, r22
    10d8:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <ICU_UpdateTimeOn+0x20>
    10e0:	9c c0       	rjmp	.+312    	; 0x121a <ICU_UpdateTimeOn+0x158>
    10e2:	41 15       	cp	r20, r1
    10e4:	51 05       	cpc	r21, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <ICU_UpdateTimeOn+0x28>
    10e8:	9a c0       	rjmp	.+308    	; 0x121e <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <ICU_UpdateTimeOn+0x2e>
    10ee:	99 c0       	rjmp	.+306    	; 0x1222 <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    10f0:	fb 01       	movw	r30, r22
    10f2:	80 81       	ld	r24, Z
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 f0       	breq	.+36     	; 0x111c <ICU_UpdateTimeOn+0x5a>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	20 f0       	brcs	.+8      	; 0x1104 <ICU_UpdateTimeOn+0x42>
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	09 f0       	breq	.+2      	; 0x1102 <ICU_UpdateTimeOn+0x40>
    1100:	92 c0       	rjmp	.+292    	; 0x1226 <ICU_UpdateTimeOn+0x164>
    1102:	26 c0       	rjmp	.+76     	; 0x1150 <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	0e 94 4d 08 	call	0x109a	; 0x109a <ICU_Reset>
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <ICU_UpdateTimeOn+0x50>
    1110:	8c c0       	rjmp	.+280    	; 0x122a <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	8e c0       	rjmp	.+284    	; 0x1238 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    111c:	88 b7       	in	r24, 0x38	; 56
    111e:	82 95       	swap	r24
    1120:	86 95       	lsr	r24
    1122:	87 70       	andi	r24, 0x07	; 7
    1124:	80 ff       	sbrs	r24, 0
    1126:	83 c0       	rjmp	.+262    	; 0x122e <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	0e 94 4d 08 	call	0x109a	; 0x109a <ICU_Reset>
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <ICU_UpdateTimeOn+0x74>
    1134:	7e c0       	rjmp	.+252    	; 0x1232 <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    1136:	10 92 ce 00 	sts	0x00CE, r1
    113a:	10 92 cf 00 	sts	0x00CF, r1
    113e:	10 92 d0 00 	sts	0x00D0, r1
    1142:	10 92 d1 00 	sts	0x00D1, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	74 c0       	rjmp	.+232    	; 0x1238 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1150:	88 b7       	in	r24, 0x38	; 56
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	80 ff       	sbrs	r24, 0
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    115a:	80 91 ce 00 	lds	r24, 0x00CE
    115e:	90 91 cf 00 	lds	r25, 0x00CF
    1162:	a0 91 d0 00 	lds	r26, 0x00D0
    1166:	b0 91 d1 00 	lds	r27, 0x00D1
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	a1 1d       	adc	r26, r1
    116e:	b1 1d       	adc	r27, r1
    1170:	80 93 ce 00 	sts	0x00CE, r24
    1174:	90 93 cf 00 	sts	0x00CF, r25
    1178:	a0 93 d0 00 	sts	0x00D0, r26
    117c:	b0 93 d1 00 	sts	0x00D1, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1180:	88 b7       	in	r24, 0x38	; 56
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1186:	88 b7       	in	r24, 0x38	; 56
    1188:	82 95       	swap	r24
    118a:	86 95       	lsr	r24
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	80 ff       	sbrs	r24, 0
    1190:	52 c0       	rjmp	.+164    	; 0x1236 <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1192:	60 91 ce 00 	lds	r22, 0x00CE
    1196:	70 91 cf 00 	lds	r23, 0x00CF
    119a:	80 91 d0 00 	lds	r24, 0x00D0
    119e:	90 91 d1 00 	lds	r25, 0x00D1
    11a2:	2f ef       	ldi	r18, 0xFF	; 255
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsi3>
    11ae:	ab 01       	movw	r20, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	86 b5       	in	r24, 0x26	; 38
    11b4:	97 b5       	in	r25, 0x27	; 39
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	84 0f       	add	r24, r20
    11bc:	95 1f       	adc	r25, r21
    11be:	a6 1f       	adc	r26, r22
    11c0:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double64_t)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    11c2:	28 2f       	mov	r18, r24
    11c4:	39 2f       	mov	r19, r25
    11c6:	4a 2f       	mov	r20, r26
    11c8:	5b 2f       	mov	r21, r27
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__floatundisf>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	60 91 79 00 	lds	r22, 0x0079
    11de:	70 91 7a 00 	lds	r23, 0x007A
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatunsisf>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	34 e2       	ldi	r19, 0x24	; 36
    11ee:	44 e7       	ldi	r20, 0x74	; 116
    11f0:	5b e4       	ldi	r21, 0x4B	; 75
    11f2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	f7 01       	movw	r30, r14
    1208:	80 83       	st	Z, r24
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	a2 83       	std	Z+2, r26	; 0x02
    120e:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	f8 01       	movw	r30, r16
    1214:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <ICU_UpdateTimeOn+0x176>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1236:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	08 95       	ret

0000124e <ICU_GetICR1Registert>:

ERROR_STATE_t ICU_GetICR1Registert(uint8_t ICUNumber,ptr_uint16_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    124e:	88 23       	and	r24, r24
    1250:	39 f4       	brne	.+14     	; 0x1260 <ICU_GetICR1Registert+0x12>
	{
		#if  ICU1
			case ICU_1:
				*Register=ICR1;
    1252:	86 b5       	in	r24, 0x26	; 38
    1254:	97 b5       	in	r25, 0x27	; 39
    1256:	fb 01       	movw	r30, r22
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    125c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    125e:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1262:	08 95       	ret

00001264 <ICU_GetTIFRRegistert>:

ERROR_STATE_t ICU_GetTIFRRegistert(uint8_t ICUNumber,ptr_uint8_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1264:	88 23       	and	r24, r24
    1266:	29 f4       	brne	.+10     	; 0x1272 <ICU_GetTIFRRegistert+0xe>
	{
		#if  ICU1
			case ICU_1:
				*Register=TIFR;
    1268:	88 b7       	in	r24, 0x38	; 56
    126a:	fb 01       	movw	r30, r22
    126c:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    126e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1270:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1274:	08 95       	ret

00001276 <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1276:	88 23       	and	r24, r24
    1278:	19 f4       	brne	.+6      	; 0x1280 <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
    127a:	7d bd       	out	0x2d, r23	; 45
    127c:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
    127e:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
    1282:	08 95       	ret

00001284 <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1284:	88 23       	and	r24, r24
    1286:	79 f4       	brne	.+30     	; 0x12a6 <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1288:	66 23       	and	r22, r22
    128a:	19 f0       	breq	.+6      	; 0x1292 <ICU_EnableInterrupt+0xe>
    128c:	61 30       	cpi	r22, 0x01	; 1
    128e:	69 f4       	brne	.+26     	; 0x12aa <ICU_EnableInterrupt+0x26>
    1290:	05 c0       	rjmp	.+10     	; 0x129c <ICU_EnableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
    1292:	89 b7       	in	r24, 0x39	; 57
    1294:	84 60       	ori	r24, 0x04	; 4
    1296:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1298:	80 e0       	ldi	r24, 0x00	; 0
						break;
    129a:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
    129c:	89 b7       	in	r24, 0x39	; 57
    129e:	80 62       	ori	r24, 0x20	; 32
    12a0:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    12a2:	80 e0       	ldi	r24, 0x00	; 0
						break;
    12a4:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    12ac:	08 95       	ret

000012ae <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    12ae:	88 23       	and	r24, r24
    12b0:	79 f4       	brne	.+30     	; 0x12d0 <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    12b2:	66 23       	and	r22, r22
    12b4:	19 f0       	breq	.+6      	; 0x12bc <ICU_DisableInterrupt+0xe>
    12b6:	61 30       	cpi	r22, 0x01	; 1
    12b8:	69 f4       	brne	.+26     	; 0x12d4 <ICU_DisableInterrupt+0x26>
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <ICU_DisableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
    12bc:	89 b7       	in	r24, 0x39	; 57
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    12c2:	80 e0       	ldi	r24, 0x00	; 0
						break;
    12c4:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
    12c6:	89 b7       	in	r24, 0x39	; 57
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
						break;
    12ce:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    12d6:	08 95       	ret

000012d8 <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
    12d8:	41 15       	cp	r20, r1
    12da:	51 05       	cpc	r21, r1
    12dc:	99 f0       	breq	.+38     	; 0x1304 <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    12de:	88 23       	and	r24, r24
    12e0:	99 f4       	brne	.+38     	; 0x1308 <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
    12e2:	66 23       	and	r22, r22
    12e4:	19 f0       	breq	.+6      	; 0x12ec <ICU_SetCallback+0x14>
    12e6:	61 30       	cpi	r22, 0x01	; 1
    12e8:	89 f4       	brne	.+34     	; 0x130c <ICU_SetCallback+0x34>
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <ICU_SetCallback+0x20>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
    12ec:	50 93 d3 00 	sts	0x00D3, r21
    12f0:	40 93 d2 00 	sts	0x00D2, r20
							u8_ErrorState=ERROR_OK;
    12f4:	80 e0       	ldi	r24, 0x00	; 0
							break;
    12f6:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
    12f8:	50 93 d5 00 	sts	0x00D5, r21
    12fc:	40 93 d4 00 	sts	0x00D4, r20
							u8_ErrorState=ERROR_OK;
    1300:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1302:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
    130e:	08 95       	ret

00001310 <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
   gptr_CallbackOverflow();
    1332:	e0 91 d2 00 	lds	r30, 0x00D2
    1336:	f0 91 d3 00 	lds	r31, 0x00D3
    133a:	09 95       	icall
}
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
   gptr_CallbackInputCapture();
    1380:	e0 91 d4 00 	lds	r30, 0x00D4
    1384:	f0 91 d5 00 	lds	r31, 0x00D5
    1388:	09 95       	icall
}
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    13ac:	88 23       	and	r24, r24
    13ae:	69 f5       	brne	.+90     	; 0x140a <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    13b0:	20 91 7c 00 	lds	r18, 0x007C
    13b4:	42 2f       	mov	r20, r18
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	41 70       	andi	r20, 0x01	; 1
    13ba:	50 70       	andi	r21, 0x00	; 0
    13bc:	00 24       	eor	r0, r0
    13be:	56 95       	lsr	r21
    13c0:	47 95       	ror	r20
    13c2:	07 94       	ror	r0
    13c4:	56 95       	lsr	r21
    13c6:	47 95       	ror	r20
    13c8:	07 94       	ror	r0
    13ca:	54 2f       	mov	r21, r20
    13cc:	40 2d       	mov	r20, r0
    13ce:	83 b7       	in	r24, 0x33	; 51
    13d0:	8f 7b       	andi	r24, 0xBF	; 191
    13d2:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    13d4:	47 7f       	andi	r20, 0xF7	; 247
    13d6:	26 95       	lsr	r18
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	21 70       	andi	r18, 0x01	; 1
    13dc:	30 70       	andi	r19, 0x00	; 0
    13de:	c9 01       	movw	r24, r18
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    13ee:	8f 7c       	andi	r24, 0xCF	; 207
    13f0:	90 91 7d 00 	lds	r25, 0x007D
    13f4:	92 95       	swap	r25
    13f6:	90 7f       	andi	r25, 0xF0	; 240
    13f8:	89 2b       	or	r24, r25
    13fa:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	63 e0       	ldi	r22, 0x03	; 3
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    1406:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1408:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    140c:	08 95       	ret

0000140e <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    140e:	88 23       	and	r24, r24
    1410:	41 f4       	brne	.+16     	; 0x1422 <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1412:	83 b7       	in	r24, 0x33	; 51
    1414:	88 7f       	andi	r24, 0xF8	; 248
    1416:	90 91 7b 00 	lds	r25, 0x007B
    141a:	89 2b       	or	r24, r25
    141c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    141e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1420:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1424:	08 95       	ret

00001426 <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1426:	88 23       	and	r24, r24
    1428:	29 f4       	brne	.+10     	; 0x1434 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    142a:	83 b7       	in	r24, 0x33	; 51
    142c:	88 7f       	andi	r24, 0xF8	; 248
    142e:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1430:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1432:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1434:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1436:	08 95       	ret

00001438 <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1438:	88 23       	and	r24, r24
    143a:	51 f4       	brne	.+20     	; 0x1450 <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    143c:	90 91 7d 00 	lds	r25, 0x007D
    1440:	92 95       	swap	r25
    1442:	90 7f       	andi	r25, 0xF0	; 240
    1444:	83 b7       	in	r24, 0x33	; 51
    1446:	8f 7c       	andi	r24, 0xCF	; 207
    1448:	89 2b       	or	r24, r25
    144a:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    144c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    144e:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    1452:	08 95       	ret

00001454 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1454:	88 23       	and	r24, r24
    1456:	29 f4       	brne	.+10     	; 0x1462 <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    1458:	83 b7       	in	r24, 0x33	; 51
    145a:	8f 7c       	andi	r24, 0xCF	; 207
    145c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    145e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1460:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1464:	08 95       	ret

00001466 <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    1466:	96 2f       	mov	r25, r22
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	94 36       	cpi	r25, 0x64	; 100
    146c:	10 f5       	brcc	.+68     	; 0x14b2 <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    146e:	88 23       	and	r24, r24
    1470:	11 f5       	brne	.+68     	; 0x14b6 <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    1472:	80 91 7d 00 	lds	r24, 0x007D
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	01 f5       	brne	.+64     	; 0x14ba <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__floatsisf>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	48 ec       	ldi	r20, 0xC8	; 200
    148a:	52 e4       	ldi	r21, 0x42	; 66
    148c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	53 e4       	ldi	r21, 0x43	; 67
    1498:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__mulsf3>
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__subsf3>
    14a8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fixunssfsi>
    14ac:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    14ae:	80 e0       	ldi	r24, 0x00	; 0
							break;
    14b0:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    14bc:	08 95       	ret

000014be <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <GetFreqPrescaleRatio+0x6>
    14c2:	51 c0       	rjmp	.+162    	; 0x1566 <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	fc 01       	movw	r30, r24
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	8e 0f       	add	r24, r30
    14ce:	9f 1f       	adc	r25, r31
    14d0:	fc 01       	movw	r30, r24
    14d2:	e9 57       	subi	r30, 0x79	; 121
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	21 f1       	breq	.+72     	; 0x1524 <GetFreqPrescaleRatio+0x66>
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	30 f4       	brcc	.+12     	; 0x14ec <GetFreqPrescaleRatio+0x2e>
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	51 f0       	breq	.+20     	; 0x14f8 <GetFreqPrescaleRatio+0x3a>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	09 f0       	breq	.+2      	; 0x14ea <GetFreqPrescaleRatio+0x2c>
    14e8:	a4 c0       	rjmp	.+328    	; 0x1632 <GetFreqPrescaleRatio+0x174>
    14ea:	11 c0       	rjmp	.+34     	; 0x150e <GetFreqPrescaleRatio+0x50>
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	29 f1       	breq	.+74     	; 0x153a <GetFreqPrescaleRatio+0x7c>
    14f0:	85 30       	cpi	r24, 0x05	; 5
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <GetFreqPrescaleRatio+0x38>
    14f4:	9e c0       	rjmp	.+316    	; 0x1632 <GetFreqPrescaleRatio+0x174>
    14f6:	2c c0       	rjmp	.+88     	; 0x1550 <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e8       	ldi	r26, 0x80	; 128
    14fe:	bd e3       	ldi	r27, 0x3D	; 61
    1500:	fb 01       	movw	r30, r22
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	a2 83       	std	Z+2, r26	; 0x02
    1508:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    150a:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    150c:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	fb 01       	movw	r30, r22
    1518:	80 83       	st	Z, r24
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	a2 83       	std	Z+2, r26	; 0x02
    151e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1520:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1522:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e8       	ldi	r26, 0x80	; 128
    152a:	b0 e4       	ldi	r27, 0x40	; 64
    152c:	fb 01       	movw	r30, r22
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	a2 83       	std	Z+2, r26	; 0x02
    1534:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1536:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1538:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e8       	ldi	r26, 0x80	; 128
    1540:	b1 e4       	ldi	r27, 0x41	; 65
    1542:	fb 01       	movw	r30, r22
    1544:	80 83       	st	Z, r24
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	a2 83       	std	Z+2, r26	; 0x02
    154a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    154c:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    154e:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e8       	ldi	r26, 0x80	; 128
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	fb 01       	movw	r30, r22
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1562:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1564:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	09 f0       	breq	.+2      	; 0x156c <GetFreqPrescaleRatio+0xae>
    156a:	65 c0       	rjmp	.+202    	; 0x1636 <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    156c:	80 91 8f 00 	lds	r24, 0x008F
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	99 f1       	breq	.+102    	; 0x15da <GetFreqPrescaleRatio+0x11c>
    1574:	85 30       	cpi	r24, 0x05	; 5
    1576:	40 f4       	brcc	.+16     	; 0x1588 <GetFreqPrescaleRatio+0xca>
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	c9 f0       	breq	.+50     	; 0x15ae <GetFreqPrescaleRatio+0xf0>
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	10 f5       	brcc	.+68     	; 0x15c4 <GetFreqPrescaleRatio+0x106>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <GetFreqPrescaleRatio+0xc8>
    1584:	5a c0       	rjmp	.+180    	; 0x163a <GetFreqPrescaleRatio+0x17c>
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <GetFreqPrescaleRatio+0xda>
    1588:	86 30       	cpi	r24, 0x06	; 6
    158a:	e9 f1       	breq	.+122    	; 0x1606 <GetFreqPrescaleRatio+0x148>
    158c:	86 30       	cpi	r24, 0x06	; 6
    158e:	80 f1       	brcs	.+96     	; 0x15f0 <GetFreqPrescaleRatio+0x132>
    1590:	87 30       	cpi	r24, 0x07	; 7
    1592:	09 f0       	breq	.+2      	; 0x1596 <GetFreqPrescaleRatio+0xd8>
    1594:	52 c0       	rjmp	.+164    	; 0x163a <GetFreqPrescaleRatio+0x17c>
    1596:	42 c0       	rjmp	.+132    	; 0x161c <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 e8       	ldi	r26, 0x80	; 128
    159e:	bd e3       	ldi	r27, 0x3D	; 61
    15a0:	fb 01       	movw	r30, r22
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    15aa:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    15ac:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	bf e3       	ldi	r27, 0x3F	; 63
    15b6:	fb 01       	movw	r30, r22
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    15c2:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e4       	ldi	r27, 0x40	; 64
    15cc:	fb 01       	movw	r30, r22
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    15d8:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e8       	ldi	r26, 0x80	; 128
    15e0:	b0 e4       	ldi	r27, 0x40	; 64
    15e2:	fb 01       	movw	r30, r22
    15e4:	80 83       	st	Z, r24
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	a2 83       	std	Z+2, r26	; 0x02
    15ea:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    15ec:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    15ee:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b1 e4       	ldi	r27, 0x41	; 65
    15f8:	fb 01       	movw	r30, r22
    15fa:	80 83       	st	Z, r24
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	a2 83       	std	Z+2, r26	; 0x02
    1600:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1602:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1604:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e8       	ldi	r26, 0x80	; 128
    160c:	b1 e4       	ldi	r27, 0x41	; 65
    160e:	fb 01       	movw	r30, r22
    1610:	80 83       	st	Z, r24
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	a2 83       	std	Z+2, r26	; 0x02
    1616:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1618:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    161a:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e8       	ldi	r26, 0x80	; 128
    1622:	b2 e4       	ldi	r27, 0x42	; 66
    1624:	fb 01       	movw	r30, r22
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    162e:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1630:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1632:	8c ef       	ldi	r24, 0xFC	; 252
    1634:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    163a:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    163c:	08 95       	ret

0000163e <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	81 f0       	breq	.+32     	; 0x1662 <TIM_Init+0x24>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	18 f0       	brcs	.+6      	; 0x164c <TIM_Init+0xe>
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	49 f5       	brne	.+82     	; 0x169c <TIM_Init+0x5e>
    164a:	19 c0       	rjmp	.+50     	; 0x167e <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    164c:	80 91 87 00 	lds	r24, 0x0087
    1650:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    1652:	89 b7       	in	r24, 0x39	; 57
    1654:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    1656:	90 91 88 00 	lds	r25, 0x0088
    165a:	89 2b       	or	r24, r25
    165c:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    165e:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    1660:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    1662:	80 91 8a 00 	lds	r24, 0x008A
    1666:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    1668:	99 b7       	in	r25, 0x39	; 57
    166a:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    166c:	80 91 8b 00 	lds	r24, 0x008B
    1670:	88 0f       	add	r24, r24
    1672:	88 0f       	add	r24, r24
    1674:	88 0f       	add	r24, r24
    1676:	89 2b       	or	r24, r25
    1678:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    167a:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    167c:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    167e:	80 91 8d 00 	lds	r24, 0x008D
    1682:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    1684:	99 b7       	in	r25, 0x39	; 57
    1686:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    1688:	80 91 8e 00 	lds	r24, 0x008E
    168c:	82 95       	swap	r24
    168e:	88 0f       	add	r24, r24
    1690:	88 0f       	add	r24, r24
    1692:	80 7c       	andi	r24, 0xC0	; 192
    1694:	89 2b       	or	r24, r25
    1696:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1698:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    169a:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    169c:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    169e:	08 95       	ret

000016a0 <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	79 f0       	breq	.+30     	; 0x16c2 <TIM_Start+0x22>
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	18 f0       	brcs	.+6      	; 0x16ae <TIM_Start+0xe>
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	09 f5       	brne	.+66     	; 0x16ee <TIM_Start+0x4e>
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    16ae:	a2 e5       	ldi	r26, 0x52	; 82
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    16b2:	e3 e5       	ldi	r30, 0x53	; 83
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    16b8:	a4 e4       	ldi	r26, 0x44	; 68
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    16bc:	e5 e4       	ldi	r30, 0x45	; 69
    16be:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    16c2:	ac e4       	ldi	r26, 0x4C	; 76
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    16c6:	ee e4       	ldi	r30, 0x4E	; 78
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    16ca:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    16cc:	20 81       	ld	r18, Z
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	dc 01       	movw	r26, r24
    16d2:	aa 0f       	add	r26, r26
    16d4:	bb 1f       	adc	r27, r27
    16d6:	8a 0f       	add	r24, r26
    16d8:	9b 1f       	adc	r25, r27
    16da:	dc 01       	movw	r26, r24
    16dc:	a9 57       	subi	r26, 0x79	; 121
    16de:	bf 4f       	sbci	r27, 0xFF	; 255
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	8c 91       	ld	r24, X
    16e4:	12 97       	sbiw	r26, 0x02	; 2
    16e6:	82 2b       	or	r24, r18
    16e8:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    16ee:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    16f0:	08 95       	ret

000016f2 <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	59 f0       	breq	.+22     	; 0x170c <TIM_Stop+0x1a>
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <TIM_Stop+0xe>
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	71 f4       	brne	.+28     	; 0x171a <TIM_Stop+0x28>
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1700:	e3 e5       	ldi	r30, 0x53	; 83
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1706:	e5 e4       	ldi	r30, 0x45	; 69
    1708:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    1710:	80 81       	ld	r24, Z
    1712:	88 7f       	andi	r24, 0xF8	; 248
    1714:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    171a:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    171c:	08 95       	ret

0000171e <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    171e:	61 15       	cp	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <TIM_GetStatus+0x8>
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	11 f1       	breq	.+68     	; 0x176e <TIM_GetStatus+0x50>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	20 f0       	brcs	.+8      	; 0x1736 <TIM_GetStatus+0x18>
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	09 f0       	breq	.+2      	; 0x1734 <TIM_GetStatus+0x16>
    1732:	5f c0       	rjmp	.+190    	; 0x17f2 <TIM_GetStatus+0xd4>
    1734:	41 c0       	rjmp	.+130    	; 0x17b8 <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1736:	80 91 87 00 	lds	r24, 0x0087
    173a:	88 23       	and	r24, r24
    173c:	51 f4       	brne	.+20     	; 0x1752 <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    173e:	08 b6       	in	r0, 0x38	; 56
    1740:	00 fe       	sbrs	r0, 0
    1742:	59 c0       	rjmp	.+178    	; 0x17f6 <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1744:	fb 01       	movw	r30, r22
    1746:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    1748:	88 b7       	in	r24, 0x38	; 56
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1752:	88 30       	cpi	r24, 0x08	; 8
    1754:	09 f0       	breq	.+2      	; 0x1758 <TIM_GetStatus+0x3a>
    1756:	51 c0       	rjmp	.+162    	; 0x17fa <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    1758:	08 b6       	in	r0, 0x38	; 56
    175a:	01 fe       	sbrs	r0, 1
    175c:	50 c0       	rjmp	.+160    	; 0x17fe <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	fb 01       	movw	r30, r22
    1762:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    1764:	88 b7       	in	r24, 0x38	; 56
    1766:	82 60       	ori	r24, 0x02	; 2
    1768:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    176e:	80 91 8a 00 	lds	r24, 0x008A
    1772:	88 23       	and	r24, r24
    1774:	51 f4       	brne	.+20     	; 0x178a <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    1776:	08 b6       	in	r0, 0x38	; 56
    1778:	02 fe       	sbrs	r0, 2
    177a:	43 c0       	rjmp	.+134    	; 0x1802 <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    177c:	fb 01       	movw	r30, r22
    177e:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    1780:	88 b7       	in	r24, 0x38	; 56
    1782:	84 60       	ori	r24, 0x04	; 4
    1784:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    178a:	88 30       	cpi	r24, 0x08	; 8
    178c:	e1 f5       	brne	.+120    	; 0x1806 <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    178e:	88 b7       	in	r24, 0x38	; 56
    1790:	84 ff       	sbrs	r24, 4
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	fb 01       	movw	r30, r22
    1798:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    179a:	88 b7       	in	r24, 0x38	; 56
    179c:	80 61       	ori	r24, 0x10	; 16
    179e:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    17a4:	83 ff       	sbrs	r24, 3
    17a6:	31 c0       	rjmp	.+98     	; 0x180a <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	fb 01       	movw	r30, r22
    17ac:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    17ae:	88 b7       	in	r24, 0x38	; 56
    17b0:	88 60       	ori	r24, 0x08	; 8
    17b2:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    17b8:	80 91 8d 00 	lds	r24, 0x008D
    17bc:	88 23       	and	r24, r24
    17be:	51 f4       	brne	.+20     	; 0x17d4 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    17c0:	08 b6       	in	r0, 0x38	; 56
    17c2:	06 fe       	sbrs	r0, 6
    17c4:	24 c0       	rjmp	.+72     	; 0x180e <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    17c6:	fb 01       	movw	r30, r22
    17c8:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    17ca:	88 b7       	in	r24, 0x38	; 56
    17cc:	80 64       	ori	r24, 0x40	; 64
    17ce:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    17d4:	88 30       	cpi	r24, 0x08	; 8
    17d6:	e9 f4       	brne	.+58     	; 0x1812 <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    17d8:	08 b6       	in	r0, 0x38	; 56
    17da:	07 fe       	sbrs	r0, 7
    17dc:	1c c0       	rjmp	.+56     	; 0x1816 <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	fb 01       	movw	r30, r22
    17e2:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    17e4:	88 b7       	in	r24, 0x38	; 56
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    17f2:	8e ef       	ldi	r24, 0xFE	; 254
    17f4:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    17f6:	8d ef       	ldi	r24, 0xFD	; 253
    17f8:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    17fe:	8d ef       	ldi	r24, 0xFD	; 253
    1800:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1802:	8d ef       	ldi	r24, 0xFD	; 253
    1804:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    180a:	8d ef       	ldi	r24, 0xFD	; 253
    180c:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    180e:	8d ef       	ldi	r24, 0xFD	; 253
    1810:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1816:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1818:	08 95       	ret

0000181a <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    181a:	8f 92       	push	r8
    181c:	9f 92       	push	r9
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <TIM_DelayUs+0x18>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <TIM_DelayUs+0x1a>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	18 2f       	mov	r17, r24
    183a:	6a 01       	movw	r12, r20
    183c:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	08 f0       	brcs	.+2      	; 0x1844 <TIM_DelayUs+0x2a>
    1842:	5c c0       	rjmp	.+184    	; 0x18fc <TIM_DelayUs+0xe2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <TIM_DelayUs+0x32>
    184a:	5a c0       	rjmp	.+180    	; 0x1900 <TIM_DelayUs+0xe6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    184c:	30 93 d7 00 	sts	0x00D7, r19
    1850:	20 93 d6 00 	sts	0x00D6, r18
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1854:	80 91 d8 00 	lds	r24, 0x00D8
    1858:	88 23       	and	r24, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <TIM_DelayUs+0x44>
    185c:	53 c0       	rjmp	.+166    	; 0x1904 <TIM_DelayUs+0xea>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    185e:	81 2f       	mov	r24, r17
    1860:	be 01       	movw	r22, r28
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	0e 94 5f 0a 	call	0x14be	; 0x14be <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    186a:	8c 3f       	cpi	r24, 0xFC	; 252
    186c:	09 f4       	brne	.+2      	; 0x1870 <TIM_DelayUs+0x56>
    186e:	4c c0       	rjmp	.+152    	; 0x1908 <TIM_DelayUs+0xee>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1870:	89 80       	ldd	r8, Y+1	; 0x01
    1872:	9a 80       	ldd	r9, Y+2	; 0x02
    1874:	ab 80       	ldd	r10, Y+3	; 0x03
    1876:	bc 80       	ldd	r11, Y+4	; 0x04
    1878:	c5 01       	movw	r24, r10
    187a:	b4 01       	movw	r22, r8
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__cmpsf2>
    1886:	88 23       	and	r24, r24
    1888:	a1 f0       	breq	.+40     	; 0x18b2 <TIM_DelayUs+0x98>
      {
         TIM_Delay /= f32_FreqRatio;
    188a:	c7 01       	movw	r24, r14
    188c:	b6 01       	movw	r22, r12
    188e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatunsisf>
    1892:	a5 01       	movw	r20, r10
    1894:	94 01       	movw	r18, r8
    1896:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    189a:	46 2f       	mov	r20, r22
    189c:	57 2f       	mov	r21, r23
    189e:	68 2f       	mov	r22, r24
    18a0:	79 2f       	mov	r23, r25
    18a2:	cb 01       	movw	r24, r22
    18a4:	ba 01       	movw	r22, r20
    18a6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fixunssfsi>
    18aa:	c6 2e       	mov	r12, r22
    18ac:	d7 2e       	mov	r13, r23
    18ae:	e8 2e       	mov	r14, r24
    18b0:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    18b2:	bb 27       	eor	r27, r27
    18b4:	af 2d       	mov	r26, r15
    18b6:	9e 2d       	mov	r25, r14
    18b8:	8d 2d       	mov	r24, r13
    18ba:	80 93 d9 00 	sts	0x00D9, r24
    18be:	90 93 da 00 	sts	0x00DA, r25
    18c2:	a0 93 db 00 	sts	0x00DB, r26
    18c6:	b0 93 dc 00 	sts	0x00DC, r27
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    18ca:	6c 2d       	mov	r22, r12
    18cc:	c0 92 dd 00 	sts	0x00DD, r12
      
      if(gu32_Overflows == 0)
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	a1 05       	cpc	r26, r1
    18d4:	b1 05       	cpc	r27, r1
    18d6:	41 f4       	brne	.+16     	; 0x18e8 <TIM_DelayUs+0xce>
      {
         gu8_OverflowsComplete = HIGH;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 93 de 00 	sts	0x00DE, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    18de:	81 2f       	mov	r24, r17
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <TIM_DelayUs+0xd8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    18e8:	81 2f       	mov	r24, r17
    18ea:	6f ef       	ldi	r22, 0xFF	; 255
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 93 d8 00 	sts	0x00D8, r24
      return TIMER_E_PENDING;
    18f8:	8d ef       	ldi	r24, 0xFD	; 253
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <TIM_DelayUs+0xf0>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    18fc:	8e ef       	ldi	r24, 0xFE	; 254
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <TIM_DelayUs+0xf0>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <TIM_DelayUs+0xf0>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	01 c0       	rjmp	.+2      	; 0x190a <TIM_DelayUs+0xf0>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1908:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	9f 90       	pop	r9
    1926:	8f 90       	pop	r8
    1928:	08 95       	ret

0000192a <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    192a:	8f 92       	push	r8
    192c:	9f 92       	push	r9
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 d0       	rcall	.+0      	; 0x1942 <TIM_DelayMs+0x18>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <TIM_DelayMs+0x1a>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	18 2f       	mov	r17, r24
    194a:	04 2f       	mov	r16, r20
    194c:	f5 2e       	mov	r15, r21
    194e:	e6 2e       	mov	r14, r22
    1950:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	08 f0       	brcs	.+2      	; 0x1958 <TIM_DelayMs+0x2e>
    1956:	6d c0       	rjmp	.+218    	; 0x1a32 <TIM_DelayMs+0x108>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    1958:	21 15       	cp	r18, r1
    195a:	31 05       	cpc	r19, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <TIM_DelayMs+0x36>
    195e:	6b c0       	rjmp	.+214    	; 0x1a36 <TIM_DelayMs+0x10c>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    1960:	30 93 d7 00 	sts	0x00D7, r19
    1964:	20 93 d6 00 	sts	0x00D6, r18
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    1968:	80 91 d8 00 	lds	r24, 0x00D8
    196c:	88 23       	and	r24, r24
    196e:	09 f0       	breq	.+2      	; 0x1972 <TIM_DelayMs+0x48>
    1970:	64 c0       	rjmp	.+200    	; 0x1a3a <TIM_DelayMs+0x110>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1972:	81 2f       	mov	r24, r17
    1974:	be 01       	movw	r22, r28
    1976:	6f 5f       	subi	r22, 0xFF	; 255
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	0e 94 5f 0a 	call	0x14be	; 0x14be <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    197e:	8c 3f       	cpi	r24, 0xFC	; 252
    1980:	09 f4       	brne	.+2      	; 0x1984 <TIM_DelayMs+0x5a>
    1982:	5d c0       	rjmp	.+186    	; 0x1a3e <TIM_DelayMs+0x114>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1984:	89 80       	ldd	r8, Y+1	; 0x01
    1986:	9a 80       	ldd	r9, Y+2	; 0x02
    1988:	ab 80       	ldd	r10, Y+3	; 0x03
    198a:	bc 80       	ldd	r11, Y+4	; 0x04
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__cmpsf2>
    199a:	88 23       	and	r24, r24
    199c:	b1 f0       	breq	.+44     	; 0x19ca <TIM_DelayMs+0xa0>
      {
         TIM_Delay /= f32_FreqRatio;
    199e:	60 2f       	mov	r22, r16
    19a0:	7f 2d       	mov	r23, r15
    19a2:	8e 2d       	mov	r24, r14
    19a4:	9d 2d       	mov	r25, r13
    19a6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatunsisf>
    19aa:	a5 01       	movw	r20, r10
    19ac:	94 01       	movw	r18, r8
    19ae:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__divsf3>
    19b2:	46 2f       	mov	r20, r22
    19b4:	57 2f       	mov	r21, r23
    19b6:	68 2f       	mov	r22, r24
    19b8:	79 2f       	mov	r23, r25
    19ba:	cb 01       	movw	r24, r22
    19bc:	ba 01       	movw	r22, r20
    19be:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fixunssfsi>
    19c2:	06 2f       	mov	r16, r22
    19c4:	f7 2e       	mov	r15, r23
    19c6:	e8 2e       	mov	r14, r24
    19c8:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    19ca:	60 2f       	mov	r22, r16
    19cc:	7f 2d       	mov	r23, r15
    19ce:	8e 2d       	mov	r24, r14
    19d0:	9d 2d       	mov	r25, r13
    19d2:	28 ee       	ldi	r18, 0xE8	; 232
    19d4:	33 e0       	ldi	r19, 0x03	; 3
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsi3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	89 2f       	mov	r24, r25
    19e4:	9a 2f       	mov	r25, r26
    19e6:	ab 2f       	mov	r26, r27
    19e8:	bb 27       	eor	r27, r27
    19ea:	80 93 d9 00 	sts	0x00D9, r24
    19ee:	90 93 da 00 	sts	0x00DA, r25
    19f2:	a0 93 db 00 	sts	0x00DB, r26
    19f6:	b0 93 dc 00 	sts	0x00DC, r27
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    19fa:	68 ee       	ldi	r22, 0xE8	; 232
    19fc:	06 9f       	mul	r16, r22
    19fe:	60 2d       	mov	r22, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	60 93 dd 00 	sts	0x00DD, r22
      
      if(gu32_Overflows == 0)
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	a1 05       	cpc	r26, r1
    1a0a:	b1 05       	cpc	r27, r1
    1a0c:	41 f4       	brne	.+16     	; 0x1a1e <TIM_DelayMs+0xf4>
      {
         gu8_OverflowsComplete = HIGH;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	80 93 de 00 	sts	0x00DE, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    1a14:	81 2f       	mov	r24, r17
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <TIM_DelayMs+0xfe>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    1a1e:	81 2f       	mov	r24, r17
    1a20:	6f ef       	ldi	r22, 0xFF	; 255
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	80 93 d8 00 	sts	0x00D8, r24
      return TIMER_E_PENDING;
    1a2e:	8d ef       	ldi	r24, 0xFD	; 253
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <TIM_DelayMs+0x116>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1a32:	8e ef       	ldi	r24, 0xFE	; 254
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <TIM_DelayMs+0x116>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <TIM_DelayMs+0x116>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <TIM_DelayMs+0x116>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1a3e:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	08 95       	ret

00001a60 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	18 2f       	mov	r17, r24
   if(DelayReady == gEnu_State)
    1a6e:	20 91 d8 00 	lds	r18, 0x00D8
    1a72:	22 23       	and	r18, r18
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <TIM_DelayStatus+0x18>
    1a76:	49 c0       	rjmp	.+146    	; 0x1b0a <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    1a78:	80 91 d6 00 	lds	r24, 0x00D6
    1a7c:	90 91 d7 00 	lds	r25, 0x00D7
    1a80:	68 17       	cp	r22, r24
    1a82:	79 07       	cpc	r23, r25
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <TIM_DelayStatus+0x28>
    1a86:	43 c0       	rjmp	.+134    	; 0x1b0e <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    1a88:	21 30       	cpi	r18, 0x01	; 1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <TIM_DelayStatus+0x2e>
    1a8c:	42 c0       	rjmp	.+132    	; 0x1b12 <TIM_DelayStatus+0xb2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1a8e:	81 2f       	mov	r24, r17
    1a90:	be 01       	movw	r22, r28
    1a92:	6f 5f       	subi	r22, 0xFF	; 255
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	0e 94 8f 0b 	call	0x171e	; 0x171e <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1a9a:	88 23       	and	r24, r24
    1a9c:	a9 f5       	brne	.+106    	; 0x1b08 <TIM_DelayStatus+0xa8>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    1a9e:	80 91 de 00 	lds	r24, 0x00DE
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	41 f4       	brne	.+16     	; 0x1ab6 <TIM_DelayStatus+0x56>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    1aa6:	10 92 d8 00 	sts	0x00D8, r1
            gu8_OverflowsComplete = LOW;
    1aaa:	10 92 de 00 	sts	0x00DE, r1
            gu8_Remindar = 0;
    1aae:	10 92 dd 00 	sts	0x00DD, r1
            /* return success message. */
            return ERROR_OK;
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	2f c0       	rjmp	.+94     	; 0x1b14 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    1ab6:	80 91 d9 00 	lds	r24, 0x00D9
    1aba:	90 91 da 00 	lds	r25, 0x00DA
    1abe:	a0 91 db 00 	lds	r26, 0x00DB
    1ac2:	b0 91 dc 00 	lds	r27, 0x00DC
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	a1 09       	sbc	r26, r1
    1aca:	b1 09       	sbc	r27, r1
    1acc:	80 93 d9 00 	sts	0x00D9, r24
    1ad0:	90 93 da 00 	sts	0x00DA, r25
    1ad4:	a0 93 db 00 	sts	0x00DB, r26
    1ad8:	b0 93 dc 00 	sts	0x00DC, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	a1 05       	cpc	r26, r1
    1ae0:	b1 05       	cpc	r27, r1
    1ae2:	59 f4       	brne	.+22     	; 0x1afa <TIM_DelayStatus+0x9a>
         {
            gu8_OverflowsComplete = HIGH;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 de 00 	sts	0x00DE, r24
            TIM_Start(TIM_channel, gu8_Remindar);
    1aea:	60 91 dd 00 	lds	r22, 0x00DD
    1aee:	81 2f       	mov	r24, r17
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    1af6:	8d ef       	ldi	r24, 0xFD	; 253
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    1afa:	81 2f       	mov	r24, r17
    1afc:	6f ef       	ldi	r22, 0xFF	; 255
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1b04:	8d ef       	ldi	r24, 0xFD	; 253
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <TIM_DelayStatus+0xb4>
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    1b0a:	8b ef       	ldi	r24, 0xFB	; 251
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
   }      
    1b14:	0f 90       	pop	r0
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	08 95       	ret

00001b1e <__subsf3>:
    1b1e:	50 58       	subi	r21, 0x80	; 128

00001b20 <__addsf3>:
    1b20:	bb 27       	eor	r27, r27
    1b22:	aa 27       	eor	r26, r26
    1b24:	0e d0       	rcall	.+28     	; 0x1b42 <__addsf3x>
    1b26:	ae c1       	rjmp	.+860    	; 0x1e84 <__fp_round>
    1b28:	9f d1       	rcall	.+830    	; 0x1e68 <__fp_pscA>
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <__addsf3+0x18>
    1b2c:	a4 d1       	rcall	.+840    	; 0x1e76 <__fp_pscB>
    1b2e:	20 f0       	brcs	.+8      	; 0x1b38 <__addsf3+0x18>
    1b30:	31 f4       	brne	.+12     	; 0x1b3e <__addsf3+0x1e>
    1b32:	9f 3f       	cpi	r25, 0xFF	; 255
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <__addsf3+0x1a>
    1b36:	1e f4       	brtc	.+6      	; 0x1b3e <__addsf3+0x1e>
    1b38:	94 c1       	rjmp	.+808    	; 0x1e62 <__fp_nan>
    1b3a:	0e f4       	brtc	.+2      	; 0x1b3e <__addsf3+0x1e>
    1b3c:	e0 95       	com	r30
    1b3e:	e7 fb       	bst	r30, 7
    1b40:	8a c1       	rjmp	.+788    	; 0x1e56 <__fp_inf>

00001b42 <__addsf3x>:
    1b42:	e9 2f       	mov	r30, r25
    1b44:	b0 d1       	rcall	.+864    	; 0x1ea6 <__fp_split3>
    1b46:	80 f3       	brcs	.-32     	; 0x1b28 <__addsf3+0x8>
    1b48:	ba 17       	cp	r27, r26
    1b4a:	62 07       	cpc	r22, r18
    1b4c:	73 07       	cpc	r23, r19
    1b4e:	84 07       	cpc	r24, r20
    1b50:	95 07       	cpc	r25, r21
    1b52:	18 f0       	brcs	.+6      	; 0x1b5a <__addsf3x+0x18>
    1b54:	71 f4       	brne	.+28     	; 0x1b72 <__addsf3x+0x30>
    1b56:	9e f5       	brtc	.+102    	; 0x1bbe <__addsf3x+0x7c>
    1b58:	c8 c1       	rjmp	.+912    	; 0x1eea <__fp_zero>
    1b5a:	0e f4       	brtc	.+2      	; 0x1b5e <__addsf3x+0x1c>
    1b5c:	e0 95       	com	r30
    1b5e:	0b 2e       	mov	r0, r27
    1b60:	ba 2f       	mov	r27, r26
    1b62:	a0 2d       	mov	r26, r0
    1b64:	0b 01       	movw	r0, r22
    1b66:	b9 01       	movw	r22, r18
    1b68:	90 01       	movw	r18, r0
    1b6a:	0c 01       	movw	r0, r24
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	a0 01       	movw	r20, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	ff 27       	eor	r31, r31
    1b74:	59 1b       	sub	r21, r25
    1b76:	99 f0       	breq	.+38     	; 0x1b9e <__addsf3x+0x5c>
    1b78:	59 3f       	cpi	r21, 0xF9	; 249
    1b7a:	50 f4       	brcc	.+20     	; 0x1b90 <__addsf3x+0x4e>
    1b7c:	50 3e       	cpi	r21, 0xE0	; 224
    1b7e:	68 f1       	brcs	.+90     	; 0x1bda <__addsf3x+0x98>
    1b80:	1a 16       	cp	r1, r26
    1b82:	f0 40       	sbci	r31, 0x00	; 0
    1b84:	a2 2f       	mov	r26, r18
    1b86:	23 2f       	mov	r18, r19
    1b88:	34 2f       	mov	r19, r20
    1b8a:	44 27       	eor	r20, r20
    1b8c:	58 5f       	subi	r21, 0xF8	; 248
    1b8e:	f3 cf       	rjmp	.-26     	; 0x1b76 <__addsf3x+0x34>
    1b90:	46 95       	lsr	r20
    1b92:	37 95       	ror	r19
    1b94:	27 95       	ror	r18
    1b96:	a7 95       	ror	r26
    1b98:	f0 40       	sbci	r31, 0x00	; 0
    1b9a:	53 95       	inc	r21
    1b9c:	c9 f7       	brne	.-14     	; 0x1b90 <__addsf3x+0x4e>
    1b9e:	7e f4       	brtc	.+30     	; 0x1bbe <__addsf3x+0x7c>
    1ba0:	1f 16       	cp	r1, r31
    1ba2:	ba 0b       	sbc	r27, r26
    1ba4:	62 0b       	sbc	r22, r18
    1ba6:	73 0b       	sbc	r23, r19
    1ba8:	84 0b       	sbc	r24, r20
    1baa:	ba f0       	brmi	.+46     	; 0x1bda <__addsf3x+0x98>
    1bac:	91 50       	subi	r25, 0x01	; 1
    1bae:	a1 f0       	breq	.+40     	; 0x1bd8 <__addsf3x+0x96>
    1bb0:	ff 0f       	add	r31, r31
    1bb2:	bb 1f       	adc	r27, r27
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	c2 f7       	brpl	.-16     	; 0x1bac <__addsf3x+0x6a>
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <__addsf3x+0x98>
    1bbe:	ba 0f       	add	r27, r26
    1bc0:	62 1f       	adc	r22, r18
    1bc2:	73 1f       	adc	r23, r19
    1bc4:	84 1f       	adc	r24, r20
    1bc6:	48 f4       	brcc	.+18     	; 0x1bda <__addsf3x+0x98>
    1bc8:	87 95       	ror	r24
    1bca:	77 95       	ror	r23
    1bcc:	67 95       	ror	r22
    1bce:	b7 95       	ror	r27
    1bd0:	f7 95       	ror	r31
    1bd2:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <__addsf3x+0x96>
    1bd6:	b3 cf       	rjmp	.-154    	; 0x1b3e <__addsf3+0x1e>
    1bd8:	93 95       	inc	r25
    1bda:	88 0f       	add	r24, r24
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <__addsf3x+0x9e>
    1bde:	99 27       	eor	r25, r25
    1be0:	ee 0f       	add	r30, r30
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	08 95       	ret

00001be8 <__cmpsf2>:
    1be8:	12 d1       	rcall	.+548    	; 0x1e0e <__fp_cmp>
    1bea:	08 f4       	brcc	.+2      	; 0x1bee <__cmpsf2+0x6>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	08 95       	ret

00001bf0 <__divsf3>:
    1bf0:	0c d0       	rcall	.+24     	; 0x1c0a <__divsf3x>
    1bf2:	48 c1       	rjmp	.+656    	; 0x1e84 <__fp_round>
    1bf4:	40 d1       	rcall	.+640    	; 0x1e76 <__fp_pscB>
    1bf6:	40 f0       	brcs	.+16     	; 0x1c08 <__divsf3+0x18>
    1bf8:	37 d1       	rcall	.+622    	; 0x1e68 <__fp_pscA>
    1bfa:	30 f0       	brcs	.+12     	; 0x1c08 <__divsf3+0x18>
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <__divsf3+0x16>
    1bfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <__divsf3+0x18>
    1c02:	29 c1       	rjmp	.+594    	; 0x1e56 <__fp_inf>
    1c04:	51 11       	cpse	r21, r1
    1c06:	72 c1       	rjmp	.+740    	; 0x1eec <__fp_szero>
    1c08:	2c c1       	rjmp	.+600    	; 0x1e62 <__fp_nan>

00001c0a <__divsf3x>:
    1c0a:	4d d1       	rcall	.+666    	; 0x1ea6 <__fp_split3>
    1c0c:	98 f3       	brcs	.-26     	; 0x1bf4 <__divsf3+0x4>

00001c0e <__divsf3_pse>:
    1c0e:	99 23       	and	r25, r25
    1c10:	c9 f3       	breq	.-14     	; 0x1c04 <__divsf3+0x14>
    1c12:	55 23       	and	r21, r21
    1c14:	b1 f3       	breq	.-20     	; 0x1c02 <__divsf3+0x12>
    1c16:	95 1b       	sub	r25, r21
    1c18:	55 0b       	sbc	r21, r21
    1c1a:	bb 27       	eor	r27, r27
    1c1c:	aa 27       	eor	r26, r26
    1c1e:	62 17       	cp	r22, r18
    1c20:	73 07       	cpc	r23, r19
    1c22:	84 07       	cpc	r24, r20
    1c24:	38 f0       	brcs	.+14     	; 0x1c34 <__divsf3_pse+0x26>
    1c26:	9f 5f       	subi	r25, 0xFF	; 255
    1c28:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	44 1f       	adc	r20, r20
    1c30:	aa 1f       	adc	r26, r26
    1c32:	a9 f3       	breq	.-22     	; 0x1c1e <__divsf3_pse+0x10>
    1c34:	33 d0       	rcall	.+102    	; 0x1c9c <__divsf3_pse+0x8e>
    1c36:	0e 2e       	mov	r0, r30
    1c38:	3a f0       	brmi	.+14     	; 0x1c48 <__divsf3_pse+0x3a>
    1c3a:	e0 e8       	ldi	r30, 0x80	; 128
    1c3c:	30 d0       	rcall	.+96     	; 0x1c9e <__divsf3_pse+0x90>
    1c3e:	91 50       	subi	r25, 0x01	; 1
    1c40:	50 40       	sbci	r21, 0x00	; 0
    1c42:	e6 95       	lsr	r30
    1c44:	00 1c       	adc	r0, r0
    1c46:	ca f7       	brpl	.-14     	; 0x1c3a <__divsf3_pse+0x2c>
    1c48:	29 d0       	rcall	.+82     	; 0x1c9c <__divsf3_pse+0x8e>
    1c4a:	fe 2f       	mov	r31, r30
    1c4c:	27 d0       	rcall	.+78     	; 0x1c9c <__divsf3_pse+0x8e>
    1c4e:	66 0f       	add	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	bb 1f       	adc	r27, r27
    1c56:	26 17       	cp	r18, r22
    1c58:	37 07       	cpc	r19, r23
    1c5a:	48 07       	cpc	r20, r24
    1c5c:	ab 07       	cpc	r26, r27
    1c5e:	b0 e8       	ldi	r27, 0x80	; 128
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <__divsf3_pse+0x56>
    1c62:	bb 0b       	sbc	r27, r27
    1c64:	80 2d       	mov	r24, r0
    1c66:	bf 01       	movw	r22, r30
    1c68:	ff 27       	eor	r31, r31
    1c6a:	93 58       	subi	r25, 0x83	; 131
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	2a f0       	brmi	.+10     	; 0x1c7a <__divsf3_pse+0x6c>
    1c70:	9e 3f       	cpi	r25, 0xFE	; 254
    1c72:	51 05       	cpc	r21, r1
    1c74:	68 f0       	brcs	.+26     	; 0x1c90 <__divsf3_pse+0x82>
    1c76:	ef c0       	rjmp	.+478    	; 0x1e56 <__fp_inf>
    1c78:	39 c1       	rjmp	.+626    	; 0x1eec <__fp_szero>
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	ec f3       	brlt	.-6      	; 0x1c78 <__divsf3_pse+0x6a>
    1c7e:	98 3e       	cpi	r25, 0xE8	; 232
    1c80:	dc f3       	brlt	.-10     	; 0x1c78 <__divsf3_pse+0x6a>
    1c82:	86 95       	lsr	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	f7 95       	ror	r31
    1c8c:	9f 5f       	subi	r25, 0xFF	; 255
    1c8e:	c9 f7       	brne	.-14     	; 0x1c82 <__divsf3_pse+0x74>
    1c90:	88 0f       	add	r24, r24
    1c92:	91 1d       	adc	r25, r1
    1c94:	96 95       	lsr	r25
    1c96:	87 95       	ror	r24
    1c98:	97 f9       	bld	r25, 7
    1c9a:	08 95       	ret
    1c9c:	e1 e0       	ldi	r30, 0x01	; 1
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	62 17       	cp	r22, r18
    1ca8:	73 07       	cpc	r23, r19
    1caa:	84 07       	cpc	r24, r20
    1cac:	ba 07       	cpc	r27, r26
    1cae:	20 f0       	brcs	.+8      	; 0x1cb8 <__divsf3_pse+0xaa>
    1cb0:	62 1b       	sub	r22, r18
    1cb2:	73 0b       	sbc	r23, r19
    1cb4:	84 0b       	sbc	r24, r20
    1cb6:	ba 0b       	sbc	r27, r26
    1cb8:	ee 1f       	adc	r30, r30
    1cba:	88 f7       	brcc	.-30     	; 0x1c9e <__divsf3_pse+0x90>
    1cbc:	e0 95       	com	r30
    1cbe:	08 95       	ret

00001cc0 <__fixunssfsi>:
    1cc0:	fa d0       	rcall	.+500    	; 0x1eb6 <__fp_splitA>
    1cc2:	88 f0       	brcs	.+34     	; 0x1ce6 <__fixunssfsi+0x26>
    1cc4:	9f 57       	subi	r25, 0x7F	; 127
    1cc6:	90 f0       	brcs	.+36     	; 0x1cec <__fixunssfsi+0x2c>
    1cc8:	b9 2f       	mov	r27, r25
    1cca:	99 27       	eor	r25, r25
    1ccc:	b7 51       	subi	r27, 0x17	; 23
    1cce:	a0 f0       	brcs	.+40     	; 0x1cf8 <__fixunssfsi+0x38>
    1cd0:	d1 f0       	breq	.+52     	; 0x1d06 <__fixunssfsi+0x46>
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	1a f0       	brmi	.+6      	; 0x1ce2 <__fixunssfsi+0x22>
    1cdc:	ba 95       	dec	r27
    1cde:	c9 f7       	brne	.-14     	; 0x1cd2 <__fixunssfsi+0x12>
    1ce0:	12 c0       	rjmp	.+36     	; 0x1d06 <__fixunssfsi+0x46>
    1ce2:	b1 30       	cpi	r27, 0x01	; 1
    1ce4:	81 f0       	breq	.+32     	; 0x1d06 <__fixunssfsi+0x46>
    1ce6:	01 d1       	rcall	.+514    	; 0x1eea <__fp_zero>
    1ce8:	b1 e0       	ldi	r27, 0x01	; 1
    1cea:	08 95       	ret
    1cec:	fe c0       	rjmp	.+508    	; 0x1eea <__fp_zero>
    1cee:	67 2f       	mov	r22, r23
    1cf0:	78 2f       	mov	r23, r24
    1cf2:	88 27       	eor	r24, r24
    1cf4:	b8 5f       	subi	r27, 0xF8	; 248
    1cf6:	39 f0       	breq	.+14     	; 0x1d06 <__fixunssfsi+0x46>
    1cf8:	b9 3f       	cpi	r27, 0xF9	; 249
    1cfa:	cc f3       	brlt	.-14     	; 0x1cee <__fixunssfsi+0x2e>
    1cfc:	86 95       	lsr	r24
    1cfe:	77 95       	ror	r23
    1d00:	67 95       	ror	r22
    1d02:	b3 95       	inc	r27
    1d04:	d9 f7       	brne	.-10     	; 0x1cfc <__fixunssfsi+0x3c>
    1d06:	3e f4       	brtc	.+14     	; 0x1d16 <__fixunssfsi+0x56>
    1d08:	90 95       	com	r25
    1d0a:	80 95       	com	r24
    1d0c:	70 95       	com	r23
    1d0e:	61 95       	neg	r22
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	8f 4f       	sbci	r24, 0xFF	; 255
    1d14:	9f 4f       	sbci	r25, 0xFF	; 255
    1d16:	08 95       	ret

00001d18 <__floatunsisf>:
    1d18:	e8 94       	clt
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <__floatsisf+0x12>

00001d1c <__floatsisf>:
    1d1c:	97 fb       	bst	r25, 7
    1d1e:	3e f4       	brtc	.+14     	; 0x1d2e <__floatsisf+0x12>
    1d20:	90 95       	com	r25
    1d22:	80 95       	com	r24
    1d24:	70 95       	com	r23
    1d26:	61 95       	neg	r22
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	99 23       	and	r25, r25
    1d30:	a9 f0       	breq	.+42     	; 0x1d5c <__floatsisf+0x40>
    1d32:	f9 2f       	mov	r31, r25
    1d34:	96 e9       	ldi	r25, 0x96	; 150
    1d36:	bb 27       	eor	r27, r27
    1d38:	93 95       	inc	r25
    1d3a:	f6 95       	lsr	r31
    1d3c:	87 95       	ror	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f1 11       	cpse	r31, r1
    1d46:	f8 cf       	rjmp	.-16     	; 0x1d38 <__floatsisf+0x1c>
    1d48:	fa f4       	brpl	.+62     	; 0x1d88 <__floatsisf+0x6c>
    1d4a:	bb 0f       	add	r27, r27
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__floatsisf+0x36>
    1d4e:	60 ff       	sbrs	r22, 0
    1d50:	1b c0       	rjmp	.+54     	; 0x1d88 <__floatsisf+0x6c>
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	8f 4f       	sbci	r24, 0xFF	; 255
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	16 c0       	rjmp	.+44     	; 0x1d88 <__floatsisf+0x6c>
    1d5c:	88 23       	and	r24, r24
    1d5e:	11 f0       	breq	.+4      	; 0x1d64 <__floatsisf+0x48>
    1d60:	96 e9       	ldi	r25, 0x96	; 150
    1d62:	11 c0       	rjmp	.+34     	; 0x1d86 <__floatsisf+0x6a>
    1d64:	77 23       	and	r23, r23
    1d66:	21 f0       	breq	.+8      	; 0x1d70 <__floatsisf+0x54>
    1d68:	9e e8       	ldi	r25, 0x8E	; 142
    1d6a:	87 2f       	mov	r24, r23
    1d6c:	76 2f       	mov	r23, r22
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <__floatsisf+0x5e>
    1d70:	66 23       	and	r22, r22
    1d72:	71 f0       	breq	.+28     	; 0x1d90 <__floatsisf+0x74>
    1d74:	96 e8       	ldi	r25, 0x86	; 134
    1d76:	86 2f       	mov	r24, r22
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	2a f0       	brmi	.+10     	; 0x1d88 <__floatsisf+0x6c>
    1d7e:	9a 95       	dec	r25
    1d80:	66 0f       	add	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	88 1f       	adc	r24, r24
    1d86:	da f7       	brpl	.-10     	; 0x1d7e <__floatsisf+0x62>
    1d88:	88 0f       	add	r24, r24
    1d8a:	96 95       	lsr	r25
    1d8c:	87 95       	ror	r24
    1d8e:	97 f9       	bld	r25, 7
    1d90:	08 95       	ret

00001d92 <__floatundisf>:
    1d92:	e8 94       	clt

00001d94 <__fp_di2sf>:
    1d94:	f9 2f       	mov	r31, r25
    1d96:	96 eb       	ldi	r25, 0xB6	; 182
    1d98:	ff 23       	and	r31, r31
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <__fp_di2sf+0x28>
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	14 06       	cpc	r1, r20
    1da2:	44 0b       	sbc	r20, r20
    1da4:	93 95       	inc	r25
    1da6:	f6 95       	lsr	r31
    1da8:	87 95       	ror	r24
    1daa:	77 95       	ror	r23
    1dac:	67 95       	ror	r22
    1dae:	57 95       	ror	r21
    1db0:	40 40       	sbci	r20, 0x00	; 0
    1db2:	ff 23       	and	r31, r31
    1db4:	b9 f7       	brne	.-18     	; 0x1da4 <__fp_di2sf+0x10>
    1db6:	1b c0       	rjmp	.+54     	; 0x1dee <__fp_di2sf+0x5a>
    1db8:	99 27       	eor	r25, r25
    1dba:	08 95       	ret
    1dbc:	88 23       	and	r24, r24
    1dbe:	51 f4       	brne	.+20     	; 0x1dd4 <__fp_di2sf+0x40>
    1dc0:	98 50       	subi	r25, 0x08	; 8
    1dc2:	d2 f7       	brpl	.-12     	; 0x1db8 <__fp_di2sf+0x24>
    1dc4:	87 2b       	or	r24, r23
    1dc6:	76 2f       	mov	r23, r22
    1dc8:	65 2f       	mov	r22, r21
    1dca:	54 2f       	mov	r21, r20
    1dcc:	43 2f       	mov	r20, r19
    1dce:	32 2f       	mov	r19, r18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	b1 f3       	breq	.-20     	; 0x1dc0 <__fp_di2sf+0x2c>
    1dd4:	12 16       	cp	r1, r18
    1dd6:	13 06       	cpc	r1, r19
    1dd8:	14 06       	cpc	r1, r20
    1dda:	44 0b       	sbc	r20, r20
    1ddc:	88 23       	and	r24, r24
    1dde:	3a f0       	brmi	.+14     	; 0x1dee <__fp_di2sf+0x5a>
    1de0:	9a 95       	dec	r25
    1de2:	44 0f       	add	r20, r20
    1de4:	55 1f       	adc	r21, r21
    1de6:	66 1f       	adc	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	ca f7       	brpl	.-14     	; 0x1de0 <__fp_di2sf+0x4c>
    1dee:	55 23       	and	r21, r21
    1df0:	4a f4       	brpl	.+18     	; 0x1e04 <__fp_di2sf+0x70>
    1df2:	44 0f       	add	r20, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <__fp_di2sf+0x68>
    1df8:	60 ff       	sbrs	r22, 0
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <__fp_di2sf+0x70>
    1dfc:	6f 5f       	subi	r22, 0xFF	; 255
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	8f 4f       	sbci	r24, 0xFF	; 255
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	88 0f       	add	r24, r24
    1e06:	96 95       	lsr	r25
    1e08:	87 95       	ror	r24
    1e0a:	97 f9       	bld	r25, 7
    1e0c:	08 95       	ret

00001e0e <__fp_cmp>:
    1e0e:	99 0f       	add	r25, r25
    1e10:	00 08       	sbc	r0, r0
    1e12:	55 0f       	add	r21, r21
    1e14:	aa 0b       	sbc	r26, r26
    1e16:	e0 e8       	ldi	r30, 0x80	; 128
    1e18:	fe ef       	ldi	r31, 0xFE	; 254
    1e1a:	16 16       	cp	r1, r22
    1e1c:	17 06       	cpc	r1, r23
    1e1e:	e8 07       	cpc	r30, r24
    1e20:	f9 07       	cpc	r31, r25
    1e22:	c0 f0       	brcs	.+48     	; 0x1e54 <__fp_cmp+0x46>
    1e24:	12 16       	cp	r1, r18
    1e26:	13 06       	cpc	r1, r19
    1e28:	e4 07       	cpc	r30, r20
    1e2a:	f5 07       	cpc	r31, r21
    1e2c:	98 f0       	brcs	.+38     	; 0x1e54 <__fp_cmp+0x46>
    1e2e:	62 1b       	sub	r22, r18
    1e30:	73 0b       	sbc	r23, r19
    1e32:	84 0b       	sbc	r24, r20
    1e34:	95 0b       	sbc	r25, r21
    1e36:	39 f4       	brne	.+14     	; 0x1e46 <__fp_cmp+0x38>
    1e38:	0a 26       	eor	r0, r26
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <__fp_cmp+0x46>
    1e3c:	23 2b       	or	r18, r19
    1e3e:	24 2b       	or	r18, r20
    1e40:	25 2b       	or	r18, r21
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <__fp_cmp+0x3e>
    1e44:	08 95       	ret
    1e46:	0a 26       	eor	r0, r26
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <__fp_cmp+0x3e>
    1e4a:	a1 40       	sbci	r26, 0x01	; 1
    1e4c:	a6 95       	lsr	r26
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	81 1d       	adc	r24, r1
    1e52:	81 1d       	adc	r24, r1
    1e54:	08 95       	ret

00001e56 <__fp_inf>:
    1e56:	97 f9       	bld	r25, 7
    1e58:	9f 67       	ori	r25, 0x7F	; 127
    1e5a:	80 e8       	ldi	r24, 0x80	; 128
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	08 95       	ret

00001e62 <__fp_nan>:
    1e62:	9f ef       	ldi	r25, 0xFF	; 255
    1e64:	80 ec       	ldi	r24, 0xC0	; 192
    1e66:	08 95       	ret

00001e68 <__fp_pscA>:
    1e68:	00 24       	eor	r0, r0
    1e6a:	0a 94       	dec	r0
    1e6c:	16 16       	cp	r1, r22
    1e6e:	17 06       	cpc	r1, r23
    1e70:	18 06       	cpc	r1, r24
    1e72:	09 06       	cpc	r0, r25
    1e74:	08 95       	ret

00001e76 <__fp_pscB>:
    1e76:	00 24       	eor	r0, r0
    1e78:	0a 94       	dec	r0
    1e7a:	12 16       	cp	r1, r18
    1e7c:	13 06       	cpc	r1, r19
    1e7e:	14 06       	cpc	r1, r20
    1e80:	05 06       	cpc	r0, r21
    1e82:	08 95       	ret

00001e84 <__fp_round>:
    1e84:	09 2e       	mov	r0, r25
    1e86:	03 94       	inc	r0
    1e88:	00 0c       	add	r0, r0
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <__fp_round+0xc>
    1e8c:	88 23       	and	r24, r24
    1e8e:	52 f0       	brmi	.+20     	; 0x1ea4 <__fp_round+0x20>
    1e90:	bb 0f       	add	r27, r27
    1e92:	40 f4       	brcc	.+16     	; 0x1ea4 <__fp_round+0x20>
    1e94:	bf 2b       	or	r27, r31
    1e96:	11 f4       	brne	.+4      	; 0x1e9c <__fp_round+0x18>
    1e98:	60 ff       	sbrs	r22, 0
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <__fp_round+0x20>
    1e9c:	6f 5f       	subi	r22, 0xFF	; 255
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	08 95       	ret

00001ea6 <__fp_split3>:
    1ea6:	57 fd       	sbrc	r21, 7
    1ea8:	90 58       	subi	r25, 0x80	; 128
    1eaa:	44 0f       	add	r20, r20
    1eac:	55 1f       	adc	r21, r21
    1eae:	59 f0       	breq	.+22     	; 0x1ec6 <__fp_splitA+0x10>
    1eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb2:	71 f0       	breq	.+28     	; 0x1ed0 <__fp_splitA+0x1a>
    1eb4:	47 95       	ror	r20

00001eb6 <__fp_splitA>:
    1eb6:	88 0f       	add	r24, r24
    1eb8:	97 fb       	bst	r25, 7
    1eba:	99 1f       	adc	r25, r25
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <__fp_splitA+0x20>
    1ebe:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec0:	79 f0       	breq	.+30     	; 0x1ee0 <__fp_splitA+0x2a>
    1ec2:	87 95       	ror	r24
    1ec4:	08 95       	ret
    1ec6:	12 16       	cp	r1, r18
    1ec8:	13 06       	cpc	r1, r19
    1eca:	14 06       	cpc	r1, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	f2 cf       	rjmp	.-28     	; 0x1eb4 <__fp_split3+0xe>
    1ed0:	46 95       	lsr	r20
    1ed2:	f1 df       	rcall	.-30     	; 0x1eb6 <__fp_splitA>
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <__fp_splitA+0x30>
    1ed6:	16 16       	cp	r1, r22
    1ed8:	17 06       	cpc	r1, r23
    1eda:	18 06       	cpc	r1, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	f1 cf       	rjmp	.-30     	; 0x1ec2 <__fp_splitA+0xc>
    1ee0:	86 95       	lsr	r24
    1ee2:	71 05       	cpc	r23, r1
    1ee4:	61 05       	cpc	r22, r1
    1ee6:	08 94       	sec
    1ee8:	08 95       	ret

00001eea <__fp_zero>:
    1eea:	e8 94       	clt

00001eec <__fp_szero>:
    1eec:	bb 27       	eor	r27, r27
    1eee:	66 27       	eor	r22, r22
    1ef0:	77 27       	eor	r23, r23
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	97 f9       	bld	r25, 7
    1ef6:	08 95       	ret

00001ef8 <__gesf2>:
    1ef8:	8a df       	rcall	.-236    	; 0x1e0e <__fp_cmp>
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <__gesf2+0x6>
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    1efe:	08 95       	ret

00001f00 <__mulsf3>:
    1f00:	0b d0       	rcall	.+22     	; 0x1f18 <__mulsf3x>
    1f02:	c0 cf       	rjmp	.-128    	; 0x1e84 <__fp_round>
    1f04:	b1 df       	rcall	.-158    	; 0x1e68 <__fp_pscA>
    1f06:	28 f0       	brcs	.+10     	; 0x1f12 <__mulsf3+0x12>
    1f08:	b6 df       	rcall	.-148    	; 0x1e76 <__fp_pscB>
    1f0a:	18 f0       	brcs	.+6      	; 0x1f12 <__mulsf3+0x12>
    1f0c:	95 23       	and	r25, r21
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <__mulsf3+0x12>
    1f10:	a2 cf       	rjmp	.-188    	; 0x1e56 <__fp_inf>
    1f12:	a7 cf       	rjmp	.-178    	; 0x1e62 <__fp_nan>
    1f14:	11 24       	eor	r1, r1
    1f16:	ea cf       	rjmp	.-44     	; 0x1eec <__fp_szero>

00001f18 <__mulsf3x>:
    1f18:	c6 df       	rcall	.-116    	; 0x1ea6 <__fp_split3>
    1f1a:	a0 f3       	brcs	.-24     	; 0x1f04 <__mulsf3+0x4>

00001f1c <__mulsf3_pse>:
    1f1c:	95 9f       	mul	r25, r21
    1f1e:	d1 f3       	breq	.-12     	; 0x1f14 <__mulsf3+0x14>
    1f20:	95 0f       	add	r25, r21
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	55 1f       	adc	r21, r21
    1f26:	62 9f       	mul	r22, r18
    1f28:	f0 01       	movw	r30, r0
    1f2a:	72 9f       	mul	r23, r18
    1f2c:	bb 27       	eor	r27, r27
    1f2e:	f0 0d       	add	r31, r0
    1f30:	b1 1d       	adc	r27, r1
    1f32:	63 9f       	mul	r22, r19
    1f34:	aa 27       	eor	r26, r26
    1f36:	f0 0d       	add	r31, r0
    1f38:	b1 1d       	adc	r27, r1
    1f3a:	aa 1f       	adc	r26, r26
    1f3c:	64 9f       	mul	r22, r20
    1f3e:	66 27       	eor	r22, r22
    1f40:	b0 0d       	add	r27, r0
    1f42:	a1 1d       	adc	r26, r1
    1f44:	66 1f       	adc	r22, r22
    1f46:	82 9f       	mul	r24, r18
    1f48:	22 27       	eor	r18, r18
    1f4a:	b0 0d       	add	r27, r0
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	62 1f       	adc	r22, r18
    1f50:	73 9f       	mul	r23, r19
    1f52:	b0 0d       	add	r27, r0
    1f54:	a1 1d       	adc	r26, r1
    1f56:	62 1f       	adc	r22, r18
    1f58:	83 9f       	mul	r24, r19
    1f5a:	a0 0d       	add	r26, r0
    1f5c:	61 1d       	adc	r22, r1
    1f5e:	22 1f       	adc	r18, r18
    1f60:	74 9f       	mul	r23, r20
    1f62:	33 27       	eor	r19, r19
    1f64:	a0 0d       	add	r26, r0
    1f66:	61 1d       	adc	r22, r1
    1f68:	23 1f       	adc	r18, r19
    1f6a:	84 9f       	mul	r24, r20
    1f6c:	60 0d       	add	r22, r0
    1f6e:	21 1d       	adc	r18, r1
    1f70:	82 2f       	mov	r24, r18
    1f72:	76 2f       	mov	r23, r22
    1f74:	6a 2f       	mov	r22, r26
    1f76:	11 24       	eor	r1, r1
    1f78:	9f 57       	subi	r25, 0x7F	; 127
    1f7a:	50 40       	sbci	r21, 0x00	; 0
    1f7c:	8a f0       	brmi	.+34     	; 0x1fa0 <__mulsf3_pse+0x84>
    1f7e:	e1 f0       	breq	.+56     	; 0x1fb8 <__mulsf3_pse+0x9c>
    1f80:	88 23       	and	r24, r24
    1f82:	4a f0       	brmi	.+18     	; 0x1f96 <__mulsf3_pse+0x7a>
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	bb 1f       	adc	r27, r27
    1f8a:	66 1f       	adc	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	88 1f       	adc	r24, r24
    1f90:	91 50       	subi	r25, 0x01	; 1
    1f92:	50 40       	sbci	r21, 0x00	; 0
    1f94:	a9 f7       	brne	.-22     	; 0x1f80 <__mulsf3_pse+0x64>
    1f96:	9e 3f       	cpi	r25, 0xFE	; 254
    1f98:	51 05       	cpc	r21, r1
    1f9a:	70 f0       	brcs	.+28     	; 0x1fb8 <__mulsf3_pse+0x9c>
    1f9c:	5c cf       	rjmp	.-328    	; 0x1e56 <__fp_inf>
    1f9e:	a6 cf       	rjmp	.-180    	; 0x1eec <__fp_szero>
    1fa0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa2:	ec f3       	brlt	.-6      	; 0x1f9e <__mulsf3_pse+0x82>
    1fa4:	98 3e       	cpi	r25, 0xE8	; 232
    1fa6:	dc f3       	brlt	.-10     	; 0x1f9e <__mulsf3_pse+0x82>
    1fa8:	86 95       	lsr	r24
    1faa:	77 95       	ror	r23
    1fac:	67 95       	ror	r22
    1fae:	b7 95       	ror	r27
    1fb0:	f7 95       	ror	r31
    1fb2:	e7 95       	ror	r30
    1fb4:	9f 5f       	subi	r25, 0xFF	; 255
    1fb6:	c1 f7       	brne	.-16     	; 0x1fa8 <__mulsf3_pse+0x8c>
    1fb8:	fe 2b       	or	r31, r30
    1fba:	88 0f       	add	r24, r24
    1fbc:	91 1d       	adc	r25, r1
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <__mulsi3>:
    1fc6:	62 9f       	mul	r22, r18
    1fc8:	d0 01       	movw	r26, r0
    1fca:	73 9f       	mul	r23, r19
    1fcc:	f0 01       	movw	r30, r0
    1fce:	82 9f       	mul	r24, r18
    1fd0:	e0 0d       	add	r30, r0
    1fd2:	f1 1d       	adc	r31, r1
    1fd4:	64 9f       	mul	r22, r20
    1fd6:	e0 0d       	add	r30, r0
    1fd8:	f1 1d       	adc	r31, r1
    1fda:	92 9f       	mul	r25, r18
    1fdc:	f0 0d       	add	r31, r0
    1fde:	83 9f       	mul	r24, r19
    1fe0:	f0 0d       	add	r31, r0
    1fe2:	74 9f       	mul	r23, r20
    1fe4:	f0 0d       	add	r31, r0
    1fe6:	65 9f       	mul	r22, r21
    1fe8:	f0 0d       	add	r31, r0
    1fea:	99 27       	eor	r25, r25
    1fec:	72 9f       	mul	r23, r18
    1fee:	b0 0d       	add	r27, r0
    1ff0:	e1 1d       	adc	r30, r1
    1ff2:	f9 1f       	adc	r31, r25
    1ff4:	63 9f       	mul	r22, r19
    1ff6:	b0 0d       	add	r27, r0
    1ff8:	e1 1d       	adc	r30, r1
    1ffa:	f9 1f       	adc	r31, r25
    1ffc:	bd 01       	movw	r22, r26
    1ffe:	cf 01       	movw	r24, r30
    2000:	11 24       	eor	r1, r1
    2002:	08 95       	ret

00002004 <__udivmodsi4>:
    2004:	a1 e2       	ldi	r26, 0x21	; 33
    2006:	1a 2e       	mov	r1, r26
    2008:	aa 1b       	sub	r26, r26
    200a:	bb 1b       	sub	r27, r27
    200c:	fd 01       	movw	r30, r26
    200e:	0d c0       	rjmp	.+26     	; 0x202a <__udivmodsi4_ep>

00002010 <__udivmodsi4_loop>:
    2010:	aa 1f       	adc	r26, r26
    2012:	bb 1f       	adc	r27, r27
    2014:	ee 1f       	adc	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	a2 17       	cp	r26, r18
    201a:	b3 07       	cpc	r27, r19
    201c:	e4 07       	cpc	r30, r20
    201e:	f5 07       	cpc	r31, r21
    2020:	20 f0       	brcs	.+8      	; 0x202a <__udivmodsi4_ep>
    2022:	a2 1b       	sub	r26, r18
    2024:	b3 0b       	sbc	r27, r19
    2026:	e4 0b       	sbc	r30, r20
    2028:	f5 0b       	sbc	r31, r21

0000202a <__udivmodsi4_ep>:
    202a:	66 1f       	adc	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	88 1f       	adc	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	1a 94       	dec	r1
    2034:	69 f7       	brne	.-38     	; 0x2010 <__udivmodsi4_loop>
    2036:	60 95       	com	r22
    2038:	70 95       	com	r23
    203a:	80 95       	com	r24
    203c:	90 95       	com	r25
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	bd 01       	movw	r22, r26
    2044:	cf 01       	movw	r24, r30
    2046:	08 95       	ret

00002048 <_exit>:
    2048:	f8 94       	cli

0000204a <__stop_program>:
    204a:	ff cf       	rjmp	.-2      	; 0x204a <__stop_program>
