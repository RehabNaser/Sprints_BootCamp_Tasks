
Obstacle_Avoidance_Car_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  0000298c  00002a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  008000c0  008000c0  00002a80  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  00005950  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003706  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001266  00000000  00000000  00009336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001583  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  0000bb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000133e  00000000  00000000  0000c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023bd  00000000  00000000  0000d6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000fabb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <main>
      8a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRASH_MainFunction>:
-----------------------------------*/
/**
* @brief: This is the main function of CRASH module.
*/
extern void CRASH_MainFunction(void)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
   ERROR_STATE_t CRASH_MainErrorState;
   
   /* Call Distance Getter Function */
   SENSING_Get(&gd64_distance);
      9a:	80 ec       	ldi	r24, 0xC0	; 192
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 b8 02 	call	0x570	; 0x570 <SENSING_Get>
static ERROR_STATE_t CRASH_Logic(void)
{
   static Enu_LogicStateMachine u8_CurrentState = CRASH_Ready;
   static Enu_LogicStateMachine u8_PreviousState = CRASH_Ready;

   if(gd64_distance > gd64_UpperDistanceLimit)
      a2:	c0 90 c0 00 	lds	r12, 0x00C0
      a6:	d0 90 c1 00 	lds	r13, 0x00C1
      aa:	e0 90 c2 00 	lds	r14, 0x00C2
      ae:	f0 90 c3 00 	lds	r15, 0x00C3
      b2:	c7 01       	movw	r24, r14
      b4:	b6 01       	movw	r22, r12
      b6:	20 91 64 00 	lds	r18, 0x0064
      ba:	30 91 65 00 	lds	r19, 0x0065
      be:	40 91 66 00 	lds	r20, 0x0066
      c2:	50 91 67 00 	lds	r21, 0x0067
      c6:	0e 94 1c 14 	call	0x2838	; 0x2838 <__gesf2>
      ca:	18 16       	cp	r1, r24
      cc:	24 f4       	brge	.+8      	; 0xd6 <CRASH_MainFunction+0x44>
   {
      u8_CurrentState = CRASH_Forward;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 c7 00 	sts	0x00C7, r24
      d4:	15 c0       	rjmp	.+42     	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else if (gd64_distance < gd64_LowerDistanceLimit)
      d6:	c7 01       	movw	r24, r14
      d8:	b6 01       	movw	r22, r12
      da:	20 91 60 00 	lds	r18, 0x0060
      de:	30 91 61 00 	lds	r19, 0x0061
      e2:	40 91 62 00 	lds	r20, 0x0062
      e6:	50 91 63 00 	lds	r21, 0x0063
      ea:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	24 f4       	brge	.+8      	; 0xfa <CRASH_MainFunction+0x68>
   {
      u8_CurrentState = CRASH_Backward;
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 c7 00 	sts	0x00C7, r24
      f8:	03 c0       	rjmp	.+6      	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else
   {
      u8_CurrentState = CRASH_RotateRight;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 c7 00 	sts	0x00C7, r24
   }
   
   if(u8_PreviousState != u8_CurrentState)
     100:	80 91 c7 00 	lds	r24, 0x00C7
     104:	90 91 c8 00 	lds	r25, 0x00C8
     108:	98 17       	cp	r25, r24
     10a:	59 f1       	breq	.+86     	; 0x162 <CRASH_MainFunction+0xd0>
   {
      switch(u8_CurrentState)
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	81 f0       	breq	.+32     	; 0x130 <CRASH_MainFunction+0x9e>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	d9 f0       	breq	.+54     	; 0x14a <CRASH_MainFunction+0xb8>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	79 f5       	brne	.+94     	; 0x176 <CRASH_MainFunction+0xe4>
      {
         case CRASH_Forward:
            gu8_CarDirection = STEERING_FORWARD;
     118:	10 92 c6 00 	sts	0x00C6, r1
            gu8_CarSpeed = CAR_FORWARD_SPEED;
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 c5 00 	sts	0x00C5, r25
     124:	80 93 c4 00 	sts	0x00C4, r24
            u8_PreviousState = u8_CurrentState;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 c8 00 	sts	0x00C8, r24
     12e:	19 c0       	rjmp	.+50     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_Backward:
            gu8_CarDirection = STEERING_BACKWARD;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 c6 00 	sts	0x00C6, r24
            gu8_CarSpeed = CAR_BACKWARD_SPEED;
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 c5 00 	sts	0x00C5, r25
     13e:	80 93 c4 00 	sts	0x00C4, r24
            u8_PreviousState = u8_CurrentState;
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 c8 00 	sts	0x00C8, r24
     148:	0c c0       	rjmp	.+24     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_RotateRight:
            gu8_CarDirection = STEERING_RIGHT;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 c6 00 	sts	0x00C6, r24
            gu8_CarSpeed = CAR_ROTATERIGHT_SPEED;
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 c5 00 	sts	0x00C5, r25
     158:	80 93 c4 00 	sts	0x00C4, r24
            u8_PreviousState = u8_CurrentState;
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	80 93 c8 00 	sts	0x00C8, r24
   CRASH_MainErrorState = CRASH_Logic();
   
   /* Set Car Direction and Speed */
   if(ERROR_OK == CRASH_MainErrorState)
   {
		CRASH_SetSpeed(gu8_CarSpeed);
     162:	80 91 c4 00 	lds	r24, 0x00C4
     166:	90 91 c5 00 	lds	r25, 0x00C5
     16a:	0e 94 c0 00 	call	0x180	; 0x180 <CRASH_SetSpeed>
		CRASH_SetDirection(gu8_CarDirection);
     16e:	80 91 c6 00 	lds	r24, 0x00C6
     172:	0e 94 cb 00 	call	0x196	; 0x196 <CRASH_SetDirection>
   }
}
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	df 90       	pop	r13
     17c:	cf 90       	pop	r12
     17e:	08 95       	ret

00000180 <CRASH_SetSpeed>:
* @return function error state.
*/
extern ERROR_STATE_t  CRASH_SetSpeed(uint16_t Speed){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF INVLAID SPEED*/
	if(Speed>STEERING_MAX_SPEED){
     180:	85 36       	cpi	r24, 0x65	; 101
     182:	91 05       	cpc	r25, r1
     184:	30 f4       	brcc	.+12     	; 0x192 <CRASH_SetSpeed+0x12>
		CRASH_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE SPEED*/
		gu16_Speed = Speed;
     186:	90 93 ca 00 	sts	0x00CA, r25
     18a:	80 93 c9 00 	sts	0x00C9, r24
		CRASH_ErrorState = ERROR_OK;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	08 95       	ret
*/
extern ERROR_STATE_t  CRASH_SetSpeed(uint16_t Speed){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF INVLAID SPEED*/
	if(Speed>STEERING_MAX_SPEED){
		CRASH_ErrorState = ERROR_NOK;
     192:	81 e0       	ldi	r24, 0x01	; 1
		/*SET THE SPEED*/
		gu16_Speed = Speed;
		CRASH_ErrorState = ERROR_OK;
	}
	return CRASH_ErrorState;
}
     194:	08 95       	ret

00000196 <CRASH_SetDirection>:
* @return function error state.
*/
extern ERROR_STATE_t  CRASH_SetDirection(uint8_t  Dir){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
     196:	84 30       	cpi	r24, 0x04	; 4
     198:	20 f4       	brcc	.+8      	; 0x1a2 <CRASH_SetDirection+0xc>
		CRASH_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE DIRECTION*/
		gu8_Dir = Dir;
     19a:	80 93 cb 00 	sts	0x00CB, r24
		CRASH_ErrorState = ERROR_OK;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret
*/
extern ERROR_STATE_t  CRASH_SetDirection(uint8_t  Dir){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
		CRASH_ErrorState = ERROR_NOK;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
		/*SET THE DIRECTION*/
		gu8_Dir = Dir;
		CRASH_ErrorState = ERROR_OK;
	}
	return CRASH_ErrorState;
}
     1a4:	08 95       	ret

000001a6 <CRASH_GetSpeed>:
* @return function error state.
*/
extern ERROR_STATE_t  CRASH_GetSpeed(ptr_uint16_t Speed){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if(NULL_PTR == Speed)
     1a6:	00 97       	sbiw	r24, 0x00	; 0
     1a8:	49 f0       	breq	.+18     	; 0x1bc <CRASH_GetSpeed+0x16>
		CRASH_ErrorState=ERROR_NOK;
	}
	else
	{
		/*GET THE SPEED*/
		*Speed = gu16_Speed;
     1aa:	20 91 c9 00 	lds	r18, 0x00C9
     1ae:	30 91 ca 00 	lds	r19, 0x00CA
     1b2:	fc 01       	movw	r30, r24
     1b4:	31 83       	std	Z+1, r19	; 0x01
     1b6:	20 83       	st	Z, r18
		CRASH_ErrorState = ERROR_OK;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	08 95       	ret
extern ERROR_STATE_t  CRASH_GetSpeed(ptr_uint16_t Speed){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if(NULL_PTR == Speed)
	{
		CRASH_ErrorState=ERROR_NOK;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
		/*GET THE SPEED*/
		*Speed = gu16_Speed;
		CRASH_ErrorState = ERROR_OK;
	}
	return CRASH_ErrorState;
}
     1be:	08 95       	ret

000001c0 <CRASH_GetDirection>:
* @return function error state.
*/
extern ERROR_STATE_t  CRASH_GetDirection(ptr_uint8_t  Dir){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if(NULL_PTR == Dir)
     1c0:	00 97       	sbiw	r24, 0x00	; 0
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <CRASH_GetDirection+0x10>
		CRASH_ErrorState=ERROR_NOK;
	}
	else
	{
		/*GET THE DIRECTION*/
		*Dir = gu8_Dir;
     1c4:	20 91 cb 00 	lds	r18, 0x00CB
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
		CRASH_ErrorState = ERROR_OK;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
extern ERROR_STATE_t  CRASH_GetDirection(ptr_uint8_t  Dir){
	ERROR_STATE_t CRASH_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if(NULL_PTR == Dir)
	{
		CRASH_ErrorState=ERROR_NOK;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
		/*GET THE DIRECTION*/
		*Dir = gu8_Dir;
		CRASH_ErrorState = ERROR_OK;
	}
	return CRASH_ErrorState;
     1d2:	08 95       	ret

000001d4 <MONITOR_SendDataToDisplay>:
         }   
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	uint8_t FunRetVal = OperationStarted;
	static uint8_t Position = 0;
   
	if(To_Display_Manager != NULL_PTR)
	{
		if((STR_ToDisplay.u32_MONITOR_Number != NULL_PTR) ^ (STR_ToDisplay.u8_MONITOR_String != NULL_PTR))
     1d8:	e0 91 d7 00 	lds	r30, 0x00D7
     1dc:	f0 91 d8 00 	lds	r31, 0x00D8
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	30 97       	sbiw	r30, 0x00	; 0
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <MONITOR_SendDataToDisplay+0x14>
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	80 91 d5 00 	lds	r24, 0x00D5
     1ee:	90 91 d6 00 	lds	r25, 0x00D6
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <MONITOR_SendDataToDisplay+0x24>
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	32 17       	cp	r19, r18
     1fa:	09 f4       	brne	.+2      	; 0x1fe <MONITOR_SendDataToDisplay+0x2a>
     1fc:	c1 c0       	rjmp	.+386    	; 0x380 <MONITOR_SendDataToDisplay+0x1ac>
		{
			switch(State)
     1fe:	80 91 8c 00 	lds	r24, 0x008C
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	09 f4       	brne	.+2      	; 0x208 <MONITOR_SendDataToDisplay+0x34>
     206:	74 c0       	rjmp	.+232    	; 0x2f0 <MONITOR_SendDataToDisplay+0x11c>
     208:	83 30       	cpi	r24, 0x03	; 3
     20a:	38 f4       	brcc	.+14     	; 0x21a <MONITOR_SendDataToDisplay+0x46>
     20c:	88 23       	and	r24, r24
     20e:	09 f4       	brne	.+2      	; 0x212 <MONITOR_SendDataToDisplay+0x3e>
     210:	57 c0       	rjmp	.+174    	; 0x2c0 <MONITOR_SendDataToDisplay+0xec>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <MONITOR_SendDataToDisplay+0x44>
     216:	b6 c0       	rjmp	.+364    	; 0x384 <MONITOR_SendDataToDisplay+0x1b0>
     218:	5f c0       	rjmp	.+190    	; 0x2d8 <MONITOR_SendDataToDisplay+0x104>
     21a:	84 30       	cpi	r24, 0x04	; 4
     21c:	09 f4       	brne	.+2      	; 0x220 <MONITOR_SendDataToDisplay+0x4c>
     21e:	87 c0       	rjmp	.+270    	; 0x32e <MONITOR_SendDataToDisplay+0x15a>
     220:	84 30       	cpi	r24, 0x04	; 4
     222:	08 f4       	brcc	.+2      	; 0x226 <MONITOR_SendDataToDisplay+0x52>
     224:	42 c0       	rjmp	.+132    	; 0x2aa <MONITOR_SendDataToDisplay+0xd6>
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	09 f0       	breq	.+2      	; 0x22c <MONITOR_SendDataToDisplay+0x58>
     22a:	ac c0       	rjmp	.+344    	; 0x384 <MONITOR_SendDataToDisplay+0x1b0>
			{
         case OperationStarted:
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     22c:	40 91 d1 00 	lds	r20, 0x00D1
     230:	50 91 d2 00 	lds	r21, 0x00D2
     234:	60 91 d3 00 	lds	r22, 0x00D3
     238:	70 91 d4 00 	lds	r23, 0x00D4
     23c:	80 91 cd 00 	lds	r24, 0x00CD
     240:	90 91 ce 00 	lds	r25, 0x00CE
     244:	a0 91 cf 00 	lds	r26, 0x00CF
     248:	b0 91 d0 00 	lds	r27, 0x00D0
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	80 31       	cpi	r24, 0x10	; 16
     250:	91 05       	cpc	r25, r1
     252:	a1 05       	cpc	r26, r1
     254:	b1 05       	cpc	r27, r1
     256:	08 f0       	brcs	.+2      	; 0x25a <MONITOR_SendDataToDisplay+0x86>
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	41 15       	cp	r20, r1
     25e:	51 05       	cpc	r21, r1
     260:	61 05       	cpc	r22, r1
     262:	71 05       	cpc	r23, r1
     264:	09 f0       	breq	.+2      	; 0x268 <MONITOR_SendDataToDisplay+0x94>
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	22 23       	and	r18, r18
     26a:	51 f0       	breq	.+20     	; 0x280 <MONITOR_SendDataToDisplay+0xac>
     26c:	33 23       	and	r19, r19
     26e:	41 f0       	breq	.+16     	; 0x280 <MONITOR_SendDataToDisplay+0xac>
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
     270:	80 68       	ori	r24, 0x80	; 128
     272:	80 93 e5 00 	sts	0x00E5, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	80 93 8c 00 	sts	0x008C, r24
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	91 c0       	rjmp	.+290    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     280:	33 23       	and	r19, r19
     282:	09 f4       	brne	.+2      	; 0x286 <MONITOR_SendDataToDisplay+0xb2>
     284:	81 c0       	rjmp	.+258    	; 0x388 <MONITOR_SendDataToDisplay+0x1b4>
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	41 30       	cpi	r20, 0x01	; 1
     28a:	51 05       	cpc	r21, r1
     28c:	61 05       	cpc	r22, r1
     28e:	71 05       	cpc	r23, r1
     290:	09 f0       	breq	.+2      	; 0x294 <MONITOR_SendDataToDisplay+0xc0>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	22 23       	and	r18, r18
     296:	09 f4       	brne	.+2      	; 0x29a <MONITOR_SendDataToDisplay+0xc6>
     298:	77 c0       	rjmp	.+238    	; 0x388 <MONITOR_SendDataToDisplay+0x1b4>
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
     29a:	80 6c       	ori	r24, 0xC0	; 192
     29c:	80 93 e5 00 	sts	0x00E5, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	80 93 8c 00 	sts	0x008C, r24
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	7c c0       	rjmp	.+248    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationFail;
            }
            break;
         case GoToPosition:
            /*go to position*/
				FunRetVal = LCD_SendCommand(Position);
     2aa:	80 91 e5 00 	lds	r24, 0x00E5
     2ae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
				if(FunRetVal==OperationSuccess)
     2b2:	88 23       	and	r24, r24
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <MONITOR_SendDataToDisplay+0xe4>
     2b6:	6a c0       	rjmp	.+212    	; 0x38c <MONITOR_SendDataToDisplay+0x1b8>
				{
					State = CursorAtPosition;//CursorAtPosition
     2b8:	10 92 8c 00 	sts	0x008C, r1
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	71 c0       	rjmp	.+226    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorAtPosition;//CursorAtPosition
				}
				break;
			case CursorAtPosition:
				FunRetVal = LCD_SendString((uint8_t*)"          ");
     2c0:	88 e6       	ldi	r24, 0x68	; 104
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_SendString>
				if(FunRetVal == OperationSuccess)
     2c8:	88 23       	and	r24, r24
     2ca:	09 f0       	breq	.+2      	; 0x2ce <MONITOR_SendDataToDisplay+0xfa>
     2cc:	61 c0       	rjmp	.+194    	; 0x390 <MONITOR_SendDataToDisplay+0x1bc>
				{
					State = SpaceCleared;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	65 c0       	rjmp	.+202    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = SpaceCleared;
				}
				break;
			case SpaceCleared:
				FunRetVal = LCD_SendCommand(Position);
     2d8:	80 91 e5 00 	lds	r24, 0x00E5
     2dc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
				if(FunRetVal == OperationSuccess)
     2e0:	88 23       	and	r24, r24
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <MONITOR_SendDataToDisplay+0x112>
     2e4:	57 c0       	rjmp	.+174    	; 0x394 <MONITOR_SendDataToDisplay+0x1c0>
				{
					State = CursorHoming;
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	59 c0       	rjmp	.+178    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorHoming;
				}
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
     2f0:	30 97       	sbiw	r30, 0x00	; 0
     2f2:	81 f4       	brne	.+32     	; 0x314 <MONITOR_SendDataToDisplay+0x140>
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
     2f4:	c5 ed       	ldi	r28, 0xD5	; 213
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	88 81       	ld	r24, Y
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_SendString>
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
     300:	88 23       	and	r24, r24
     302:	d1 f7       	brne	.-12     	; 0x2f8 <MONITOR_SendDataToDisplay+0x124>
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
               }                  
					if(FunRetVal == OperationSuccess)
     304:	88 23       	and	r24, r24
     306:	09 f0       	breq	.+2      	; 0x30a <MONITOR_SendDataToDisplay+0x136>
     308:	47 c0       	rjmp	.+142    	; 0x398 <MONITOR_SendDataToDisplay+0x1c4>
					{
						State = MonitorDelay;
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	47 c0       	rjmp	.+142    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				else
				{
					FunRetVal = LCD_SendNumber(*(To_Display_Manager->u32_MONITOR_Number));
     314:	60 81       	ld	r22, Z
     316:	71 81       	ldd	r23, Z+1	; 0x01
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	93 81       	ldd	r25, Z+3	; 0x03
     31c:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCD_SendNumber>
					if(FunRetVal == OperationSuccess)
     320:	88 23       	and	r24, r24
     322:	e1 f5       	brne	.+120    	; 0x39c <MONITOR_SendDataToDisplay+0x1c8>
					{
						State = MonitorDelay;
     324:	84 e0       	ldi	r24, 0x04	; 4
     326:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	3a c0       	rjmp	.+116    	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				break;
         case MonitorDelay:
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     32e:	ce e5       	ldi	r28, 0x5E	; 94
     330:	d3 e0       	ldi	r29, 0x03	; 3
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	be 01       	movw	r22, r28
     336:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
     33a:	8b 3f       	cpi	r24, 0xFB	; 251
     33c:	51 f4       	brne	.+20     	; 0x352 <MONITOR_SendDataToDisplay+0x17e>
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	42 e3       	ldi	r20, 0x32	; 50
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	9e 01       	movw	r18, r28
     34a:	0e 94 35 11 	call	0x226a	; 0x226a <TIM_DelayMs>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	28 c0       	rjmp	.+80     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
     352:	88 23       	and	r24, r24
     354:	29 f5       	brne	.+74     	; 0x3a0 <MONITOR_SendDataToDisplay+0x1cc>
            {
               ErrRetVal = OperationSuccess;
               u32_PrevNumber = u32_Number;
     356:	80 91 dd 00 	lds	r24, 0x00DD
     35a:	90 91 de 00 	lds	r25, 0x00DE
     35e:	a0 91 df 00 	lds	r26, 0x00DF
     362:	b0 91 e0 00 	lds	r27, 0x00E0
     366:	80 93 e1 00 	sts	0x00E1, r24
     36a:	90 93 e2 00 	sts	0x00E2, r25
     36e:	a0 93 e3 00 	sts	0x00E3, r26
     372:	b0 93 e4 00 	sts	0x00E4, r27
               State = OperationStarted;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	80 93 8c 00 	sts	0x008C, r24
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
            {
               ErrRetVal = OperationSuccess;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	11 c0       	rjmp	.+34     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
            }
			}			
		}
		else
		{
			ErrRetVal = OperationFail;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationRunning;
               State = GoToPosition;
            }
            else
            {
               ErrRetVal = OperationFail;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0b c0       	rjmp	.+22     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <MONITOR_SendDataToDisplay+0x1ce>
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <MONITOR_MainFunction>:
#define InitializationFlag_3  (3)
void MONITOR_MainFunction(void)
{
   uint8_t FunRetVal = OperationStarted;
   
	if(InitializationFlag == InitializationFlag_0)
     3a8:	80 91 cc 00 	lds	r24, 0x00CC
     3ac:	88 23       	and	r24, r24
     3ae:	49 f4       	brne	.+18     	; 0x3c2 <MONITOR_MainFunction+0x1a>
	{
		FunRetVal = LCD_Init();
     3b0:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_Init>
		if(FunRetVal == OperationSuccess)
     3b4:	88 23       	and	r24, r24
     3b6:	09 f0       	breq	.+2      	; 0x3ba <MONITOR_MainFunction+0x12>
     3b8:	a9 c0       	rjmp	.+338    	; 0x50c <MONITOR_MainFunction+0x164>
		{
			InitializationFlag = InitializationFlag_1;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 cc 00 	sts	0x00CC, r24
     3c0:	08 95       	ret
		}
	}
   else if (1 == InitializationFlag)
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	e9 f4       	brne	.+58     	; 0x400 <MONITOR_MainFunction+0x58>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"Distance: ";
     3c6:	83 e7       	ldi	r24, 0x73	; 115
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	90 93 d6 00 	sts	0x00D6, r25
     3ce:	80 93 d5 00 	sts	0x00D5, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     3d2:	10 92 d8 00 	sts	0x00D8, r1
     3d6:	10 92 d7 00 	sts	0x00D7, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 0;
     3da:	ed ec       	ldi	r30, 0xCD	; 205
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	10 82       	st	Z, r1
     3e0:	11 82       	std	Z+1, r1	; 0x01
     3e2:	12 82       	std	Z+2, r1	; 0x02
     3e4:	13 82       	std	Z+3, r1	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 0;
     3e6:	14 82       	std	Z+4, r1	; 0x04
     3e8:	15 82       	std	Z+5, r1	; 0x05
     3ea:	16 82       	std	Z+6, r1	; 0x06
     3ec:	17 82       	std	Z+7, r1	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     3ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     3f2:	88 23       	and	r24, r24
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <MONITOR_MainFunction+0x50>
     3f6:	8a c0       	rjmp	.+276    	; 0x50c <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_2;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	80 93 cc 00 	sts	0x00CC, r24
     3fe:	08 95       	ret
      }
   }      
   else if (2 == InitializationFlag)
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	29 f5       	brne	.+74     	; 0x44e <MONITOR_MainFunction+0xa6>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"AMR_TEAM";
     404:	8e e7       	ldi	r24, 0x7E	; 126
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 d6 00 	sts	0x00D6, r25
     40c:	80 93 d5 00 	sts	0x00D5, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     410:	10 92 d8 00 	sts	0x00D8, r1
     414:	10 92 d7 00 	sts	0x00D7, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 4;
     418:	ed ec       	ldi	r30, 0xCD	; 205
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	84 e0       	ldi	r24, 0x04	; 4
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	80 83       	st	Z, r24
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	a2 83       	std	Z+2, r26	; 0x02
     42a:	b3 83       	std	Z+3, r27	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 1;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	a0 e0       	ldi	r26, 0x00	; 0
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	84 83       	std	Z+4, r24	; 0x04
     436:	95 83       	std	Z+5, r25	; 0x05
     438:	a6 83       	std	Z+6, r26	; 0x06
     43a:	b7 83       	std	Z+7, r27	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     43c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     440:	88 23       	and	r24, r24
     442:	09 f0       	breq	.+2      	; 0x446 <MONITOR_MainFunction+0x9e>
     444:	63 c0       	rjmp	.+198    	; 0x50c <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_3;
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	80 93 cc 00 	sts	0x00CC, r24
     44c:	08 95       	ret
      }
   }      
	else
	{
		SENSING_Get(&number);
     44e:	89 ed       	ldi	r24, 0xD9	; 217
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 b8 02 	call	0x570	; 0x570 <SENSING_Get>
		u32_Number=(uint32_t)number;
     456:	60 91 d9 00 	lds	r22, 0x00D9
     45a:	70 91 da 00 	lds	r23, 0x00DA
     45e:	80 91 db 00 	lds	r24, 0x00DB
     462:	90 91 dc 00 	lds	r25, 0x00DC
     466:	0e 94 00 13 	call	0x2600	; 0x2600 <__fixunssfsi>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	80 93 dd 00 	sts	0x00DD, r24
     472:	90 93 de 00 	sts	0x00DE, r25
     476:	a0 93 df 00 	sts	0x00DF, r26
     47a:	b0 93 e0 00 	sts	0x00E0, r27
      if(u32_PrevNumber != u32_Number)
     47e:	40 91 e1 00 	lds	r20, 0x00E1
     482:	50 91 e2 00 	lds	r21, 0x00E2
     486:	60 91 e3 00 	lds	r22, 0x00E3
     48a:	70 91 e4 00 	lds	r23, 0x00E4
     48e:	84 17       	cp	r24, r20
     490:	95 07       	cpc	r25, r21
     492:	a6 07       	cpc	r26, r22
     494:	b7 07       	cpc	r27, r23
     496:	d1 f1       	breq	.+116    	; 0x50c <MONITOR_MainFunction+0x164>
      {
         if(u32_Number<=150)
     498:	87 39       	cpi	r24, 0x97	; 151
     49a:	91 05       	cpc	r25, r1
     49c:	a1 05       	cpc	r26, r1
     49e:	b1 05       	cpc	r27, r1
     4a0:	d8 f4       	brcc	.+54     	; 0x4d8 <MONITOR_MainFunction+0x130>
         {
            STR_ToDisplay.u8_MONITOR_String = NULL_PTR;
     4a2:	10 92 d6 00 	sts	0x00D6, r1
     4a6:	10 92 d5 00 	sts	0x00D5, r1
            STR_ToDisplay.u32_MONITOR_Number = &u32_Number;
     4aa:	8d ed       	ldi	r24, 0xDD	; 221
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 d8 00 	sts	0x00D8, r25
     4b2:	80 93 d7 00 	sts	0x00D7, r24
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     4b6:	ed ec       	ldi	r30, 0xCD	; 205
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	8a e0       	ldi	r24, 0x0A	; 10
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	80 83       	st	Z, r24
     4c4:	91 83       	std	Z+1, r25	; 0x01
     4c6:	a2 83       	std	Z+2, r26	; 0x02
     4c8:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     4ca:	14 82       	std	Z+4, r1	; 0x04
     4cc:	15 82       	std	Z+5, r1	; 0x05
     4ce:	16 82       	std	Z+6, r1	; 0x06
     4d0:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     4d2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MONITOR_SendDataToDisplay>
     4d6:	08 95       	ret
            
         }
         else
         {
            STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"FREE";
     4d8:	87 e8       	ldi	r24, 0x87	; 135
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 d6 00 	sts	0x00D6, r25
     4e0:	80 93 d5 00 	sts	0x00D5, r24
            STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     4e4:	10 92 d8 00 	sts	0x00D8, r1
     4e8:	10 92 d7 00 	sts	0x00D7, r1
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     4ec:	ed ec       	ldi	r30, 0xCD	; 205
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	80 83       	st	Z, r24
     4fa:	91 83       	std	Z+1, r25	; 0x01
     4fc:	a2 83       	std	Z+2, r26	; 0x02
     4fe:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     500:	14 82       	std	Z+4, r1	; 0x04
     502:	15 82       	std	Z+5, r1	; 0x05
     504:	16 82       	std	Z+6, r1	; 0x06
     506:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     508:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MONITOR_SendDataToDisplay>
     50c:	08 95       	ret

0000050e <MONITOR_Set>:

static STR_MONITOR_data_t * From_Outside_To_Inside = NULL_PTR;
ERROR_STATE_t MONITOR_Set(STR_MONITOR_data_t * Data_To_Display)
{
	uint8_t ErrRetVal = 0;
	From_Outside_To_Inside = Data_To_Display;
     50e:	90 93 e7 00 	sts	0x00E7, r25
     512:	80 93 e6 00 	sts	0x00E6, r24
	return ErrRetVal;
}
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret

0000051a <MONITOR_Get>:
	if(From_Outside_To_Inside != NULL_PTR)
	{
		Data_From_Display = From_Outside_To_Inside;	
	}
	return ErrRetVal;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	08 95       	ret

0000051e <SENSING_MainFunction>:
	u8_ErrorState = USONIC_Init();
	return u8_ErrorState;
}

void SENSING_MainFunction(void)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	00 d0       	rcall	.+0      	; 0x524 <SENSING_MainFunction+0x6>
     524:	00 d0       	rcall	.+0      	; 0x526 <SENSING_MainFunction+0x8>
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
     52a:	80 91 e8 00 	lds	r24, 0x00E8
     52e:	88 23       	and	r24, r24
     530:	41 f4       	brne	.+16     	; 0x542 <SENSING_MainFunction+0x24>

static ERROR_STATE_t SENSING_Init(void);
static ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
     532:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <USONIC_Init>
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
	{
		if(ERROR_OK==SENSING_Init())
     536:	88 23       	and	r24, r24
     538:	21 f4       	brne	.+8      	; 0x542 <SENSING_MainFunction+0x24>
		{
			u8_InitFlag=INIT;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 e8 00 	sts	0x00E8, r24
     540:	04 c0       	rjmp	.+8      	; 0x54a <SENSING_MainFunction+0x2c>
		else
		{
			
		}
	}
	if(INIT==u8_InitFlag)
     542:	80 91 e8 00 	lds	r24, 0x00E8
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	61 f4       	brne	.+24     	; 0x562 <SENSING_MainFunction+0x44>
	{
		u8_UsonicState = USONIC_GetDistance(&d64_Distance);
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
     552:	88 23       	and	r24, r24
     554:	31 f4       	brne	.+12     	; 0x562 <SENSING_MainFunction+0x44>
		{
			SENSING_Set(d64_Distance);
     556:	69 81       	ldd	r22, Y+1	; 0x01
     558:	7a 81       	ldd	r23, Y+2	; 0x02
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	0e 94 cb 02 	call	0x596	; 0x596 <SENSING_Set>
		{
			/*Do Nothing*/
		}
	}
	return;			
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	79 f0       	breq	.+30     	; 0x592 <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
     574:	40 91 e9 00 	lds	r20, 0x00E9
     578:	50 91 ea 00 	lds	r21, 0x00EA
     57c:	60 91 eb 00 	lds	r22, 0x00EB
     580:	70 91 ec 00 	lds	r23, 0x00EC
     584:	fc 01       	movw	r30, r24
     586:	40 83       	st	Z, r20
     588:	51 83       	std	Z+1, r21	; 0x01
     58a:	62 83       	std	Z+2, r22	; 0x02
     58c:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
     592:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
     594:	08 95       	ret

00000596 <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
     59a:	80 93 e9 00 	sts	0x00E9, r24
     59e:	90 93 ea 00 	sts	0x00EA, r25
     5a2:	a0 93 eb 00 	sts	0x00EB, r26
     5a6:	b0 93 ec 00 	sts	0x00EC, r27
	
	return u8_ErrorState;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <STEERING_MainFunction>:
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	/*Check if the moduled has been init before*/
	if(NOT_INIT==u8_InitFlag)
     5ae:	80 91 ed 00 	lds	r24, 0x00ED
     5b2:	88 23       	and	r24, r24
     5b4:	41 f4       	brne	.+16     	; 0x5c6 <STEERING_MainFunction+0x18>
/*- LOCAL FUNCTIONS IMPLEMENTATION------------------------*/
static ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   /*Initlaize the motors*/
   MOTOR_ErrorState = MOTOR_init();
     5b6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <MOTOR_init>
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	/*Check if the moduled has been init before*/
	if(NOT_INIT==u8_InitFlag)
	{
		/*Check if the init function returned OK*/
		if(ERROR_OK==STEERING_Init())
     5ba:	88 23       	and	r24, r24
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <STEERING_MainFunction+0x18>
		{
			u8_InitFlag=INIT;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 ed 00 	sts	0x00ED, r24
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <STEERING_MainFunction+0x22>
	}
	else
	{
        //DO Nothing
	}
    if(INIT==u8_InitFlag)
     5c6:	80 91 ed 00 	lds	r24, 0x00ED
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <STEERING_MainFunction+0x22>
     5ce:	4e c0       	rjmp	.+156    	; 0x66c <STEERING_MainFunction+0xbe>
	{
		/*Get speed and direction from crash module*/
		CRASH_GetSpeed(&u16_speed);
     5d0:	8e ee       	ldi	r24, 0xEE	; 238
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CRASH_GetSpeed>
		CRASH_GetDirection(&u8_dir);
     5d8:	80 ef       	ldi	r24, 0xF0	; 240
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <CRASH_GetDirection>
		/*Set speed and dirction in structure*/
		STEERING_Set(u8_dir,u16_speed);
     5e0:	60 91 ee 00 	lds	r22, 0x00EE
     5e4:	70 91 ef 00 	lds	r23, 0x00EF
     5e8:	80 91 f0 00 	lds	r24, 0x00F0
     5ec:	0e 94 37 03 	call	0x66e	; 0x66e <STEERING_Set>
		/*Check the direction*/
		switch(u8_dir)
     5f0:	80 91 f0 00 	lds	r24, 0x00F0
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	a1 f0       	breq	.+40     	; 0x620 <STEERING_MainFunction+0x72>
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	28 f0       	brcs	.+10     	; 0x606 <STEERING_MainFunction+0x58>
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	e9 f0       	breq	.+58     	; 0x63a <STEERING_MainFunction+0x8c>
     600:	83 30       	cpi	r24, 0x03	; 3
     602:	a1 f5       	brne	.+104    	; 0x66c <STEERING_MainFunction+0xbe>
     604:	27 c0       	rjmp	.+78     	; 0x654 <STEERING_MainFunction+0xa6>
		{
		  case STEERING_FORWARD:
             MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	60 91 ee 00 	lds	r22, 0x00EE
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	60 91 ee 00 	lds	r22, 0x00EE
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
			 break;
     61e:	08 95       	ret
		  case STEERING_BACKWARD:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	60 91 ee 00 	lds	r22, 0x00EE
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	60 91 ee 00 	lds	r22, 0x00EE
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
			 break;
     638:	08 95       	ret
		  case STEERING_RIGHT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	60 91 ee 00 	lds	r22, 0x00EE
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	60 91 ee 00 	lds	r22, 0x00EE
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
			 break;
     652:	08 95       	ret
		  case STEERING_LEFT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	60 91 ee 00 	lds	r22, 0x00EE
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	60 91 ee 00 	lds	r22, 0x00EE
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	0e 94 14 07 	call	0xe28	; 0xe28 <MOTOR_start>
     66c:	08 95       	ret

0000066e <STEERING_Set>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING)
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	58 f4       	brcc	.+22     	; 0x688 <STEERING_Set+0x1a>
	{
		STEERING_ErrorState = ERROR_NOK;
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED)
     672:	65 36       	cpi	r22, 0x65	; 101
     674:	71 05       	cpc	r23, r1
     676:	50 f4       	brcc	.+20     	; 0x68c <STEERING_Set+0x1e>
		STEERING_ErrorState = ERROR_NOK;
	}
	else
	{
		/*SET THE SPEED*/
		gstr_Steering_State.u16_steering_Speed=Speed;
     678:	70 93 f2 00 	sts	0x00F2, r23
     67c:	60 93 f1 00 	sts	0x00F1, r22
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
     680:	80 93 f3 00 	sts	0x00F3, r24
		STEERING_ErrorState = ERROR_OK;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING)
	{
		STEERING_ErrorState = ERROR_NOK;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	08 95       	ret
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED)
	{
		STEERING_ErrorState = ERROR_NOK;
     68c:	81 e0       	ldi	r24, 0x01	; 1
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
}
     68e:	08 95       	ret

00000690 <STEERING_Get>:
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed)
{
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	81 f0       	breq	.+32     	; 0x6b4 <STEERING_Get+0x24>
     694:	61 15       	cp	r22, r1
     696:	71 05       	cpc	r23, r1
     698:	79 f0       	breq	.+30     	; 0x6b8 <STEERING_Get+0x28>
		STEERING_ErrorState=ERROR_NOK;
	}
	else
    {
		/*GET THE SPEED*/
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
     69a:	20 91 f1 00 	lds	r18, 0x00F1
     69e:	30 91 f2 00 	lds	r19, 0x00F2
     6a2:	fb 01       	movw	r30, r22
     6a4:	31 83       	std	Z+1, r19	; 0x01
     6a6:	20 83       	st	Z, r18
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
     6a8:	20 91 f3 00 	lds	r18, 0x00F3
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
		STEERING_ErrorState = ERROR_OK;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret
{
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
    {
		STEERING_ErrorState=ERROR_NOK;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	08 95       	ret
     6b8:	81 e0       	ldi	r24, 0x01	; 1
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
     6ba:	08 95       	ret

000006bc <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     6c6:	80 91 8d 00 	lds	r24, 0x008D
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <LCD_SendCommand+0x14>
     6ce:	ce c0       	rjmp	.+412    	; 0x86c <__stack+0xd>
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	38 f4       	brcc	.+14     	; 0x6e2 <LCD_SendCommand+0x26>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	09 f4       	brne	.+2      	; 0x6da <LCD_SendCommand+0x1e>
     6d8:	60 c0       	rjmp	.+192    	; 0x79a <LCD_SendCommand+0xde>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <LCD_SendCommand+0x24>
     6de:	01 c1       	rjmp	.+514    	; 0x8e2 <__stack+0x83>
     6e0:	7f c0       	rjmp	.+254    	; 0x7e0 <LCD_SendCommand+0x124>
     6e2:	84 30       	cpi	r24, 0x04	; 4
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <LCD_SendCommand+0x2c>
     6e6:	e4 c0       	rjmp	.+456    	; 0x8b0 <__stack+0x51>
     6e8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ea:	09 f0       	breq	.+2      	; 0x6ee <LCD_SendCommand+0x32>
     6ec:	fa c0       	rjmp	.+500    	; 0x8e2 <__stack+0x83>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     6ee:	d0 91 90 00 	lds	r29, 0x0090
     6f2:	8d 2f       	mov	r24, r29
     6f4:	60 91 91 00 	lds	r22, 0x0091
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     6fe:	8d 2f       	mov	r24, r29
     700:	60 91 92 00 	lds	r22, 0x0092
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     70a:	0c 2f       	mov	r16, r28
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	a8 01       	movw	r20, r16
     710:	40 71       	andi	r20, 0x10	; 16
     712:	50 70       	andi	r21, 0x00	; 0
     714:	55 95       	asr	r21
     716:	47 95       	ror	r20
     718:	55 95       	asr	r21
     71a:	47 95       	ror	r20
     71c:	55 95       	asr	r21
     71e:	47 95       	ror	r20
     720:	55 95       	asr	r21
     722:	47 95       	ror	r20
     724:	8d 2f       	mov	r24, r29
     726:	60 91 97 00 	lds	r22, 0x0097
     72a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     72e:	a8 01       	movw	r20, r16
     730:	40 72       	andi	r20, 0x20	; 32
     732:	50 70       	andi	r21, 0x00	; 0
     734:	55 95       	asr	r21
     736:	47 95       	ror	r20
     738:	55 95       	asr	r21
     73a:	47 95       	ror	r20
     73c:	55 95       	asr	r21
     73e:	47 95       	ror	r20
     740:	55 95       	asr	r21
     742:	47 95       	ror	r20
     744:	55 95       	asr	r21
     746:	47 95       	ror	r20
     748:	8d 2f       	mov	r24, r29
     74a:	60 91 96 00 	lds	r22, 0x0096
     74e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     752:	00 74       	andi	r16, 0x40	; 64
     754:	10 70       	andi	r17, 0x00	; 0
     756:	a8 01       	movw	r20, r16
     758:	04 2e       	mov	r0, r20
     75a:	45 2f       	mov	r20, r21
     75c:	00 0c       	add	r0, r0
     75e:	44 1f       	adc	r20, r20
     760:	55 0b       	sbc	r21, r21
     762:	00 0c       	add	r0, r0
     764:	44 1f       	adc	r20, r20
     766:	55 1f       	adc	r21, r21
     768:	8d 2f       	mov	r24, r29
     76a:	60 91 95 00 	lds	r22, 0x0095
     76e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     772:	4c 2f       	mov	r20, r28
     774:	44 1f       	adc	r20, r20
     776:	44 27       	eor	r20, r20
     778:	44 1f       	adc	r20, r20
     77a:	8d 2f       	mov	r24, r29
     77c:	60 91 94 00 	lds	r22, 0x0094
     780:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     784:	8d 2f       	mov	r24, r29
     786:	60 91 93 00 	lds	r22, 0x0093
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     796:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     798:	ab c0       	rjmp	.+342    	; 0x8f0 <__stack+0x91>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     79a:	ce e5       	ldi	r28, 0x5E	; 94
     79c:	d3 e0       	ldi	r29, 0x03	; 3
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	be 01       	movw	r22, r28
     7a2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     7a6:	8b 3f       	cpi	r24, 0xFB	; 251
     7a8:	09 f0       	breq	.+2      	; 0x7ac <LCD_SendCommand+0xf0>
     7aa:	9d c0       	rjmp	.+314    	; 0x8e6 <__stack+0x87>
		{
   		TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	9e 01       	movw	r18, r28
     7b8:	0e 94 ad 10 	call	0x215a	; 0x215a <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	be 01       	movw	r22, r28
     7c0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     7c4:	88 23       	and	r24, r24
     7c6:	d1 f7       	brne	.-12     	; 0x7bc <LCD_SendCommand+0x100>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     7c8:	80 91 90 00 	lds	r24, 0x0090
     7cc:	60 91 93 00 	lds	r22, 0x0093
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	88 c0       	rjmp	.+272    	; 0x8f0 <__stack+0x91>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     7e0:	d0 91 90 00 	lds	r29, 0x0090
     7e4:	8d 2f       	mov	r24, r29
     7e6:	60 91 91 00 	lds	r22, 0x0091
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     7f0:	8d 2f       	mov	r24, r29
     7f2:	60 91 92 00 	lds	r22, 0x0092
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     7fc:	4c 2f       	mov	r20, r28
     7fe:	41 70       	andi	r20, 0x01	; 1
     800:	8d 2f       	mov	r24, r29
     802:	60 91 97 00 	lds	r22, 0x0097
     806:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     80a:	0c 2f       	mov	r16, r28
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	a8 01       	movw	r20, r16
     810:	42 70       	andi	r20, 0x02	; 2
     812:	50 70       	andi	r21, 0x00	; 0
     814:	55 95       	asr	r21
     816:	47 95       	ror	r20
     818:	8d 2f       	mov	r24, r29
     81a:	60 91 96 00 	lds	r22, 0x0096
     81e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     822:	a8 01       	movw	r20, r16
     824:	44 70       	andi	r20, 0x04	; 4
     826:	50 70       	andi	r21, 0x00	; 0
     828:	55 95       	asr	r21
     82a:	47 95       	ror	r20
     82c:	55 95       	asr	r21
     82e:	47 95       	ror	r20
     830:	8d 2f       	mov	r24, r29
     832:	60 91 95 00 	lds	r22, 0x0095
     836:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     83a:	08 70       	andi	r16, 0x08	; 8
     83c:	10 70       	andi	r17, 0x00	; 0
     83e:	a8 01       	movw	r20, r16
     840:	55 95       	asr	r21
     842:	47 95       	ror	r20
     844:	55 95       	asr	r21
     846:	47 95       	ror	r20
     848:	55 95       	asr	r21
     84a:	47 95       	ror	r20
     84c:	8d 2f       	mov	r24, r29
     84e:	60 91 94 00 	lds	r22, 0x0094
     852:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     856:	8d 2f       	mov	r24, r29
     858:	60 91 93 00 	lds	r22, 0x0093
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     868:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     86a:	42 c0       	rjmp	.+132    	; 0x8f0 <__stack+0x91>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     86c:	ce e5       	ldi	r28, 0x5E	; 94
     86e:	d3 e0       	ldi	r29, 0x03	; 3
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	be 01       	movw	r22, r28
     874:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     878:	8b 3f       	cpi	r24, 0xFB	; 251
     87a:	b9 f5       	brne	.+110    	; 0x8ea <__stack+0x8b>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	9e 01       	movw	r18, r28
     888:	0e 94 ad 10 	call	0x215a	; 0x215a <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	be 01       	movw	r22, r28
     890:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     894:	88 23       	and	r24, r24
     896:	d1 f7       	brne	.-12     	; 0x88c <__stack+0x2d>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     898:	80 91 90 00 	lds	r24, 0x0090
     89c:	60 91 93 00 	lds	r22, 0x0093
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	20 c0       	rjmp	.+64     	; 0x8f0 <__stack+0x91>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     8b0:	ce e5       	ldi	r28, 0x5E	; 94
     8b2:	d3 e0       	ldi	r29, 0x03	; 3
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	be 01       	movw	r22, r28
     8b8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     8bc:	8b 3f       	cpi	r24, 0xFB	; 251
     8be:	51 f4       	brne	.+20     	; 0x8d4 <__stack+0x75>
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	42 e0       	ldi	r20, 0x02	; 2
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	9e 01       	movw	r18, r28
     8cc:	0e 94 35 11 	call	0x226a	; 0x226a <TIM_DelayMs>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <__stack+0x91>
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     8d4:	88 23       	and	r24, r24
     8d6:	59 f4       	brne	.+22     	; 0x8ee <__stack+0x8f>
		{
			/*reset the function's state*/
			State = OperationStarted;
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	80 93 8d 00 	sts	0x008D, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__stack+0x91>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__stack+0x91>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <__stack+0x91>
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <__stack+0x91>
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     904:	80 91 8e 00 	lds	r24, 0x008E
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	09 f4       	brne	.+2      	; 0x90e <LCD_SendData+0x14>
     90c:	85 c0       	rjmp	.+266    	; 0xa18 <LCD_SendData+0x11e>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	20 f4       	brcc	.+8      	; 0x91a <LCD_SendData+0x20>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	09 f0       	breq	.+2      	; 0x918 <LCD_SendData+0x1e>
     916:	e8 c0       	rjmp	.+464    	; 0xae8 <LCD_SendData+0x1ee>
     918:	5c c0       	rjmp	.+184    	; 0x9d2 <LCD_SendData+0xd8>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	09 f4       	brne	.+2      	; 0x920 <LCD_SendData+0x26>
     91e:	c2 c0       	rjmp	.+388    	; 0xaa4 <LCD_SendData+0x1aa>
     920:	8f 3f       	cpi	r24, 0xFF	; 255
     922:	09 f0       	breq	.+2      	; 0x926 <LCD_SendData+0x2c>
     924:	e1 c0       	rjmp	.+450    	; 0xae8 <LCD_SendData+0x1ee>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     926:	d0 91 90 00 	lds	r29, 0x0090
     92a:	8d 2f       	mov	r24, r29
     92c:	60 91 91 00 	lds	r22, 0x0091
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     936:	8d 2f       	mov	r24, r29
     938:	60 91 92 00 	lds	r22, 0x0092
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     942:	4c 2f       	mov	r20, r28
     944:	44 1f       	adc	r20, r20
     946:	44 27       	eor	r20, r20
     948:	44 1f       	adc	r20, r20
     94a:	8d 2f       	mov	r24, r29
     94c:	60 91 94 00 	lds	r22, 0x0094
     950:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     954:	0c 2f       	mov	r16, r28
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	a8 01       	movw	r20, r16
     95a:	40 74       	andi	r20, 0x40	; 64
     95c:	50 70       	andi	r21, 0x00	; 0
     95e:	04 2e       	mov	r0, r20
     960:	45 2f       	mov	r20, r21
     962:	00 0c       	add	r0, r0
     964:	44 1f       	adc	r20, r20
     966:	55 0b       	sbc	r21, r21
     968:	00 0c       	add	r0, r0
     96a:	44 1f       	adc	r20, r20
     96c:	55 1f       	adc	r21, r21
     96e:	8d 2f       	mov	r24, r29
     970:	60 91 95 00 	lds	r22, 0x0095
     974:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     978:	a8 01       	movw	r20, r16
     97a:	40 72       	andi	r20, 0x20	; 32
     97c:	50 70       	andi	r21, 0x00	; 0
     97e:	55 95       	asr	r21
     980:	47 95       	ror	r20
     982:	55 95       	asr	r21
     984:	47 95       	ror	r20
     986:	55 95       	asr	r21
     988:	47 95       	ror	r20
     98a:	55 95       	asr	r21
     98c:	47 95       	ror	r20
     98e:	55 95       	asr	r21
     990:	47 95       	ror	r20
     992:	8d 2f       	mov	r24, r29
     994:	60 91 96 00 	lds	r22, 0x0096
     998:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     99c:	00 71       	andi	r16, 0x10	; 16
     99e:	10 70       	andi	r17, 0x00	; 0
     9a0:	a8 01       	movw	r20, r16
     9a2:	55 95       	asr	r21
     9a4:	47 95       	ror	r20
     9a6:	55 95       	asr	r21
     9a8:	47 95       	ror	r20
     9aa:	55 95       	asr	r21
     9ac:	47 95       	ror	r20
     9ae:	55 95       	asr	r21
     9b0:	47 95       	ror	r20
     9b2:	8d 2f       	mov	r24, r29
     9b4:	60 91 97 00 	lds	r22, 0x0097
     9b8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     9bc:	8d 2f       	mov	r24, r29
     9be:	60 91 93 00 	lds	r22, 0x0093
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     9d0:	90 c0       	rjmp	.+288    	; 0xaf2 <LCD_SendData+0x1f8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     9d2:	ce e5       	ldi	r28, 0x5E	; 94
     9d4:	d3 e0       	ldi	r29, 0x03	; 3
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	be 01       	movw	r22, r28
     9da:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     9de:	8b 3f       	cpi	r24, 0xFB	; 251
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <LCD_SendData+0xea>
     9e2:	84 c0       	rjmp	.+264    	; 0xaec <LCD_SendData+0x1f2>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	9e 01       	movw	r18, r28
     9f0:	0e 94 ad 10 	call	0x215a	; 0x215a <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	be 01       	movw	r22, r28
     9f8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     9fc:	88 23       	and	r24, r24
     9fe:	d1 f7       	brne	.-12     	; 0x9f4 <LCD_SendData+0xfa>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a00:	80 91 90 00 	lds	r24, 0x0090
     a04:	60 91 93 00 	lds	r22, 0x0093
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	6d c0       	rjmp	.+218    	; 0xaf2 <LCD_SendData+0x1f8>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     a18:	d0 91 90 00 	lds	r29, 0x0090
     a1c:	8d 2f       	mov	r24, r29
     a1e:	60 91 91 00 	lds	r22, 0x0091
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     a28:	8d 2f       	mov	r24, r29
     a2a:	60 91 92 00 	lds	r22, 0x0092
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     a34:	0c 2f       	mov	r16, r28
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	a8 01       	movw	r20, r16
     a3a:	48 70       	andi	r20, 0x08	; 8
     a3c:	50 70       	andi	r21, 0x00	; 0
     a3e:	55 95       	asr	r21
     a40:	47 95       	ror	r20
     a42:	55 95       	asr	r21
     a44:	47 95       	ror	r20
     a46:	55 95       	asr	r21
     a48:	47 95       	ror	r20
     a4a:	8d 2f       	mov	r24, r29
     a4c:	60 91 94 00 	lds	r22, 0x0094
     a50:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     a54:	a8 01       	movw	r20, r16
     a56:	44 70       	andi	r20, 0x04	; 4
     a58:	50 70       	andi	r21, 0x00	; 0
     a5a:	55 95       	asr	r21
     a5c:	47 95       	ror	r20
     a5e:	55 95       	asr	r21
     a60:	47 95       	ror	r20
     a62:	8d 2f       	mov	r24, r29
     a64:	60 91 95 00 	lds	r22, 0x0095
     a68:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     a6c:	02 70       	andi	r16, 0x02	; 2
     a6e:	10 70       	andi	r17, 0x00	; 0
     a70:	a8 01       	movw	r20, r16
     a72:	55 95       	asr	r21
     a74:	47 95       	ror	r20
     a76:	8d 2f       	mov	r24, r29
     a78:	60 91 96 00 	lds	r22, 0x0096
     a7c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     a80:	4c 2f       	mov	r20, r28
     a82:	41 70       	andi	r20, 0x01	; 1
     a84:	8d 2f       	mov	r24, r29
     a86:	60 91 97 00 	lds	r22, 0x0097
     a8a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     a8e:	8d 2f       	mov	r24, r29
     a90:	60 91 93 00 	lds	r22, 0x0093
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     aa0:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     aa2:	27 c0       	rjmp	.+78     	; 0xaf2 <LCD_SendData+0x1f8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     aa4:	ce e5       	ldi	r28, 0x5E	; 94
     aa6:	d3 e0       	ldi	r29, 0x03	; 3
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	be 01       	movw	r22, r28
     aac:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     ab0:	8b 3f       	cpi	r24, 0xFB	; 251
     ab2:	f1 f4       	brne	.+60     	; 0xaf0 <LCD_SendData+0x1f6>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	9e 01       	movw	r18, r28
     ac0:	0e 94 ad 10 	call	0x215a	; 0x215a <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	be 01       	movw	r22, r28
     ac8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
     acc:	88 23       	and	r24, r24
     ace:	d1 f7       	brne	.-12     	; 0xac4 <LCD_SendData+0x1ca>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     ad0:	80 91 90 00 	lds	r24, 0x0090
     ad4:	60 91 93 00 	lds	r22, 0x0093
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	80 93 8e 00 	sts	0x008E, r24
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <LCD_SendData+0x1f8>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <LCD_SendData+0x1f8>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <LCD_SendData+0x1f8>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     b0c:	80 91 8f 00 	lds	r24, 0x008F
     b10:	8b 30       	cpi	r24, 0x0B	; 11
     b12:	09 f4       	brne	.+2      	; 0xb16 <LCD_Init+0x1a>
     b14:	cb c0       	rjmp	.+406    	; 0xcac <LCD_Init+0x1b0>
     b16:	8c 30       	cpi	r24, 0x0C	; 12
     b18:	98 f4       	brcc	.+38     	; 0xb40 <LCD_Init+0x44>
     b1a:	88 30       	cpi	r24, 0x08	; 8
     b1c:	09 f4       	brne	.+2      	; 0xb20 <LCD_Init+0x24>
     b1e:	a5 c0       	rjmp	.+330    	; 0xc6a <LCD_Init+0x16e>
     b20:	89 30       	cpi	r24, 0x09	; 9
     b22:	38 f4       	brcc	.+14     	; 0xb32 <LCD_Init+0x36>
     b24:	85 30       	cpi	r24, 0x05	; 5
     b26:	09 f4       	brne	.+2      	; 0xb2a <LCD_Init+0x2e>
     b28:	7b c0       	rjmp	.+246    	; 0xc20 <LCD_Init+0x124>
     b2a:	86 30       	cpi	r24, 0x06	; 6
     b2c:	09 f0       	breq	.+2      	; 0xb30 <LCD_Init+0x34>
     b2e:	f0 c0       	rjmp	.+480    	; 0xd10 <LCD_Init+0x214>
     b30:	91 c0       	rjmp	.+290    	; 0xc54 <LCD_Init+0x158>
     b32:	89 30       	cpi	r24, 0x09	; 9
     b34:	09 f4       	brne	.+2      	; 0xb38 <LCD_Init+0x3c>
     b36:	a4 c0       	rjmp	.+328    	; 0xc80 <LCD_Init+0x184>
     b38:	8a 30       	cpi	r24, 0x0A	; 10
     b3a:	09 f0       	breq	.+2      	; 0xb3e <LCD_Init+0x42>
     b3c:	e9 c0       	rjmp	.+466    	; 0xd10 <LCD_Init+0x214>
     b3e:	ab c0       	rjmp	.+342    	; 0xc96 <LCD_Init+0x19a>
     b40:	8e 30       	cpi	r24, 0x0E	; 14
     b42:	09 f4       	brne	.+2      	; 0xb46 <LCD_Init+0x4a>
     b44:	d1 c0       	rjmp	.+418    	; 0xce8 <LCD_Init+0x1ec>
     b46:	8f 30       	cpi	r24, 0x0F	; 15
     b48:	38 f4       	brcc	.+14     	; 0xb58 <LCD_Init+0x5c>
     b4a:	8c 30       	cpi	r24, 0x0C	; 12
     b4c:	09 f4       	brne	.+2      	; 0xb50 <LCD_Init+0x54>
     b4e:	b8 c0       	rjmp	.+368    	; 0xcc0 <LCD_Init+0x1c4>
     b50:	8d 30       	cpi	r24, 0x0D	; 13
     b52:	09 f0       	breq	.+2      	; 0xb56 <LCD_Init+0x5a>
     b54:	dd c0       	rjmp	.+442    	; 0xd10 <LCD_Init+0x214>
     b56:	be c0       	rjmp	.+380    	; 0xcd4 <LCD_Init+0x1d8>
     b58:	8f 30       	cpi	r24, 0x0F	; 15
     b5a:	09 f4       	brne	.+2      	; 0xb5e <LCD_Init+0x62>
     b5c:	cf c0       	rjmp	.+414    	; 0xcfc <LCD_Init+0x200>
     b5e:	8f 3f       	cpi	r24, 0xFF	; 255
     b60:	09 f0       	breq	.+2      	; 0xb64 <LCD_Init+0x68>
     b62:	d6 c0       	rjmp	.+428    	; 0xd10 <LCD_Init+0x214>
	case OperationStarted:
		/*Dio Initialize for the*/
		TIM_Init(TIMER_2);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     b6a:	c0 91 90 00 	lds	r28, 0x0090
     b6e:	e0 90 94 00 	lds	r14, 0x0094
     b72:	8c 2f       	mov	r24, r28
     b74:	6e 2d       	mov	r22, r14
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     b7c:	f0 90 95 00 	lds	r15, 0x0095
     b80:	8c 2f       	mov	r24, r28
     b82:	6f 2d       	mov	r22, r15
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     b8a:	00 91 96 00 	lds	r16, 0x0096
     b8e:	8c 2f       	mov	r24, r28
     b90:	60 2f       	mov	r22, r16
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     b98:	10 91 97 00 	lds	r17, 0x0097
     b9c:	8c 2f       	mov	r24, r28
     b9e:	61 2f       	mov	r22, r17
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     ba6:	d0 91 91 00 	lds	r29, 0x0091
     baa:	8c 2f       	mov	r24, r28
     bac:	6d 2f       	mov	r22, r29
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     bb4:	d0 90 92 00 	lds	r13, 0x0092
     bb8:	8c 2f       	mov	r24, r28
     bba:	6d 2d       	mov	r22, r13
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     bc2:	c0 90 93 00 	lds	r12, 0x0093
     bc6:	8c 2f       	mov	r24, r28
     bc8:	6c 2d       	mov	r22, r12
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     bd0:	8c 2f       	mov	r24, r28
     bd2:	6e 2d       	mov	r22, r14
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     bda:	8c 2f       	mov	r24, r28
     bdc:	6f 2d       	mov	r22, r15
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     be4:	8c 2f       	mov	r24, r28
     be6:	60 2f       	mov	r22, r16
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     bee:	8c 2f       	mov	r24, r28
     bf0:	61 2f       	mov	r22, r17
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     bf8:	8c 2f       	mov	r24, r28
     bfa:	6d 2f       	mov	r22, r29
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     c02:	8c 2f       	mov	r24, r28
     c04:	6d 2d       	mov	r22, r13
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     c0c:	8c 2f       	mov	r24, r28
     c0e:	6c 2d       	mov	r22, r12
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     c1e:	8d c0       	rjmp	.+282    	; 0xd3a <LCD_Init+0x23e>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     c20:	ce e5       	ldi	r28, 0x5E	; 94
     c22:	d3 e0       	ldi	r29, 0x03	; 3
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	be 01       	movw	r22, r28
     c28:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <TIM_DelayStatus>
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     c2c:	8b 3f       	cpi	r24, 0xFB	; 251
     c2e:	51 f4       	brne	.+20     	; 0xc44 <LCD_Init+0x148>
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	4f e0       	ldi	r20, 0x0F	; 15
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	9e 01       	movw	r18, r28
     c3c:	0e 94 35 11 	call	0x226a	; 0x226a <TIM_DelayMs>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	7b c0       	rjmp	.+246    	; 0xd3a <LCD_Init+0x23e>
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <LCD_Init+0x14e>
     c48:	65 c0       	rjmp	.+202    	; 0xd14 <LCD_Init+0x218>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     c4a:	86 e0       	ldi	r24, 0x06	; 6
     c4c:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	73 c0       	rjmp	.+230    	; 0xd3a <LCD_Init+0x23e>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c5a:	88 23       	and	r24, r24
     c5c:	09 f0       	breq	.+2      	; 0xc60 <LCD_Init+0x164>
     c5e:	5c c0       	rjmp	.+184    	; 0xd18 <LCD_Init+0x21c>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     c60:	88 e0       	ldi	r24, 0x08	; 8
     c62:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	68 c0       	rjmp	.+208    	; 0xd3a <LCD_Init+0x23e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c70:	88 23       	and	r24, r24
     c72:	09 f0       	breq	.+2      	; 0xc76 <LCD_Init+0x17a>
     c74:	53 c0       	rjmp	.+166    	; 0xd1c <LCD_Init+0x220>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     c76:	89 e0       	ldi	r24, 0x09	; 9
     c78:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	5d c0       	rjmp	.+186    	; 0xd3a <LCD_Init+0x23e>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c86:	88 23       	and	r24, r24
     c88:	09 f0       	breq	.+2      	; 0xc8c <LCD_Init+0x190>
     c8a:	4a c0       	rjmp	.+148    	; 0xd20 <LCD_Init+0x224>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	52 c0       	rjmp	.+164    	; 0xd3a <LCD_Init+0x23e>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c9c:	88 23       	and	r24, r24
     c9e:	09 f0       	breq	.+2      	; 0xca2 <LCD_Init+0x1a6>
     ca0:	41 c0       	rjmp	.+130    	; 0xd24 <LCD_Init+0x228>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     ca2:	8b e0       	ldi	r24, 0x0B	; 11
     ca4:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	47 c0       	rjmp	.+142    	; 0xd3a <LCD_Init+0x23e>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     cac:	88 e2       	ldi	r24, 0x28	; 40
     cae:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     cb2:	88 23       	and	r24, r24
     cb4:	c9 f5       	brne	.+114    	; 0xd28 <LCD_Init+0x22c>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     cb6:	8c e0       	ldi	r24, 0x0C	; 12
     cb8:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	3d c0       	rjmp	.+122    	; 0xd3a <LCD_Init+0x23e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
     cc2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     cc6:	88 23       	and	r24, r24
     cc8:	89 f5       	brne	.+98     	; 0xd2c <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     cca:	8d e0       	ldi	r24, 0x0D	; 13
     ccc:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	33 c0       	rjmp	.+102    	; 0xd3a <LCD_Init+0x23e>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     cd4:	86 e0       	ldi	r24, 0x06	; 6
     cd6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     cda:	88 23       	and	r24, r24
     cdc:	49 f5       	brne	.+82     	; 0xd30 <LCD_Init+0x234>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     cde:	8e e0       	ldi	r24, 0x0E	; 14
     ce0:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	29 c0       	rjmp	.+82     	; 0xd3a <LCD_Init+0x23e>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     cee:	88 23       	and	r24, r24
     cf0:	09 f5       	brne	.+66     	; 0xd34 <LCD_Init+0x238>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     cf2:	8f e0       	ldi	r24, 0x0F	; 15
     cf4:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	1f c0       	rjmp	.+62     	; 0xd3a <LCD_Init+0x23e>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     d02:	88 23       	and	r24, r24
     d04:	c9 f4       	brne	.+50     	; 0xd38 <LCD_Init+0x23c>
		{
			State = OperationStarted;
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	80 93 8f 00 	sts	0x008F, r24
			ErrRetVal = OperationSuccess;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	15 c0       	rjmp	.+42     	; 0xd3a <LCD_Init+0x23e>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	13 c0       	rjmp	.+38     	; 0xd3a <LCD_Init+0x23e>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <LCD_Init+0x23e>
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <LCD_Init+0x23e>
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <LCD_Init+0x23e>
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	0b c0       	rjmp	.+22     	; 0xd3a <LCD_Init+0x23e>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <LCD_Init+0x23e>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <LCD_Init+0x23e>
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <LCD_Init+0x23e>
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <LCD_Init+0x23e>
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <LCD_Init+0x23e>
     d38:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	08 95       	ret

00000d4c <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	b9 f0       	breq	.+46     	; 0xd7e <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     d50:	20 91 f4 00 	lds	r18, 0x00F4
     d54:	82 0f       	add	r24, r18
     d56:	91 1d       	adc	r25, r1
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	88 23       	and	r24, r24
     d5e:	59 f0       	breq	.+22     	; 0xd76 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     d60:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     d64:	88 23       	and	r24, r24
     d66:	69 f4       	brne	.+26     	; 0xd82 <LCD_SendString+0x36>
			{
				Number++;
     d68:	80 91 f4 00 	lds	r24, 0x00F4
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 f4 00 	sts	0x00F4, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     d76:	10 92 f4 00 	sts	0x00F4, r1
			ErrRetVal = OperationSuccess;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     d82:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     d84:	08 95       	ret

00000d86 <LCD_SendNumber>:
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	2a 97       	sbiw	r28, 0x0a	; 10
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     d9a:	ae 01       	movw	r20, r28
     d9c:	4f 5f       	subi	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	0e 94 a6 0a 	call	0x154c	; 0x154c <STR_Number2String>
	while(FunRetVal != OperationSuccess)
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     dac:	88 23       	and	r24, r24
     dae:	d1 f7       	brne	.-12     	; 0xda4 <LCD_SendNumber+0x1e>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     db0:	2a 96       	adiw	r28, 0x0a	; 10
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     dc2:	80 91 f5 00 	lds	r24, 0x00F5
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	80 93 f6 00 	sts	0x00F6, r24
     dd0:	28 c0       	rjmp	.+80     	; 0xe22 <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     dd2:	88 23       	and	r24, r24
     dd4:	31 f5       	brne	.+76     	; 0xe22 <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     dd6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     dda:	80 91 98 00 	lds	r24, 0x0098
     dde:	60 91 99 00 	lds	r22, 0x0099
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     de8:	80 91 9a 00 	lds	r24, 0x009A
     dec:	60 91 9b 00 	lds	r22, 0x009B
     df0:	41 e0       	ldi	r20, 0x01	; 1
     df2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     df6:	80 91 9c 00 	lds	r24, 0x009C
     dfa:	60 91 9d 00 	lds	r22, 0x009D
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     e04:	80 91 9e 00 	lds	r24, 0x009E
     e08:	60 91 9f 00 	lds	r22, 0x009F
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 f5 00 	sts	0x00F5, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     e1e:	10 92 f6 00 	sts	0x00F6, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     e22:	80 91 f6 00 	lds	r24, 0x00F6
     e26:	08 95       	ret

00000e28 <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	c8 2f       	mov	r28, r24
     e2e:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     e30:	80 91 f5 00 	lds	r24, 0x00F5
     e34:	88 23       	and	r24, r24
     e36:	21 f4       	brne	.+8      	; 0xe40 <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     e38:	8e ef       	ldi	r24, 0xFE	; 254
     e3a:	80 93 f6 00 	sts	0x00F6, r24
     e3e:	66 c0       	rjmp	.+204    	; 0xf0c <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f0       	breq	.+2      	; 0xe46 <MOTOR_start+0x1e>
     e44:	63 c0       	rjmp	.+198    	; 0xf0c <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <PWM_Connect>
	switch (motor_no) {
     e52:	cc 23       	and	r28, r28
     e54:	21 f0       	breq	.+8      	; 0xe5e <MOTOR_start+0x36>
     e56:	c1 30       	cpi	r28, 0x01	; 1
     e58:	09 f0       	breq	.+2      	; 0xe5c <MOTOR_start+0x34>
     e5a:	55 c0       	rjmp	.+170    	; 0xf06 <MOTOR_start+0xde>
     e5c:	2a c0       	rjmp	.+84     	; 0xeb2 <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     e5e:	dd 23       	and	r29, r29
     e60:	99 f0       	breq	.+38     	; 0xe88 <MOTOR_start+0x60>
     e62:	d1 30       	cpi	r29, 0x01	; 1
     e64:	11 f5       	brne	.+68     	; 0xeaa <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     e66:	80 91 98 00 	lds	r24, 0x0098
     e6a:	60 91 99 00 	lds	r22, 0x0099
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     e74:	80 91 9a 00 	lds	r24, 0x009A
     e78:	60 91 9b 00 	lds	r22, 0x009B
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     e82:	10 92 f6 00 	sts	0x00F6, r1
			break;
     e86:	42 c0       	rjmp	.+132    	; 0xf0c <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     e88:	80 91 98 00 	lds	r24, 0x0098
     e8c:	60 91 99 00 	lds	r22, 0x0099
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     e96:	80 91 9a 00 	lds	r24, 0x009A
     e9a:	60 91 9b 00 	lds	r22, 0x009B
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     ea4:	10 92 f6 00 	sts	0x00F6, r1

			break;
     ea8:	31 c0       	rjmp	.+98     	; 0xf0c <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     eaa:	8d ef       	ldi	r24, 0xFD	; 253
     eac:	80 93 f6 00 	sts	0x00F6, r24
			break;
     eb0:	2d c0       	rjmp	.+90     	; 0xf0c <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     eb2:	dd 23       	and	r29, r29
     eb4:	99 f0       	breq	.+38     	; 0xedc <MOTOR_start+0xb4>
     eb6:	d1 30       	cpi	r29, 0x01	; 1
     eb8:	11 f5       	brne	.+68     	; 0xefe <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     eba:	80 91 9c 00 	lds	r24, 0x009C
     ebe:	60 91 9d 00 	lds	r22, 0x009D
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     ec8:	80 91 9e 00 	lds	r24, 0x009E
     ecc:	60 91 9f 00 	lds	r22, 0x009F
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     ed6:	10 92 f6 00 	sts	0x00F6, r1

			break;
     eda:	18 c0       	rjmp	.+48     	; 0xf0c <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     edc:	80 91 9c 00 	lds	r24, 0x009C
     ee0:	60 91 9d 00 	lds	r22, 0x009D
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     eea:	80 91 9e 00 	lds	r24, 0x009E
     eee:	60 91 9f 00 	lds	r22, 0x009F
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     ef8:	10 92 f6 00 	sts	0x00F6, r1

			break;
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     efe:	8d ef       	ldi	r24, 0xFD	; 253
     f00:	80 93 f6 00 	sts	0x00F6, r24
			break;
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     f06:	8c ef       	ldi	r24, 0xFC	; 252
     f08:	80 93 f6 00 	sts	0x00F6, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     f0c:	80 91 f6 00 	lds	r24, 0x00F6
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     f16:	cf 93       	push	r28
     f18:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     f1a:	80 91 f5 00 	lds	r24, 0x00F5
     f1e:	88 23       	and	r24, r24
     f20:	21 f4       	brne	.+8      	; 0xf2a <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     f22:	8e ef       	ldi	r24, 0xFE	; 254
     f24:	80 93 f6 00 	sts	0x00F6, r24
     f28:	2f c0       	rjmp	.+94     	; 0xf88 <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	69 f5       	brne	.+90     	; 0xf88 <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <PWM_Disconnect>
       switch (motor_no){
     f34:	cc 23       	and	r28, r28
     f36:	19 f0       	breq	.+6      	; 0xf3e <MOTOR_stop+0x28>
     f38:	c1 30       	cpi	r28, 0x01	; 1
     f3a:	19 f5       	brne	.+70     	; 0xf82 <MOTOR_stop+0x6c>
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     f3e:	80 91 98 00 	lds	r24, 0x0098
     f42:	60 91 99 00 	lds	r22, 0x0099
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     f4c:	80 91 9a 00 	lds	r24, 0x009A
     f50:	60 91 9b 00 	lds	r22, 0x009B
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     f5a:	10 92 f6 00 	sts	0x00F6, r1
            break;
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     f60:	80 91 9c 00 	lds	r24, 0x009C
     f64:	60 91 9d 00 	lds	r22, 0x009D
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     f6e:	80 91 9e 00 	lds	r24, 0x009E
     f72:	60 91 9f 00 	lds	r22, 0x009F
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     f7c:	10 92 f6 00 	sts	0x00F6, r1
            break;
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     f82:	8c ef       	ldi	r24, 0xFC	; 252
     f84:	80 93 f6 00 	sts	0x00F6, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     f88:	80 91 f6 00 	lds	r24, 0x00F6
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     f90:	90 91 f5 00 	lds	r25, 0x00F5
     f94:	99 23       	and	r25, r25
     f96:	21 f4       	brne	.+8      	; 0xfa0 <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     f98:	8e ef       	ldi	r24, 0xFE	; 254
     f9a:	80 93 f6 00 	sts	0x00F6, r24
     f9e:	60 c0       	rjmp	.+192    	; 0x1060 <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     fa0:	91 30       	cpi	r25, 0x01	; 1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <MOTOR_Update_dir+0x16>
     fa4:	5d c0       	rjmp	.+186    	; 0x1060 <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     fa6:	88 23       	and	r24, r24
     fa8:	21 f0       	breq	.+8      	; 0xfb2 <MOTOR_Update_dir+0x22>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	09 f0       	breq	.+2      	; 0xfb0 <MOTOR_Update_dir+0x20>
     fae:	55 c0       	rjmp	.+170    	; 0x105a <MOTOR_Update_dir+0xca>
     fb0:	2a c0       	rjmp	.+84     	; 0x1006 <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     fb2:	66 23       	and	r22, r22
     fb4:	99 f0       	breq	.+38     	; 0xfdc <MOTOR_Update_dir+0x4c>
     fb6:	61 30       	cpi	r22, 0x01	; 1
     fb8:	11 f5       	brne	.+68     	; 0xffe <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     fba:	80 91 98 00 	lds	r24, 0x0098
     fbe:	60 91 99 00 	lds	r22, 0x0099
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     fc8:	80 91 9a 00 	lds	r24, 0x009A
     fcc:	60 91 9b 00 	lds	r22, 0x009B
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     fd6:	10 92 f6 00 	sts	0x00F6, r1

                    break;
     fda:	42 c0       	rjmp	.+132    	; 0x1060 <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     fdc:	80 91 98 00 	lds	r24, 0x0098
     fe0:	60 91 99 00 	lds	r22, 0x0099
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     fea:	80 91 9a 00 	lds	r24, 0x009A
     fee:	60 91 9b 00 	lds	r22, 0x009B
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     ff8:	10 92 f6 00 	sts	0x00F6, r1

                    break;
     ffc:	31 c0       	rjmp	.+98     	; 0x1060 <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     ffe:	8d ef       	ldi	r24, 0xFD	; 253
    1000:	80 93 f6 00 	sts	0x00F6, r24
                    break;
    1004:	2d c0       	rjmp	.+90     	; 0x1060 <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
    1006:	66 23       	and	r22, r22
    1008:	99 f0       	breq	.+38     	; 0x1030 <MOTOR_Update_dir+0xa0>
    100a:	61 30       	cpi	r22, 0x01	; 1
    100c:	11 f5       	brne	.+68     	; 0x1052 <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
    100e:	80 91 9c 00 	lds	r24, 0x009C
    1012:	60 91 9d 00 	lds	r22, 0x009D
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
    101c:	80 91 9e 00 	lds	r24, 0x009E
    1020:	60 91 9f 00 	lds	r22, 0x009F
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
    102a:	10 92 f6 00 	sts	0x00F6, r1

                    break;
    102e:	18 c0       	rjmp	.+48     	; 0x1060 <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
    1030:	80 91 9c 00 	lds	r24, 0x009C
    1034:	60 91 9d 00 	lds	r22, 0x009D
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
    103e:	80 91 9e 00 	lds	r24, 0x009E
    1042:	60 91 9f 00 	lds	r22, 0x009F
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
    104c:	10 92 f6 00 	sts	0x00F6, r1

                    break;
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
    1052:	8d ef       	ldi	r24, 0xFD	; 253
    1054:	80 93 f6 00 	sts	0x00F6, r24
                    break;
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
    105a:	8c ef       	ldi	r24, 0xFC	; 252
    105c:	80 93 f6 00 	sts	0x00F6, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
    1060:	80 91 f6 00 	lds	r24, 0x00F6
    1064:	08 95       	ret

00001066 <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
    1066:	80 91 fb 00 	lds	r24, 0x00FB
    106a:	90 91 fc 00 	lds	r25, 0x00FC
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	90 93 fc 00 	sts	0x00FC, r25
    1074:	80 93 fb 00 	sts	0x00FB, r24
    1078:	08 95       	ret

0000107a <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
    108e:	80 91 07 01 	lds	r24, 0x0107
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	21 f0       	breq	.+8      	; 0x109e <USONIC_ICU1Callback+0x24>
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	09 f0       	breq	.+2      	; 0x109c <USONIC_ICU1Callback+0x22>
    109a:	77 c0       	rjmp	.+238    	; 0x118a <USONIC_ICU1Callback+0x110>
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <USONIC_ICU1Callback+0x3c>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
    109e:	10 92 fc 00 	sts	0x00FC, r1
    10a2:	10 92 fb 00 	sts	0x00FB, r1
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	80 93 07 01 	sts	0x0107, r24
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	0e 94 ed 0c 	call	0x19da	; 0x19da <ICU_Reset>
				break;
    10b4:	6a c0       	rjmp	.+212    	; 0x118a <USONIC_ICU1Callback+0x110>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	65 e0       	ldi	r22, 0x05	; 5
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
    10c0:	80 91 05 01 	lds	r24, 0x0105
    10c4:	90 91 06 01 	lds	r25, 0x0106
    10c8:	20 91 fb 00 	lds	r18, 0x00FB
    10cc:	30 91 fc 00 	lds	r19, 0x00FC
    10d0:	82 1b       	sub	r24, r18
    10d2:	93 0b       	sbc	r25, r19
    10d4:	80 93 fd 00 	sts	0x00FD, r24
    10d8:	90 93 fe 00 	sts	0x00FE, r25
    10dc:	10 92 ff 00 	sts	0x00FF, r1
    10e0:	10 92 00 01 	sts	0x0100, r1
    10e4:	10 92 01 01 	sts	0x0101, r1
    10e8:	10 92 02 01 	sts	0x0102, r1
    10ec:	10 92 03 01 	sts	0x0103, r1
    10f0:	10 92 04 01 	sts	0x0104, r1
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
    10f4:	20 91 fd 00 	lds	r18, 0x00FD
    10f8:	30 91 fe 00 	lds	r19, 0x00FE
    10fc:	40 91 ff 00 	lds	r20, 0x00FF
    1100:	50 91 00 01 	lds	r21, 0x0100
    1104:	60 91 01 01 	lds	r22, 0x0101
    1108:	70 91 02 01 	lds	r23, 0x0102
    110c:	80 91 03 01 	lds	r24, 0x0103
    1110:	90 91 04 01 	lds	r25, 0x0104
    1114:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__floatundisf>
    1118:	4b 01       	movw	r8, r22
    111a:	5c 01       	movw	r10, r24
    111c:	60 91 a8 00 	lds	r22, 0x00A8
    1120:	70 91 a9 00 	lds	r23, 0x00A9
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
    112c:	6b 01       	movw	r12, r22
    112e:	7c 01       	movw	r14, r24
    1130:	60 91 a0 00 	lds	r22, 0x00A0
    1134:	70 91 a1 00 	lds	r23, 0x00A1
    1138:	80 91 a2 00 	lds	r24, 0x00A2
    113c:	90 91 a3 00 	lds	r25, 0x00A3
    1140:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	c7 01       	movw	r24, r14
    114a:	b6 01       	movw	r22, r12
    114c:	0e 94 98 12 	call	0x2530	; 0x2530 <__divsf3>
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	c5 01       	movw	r24, r10
    1156:	b4 01       	movw	r22, r8
    1158:	0e 94 20 14 	call	0x2840	; 0x2840 <__mulsf3>
    115c:	46 2f       	mov	r20, r22
    115e:	57 2f       	mov	r21, r23
    1160:	68 2f       	mov	r22, r24
    1162:	79 2f       	mov	r23, r25
    1164:	40 93 f7 00 	sts	0x00F7, r20
    1168:	50 93 f8 00 	sts	0x00F8, r21
    116c:	60 93 f9 00 	sts	0x00F9, r22
    1170:	70 93 fa 00 	sts	0x00FA, r23
				gu8_ICU_State=END_STATE;
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	80 93 07 01 	sts	0x0107, r24
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	08 95       	ret

000011a0 <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    11a0:	80 91 08 01 	lds	r24, 0x0108
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <USONIC_Init+0x10>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	80 93 09 01 	sts	0x0109, r24
    11ae:	1f c0       	rjmp	.+62     	; 0x11ee <USONIC_Init+0x4e>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    11b0:	88 23       	and	r24, r24
    11b2:	e9 f4       	brne	.+58     	; 0x11ee <USONIC_Init+0x4e>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
    11b4:	80 91 a4 00 	lds	r24, 0x00A4
    11b8:	60 91 a5 00 	lds	r22, 0x00A5
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 c7 0c 	call	0x198e	; 0x198e <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	4d e3       	ldi	r20, 0x3D	; 61
    11ce:	58 e0       	ldi	r21, 0x08	; 8
    11d0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	43 e3       	ldi	r20, 0x33	; 51
    11da:	58 e0       	ldi	r21, 0x08	; 8
    11dc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
    11e0:	0e 94 bf 0c 	call	0x197e	; 0x197e <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 08 01 	sts	0x0108, r24
		gu8_ERROR_STATE=ERROR_OK;
    11ea:	10 92 09 01 	sts	0x0109, r1
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
    11ee:	80 91 09 01 	lds	r24, 0x0109
    11f2:	08 95       	ret

000011f4 <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ec 01       	movw	r28, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    11fa:	80 91 08 01 	lds	r24, 0x0108
    11fe:	88 23       	and	r24, r24
    1200:	21 f4       	brne	.+8      	; 0x120a <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
    1202:	8e ef       	ldi	r24, 0xFE	; 254
    1204:	80 93 09 01 	sts	0x0109, r24
    1208:	5b c0       	rjmp	.+182    	; 0x12c0 <USONIC_GetDistance+0xcc>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	09 f0       	breq	.+2      	; 0x1210 <USONIC_GetDistance+0x1c>
    120e:	58 c0       	rjmp	.+176    	; 0x12c0 <USONIC_GetDistance+0xcc>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
    1210:	20 97       	sbiw	r28, 0x00	; 0
    1212:	21 f4       	brne	.+8      	; 0x121c <USONIC_GetDistance+0x28>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
    1214:	8d ef       	ldi	r24, 0xFD	; 253
    1216:	80 93 09 01 	sts	0x0109, r24
    121a:	52 c0       	rjmp	.+164    	; 0x12c0 <USONIC_GetDistance+0xcc>
		} 
		else 
		{
			switch(gu8_ICU_State)
    121c:	80 91 07 01 	lds	r24, 0x0107
    1220:	88 23       	and	r24, r24
    1222:	21 f0       	breq	.+8      	; 0x122c <USONIC_GetDistance+0x38>
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	09 f0       	breq	.+2      	; 0x122a <USONIC_GetDistance+0x36>
    1228:	4b c0       	rjmp	.+150    	; 0x12c0 <USONIC_GetDistance+0xcc>
    122a:	2c c0       	rjmp	.+88     	; 0x1284 <USONIC_GetDistance+0x90>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 07 01 	sts	0x0107, r24
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
					
					gu16_OverflowCounter=COUNTER_RESET;
    123c:	10 92 fc 00 	sts	0x00FC, r1
    1240:	10 92 fb 00 	sts	0x00FB, r1
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	6e ef       	ldi	r22, 0xFE	; 254
    1248:	7f ef       	ldi	r23, 0xFF	; 255
    124a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
    1256:	80 91 fb 00 	lds	r24, 0x00FB
    125a:	90 91 fc 00 	lds	r25, 0x00FC
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	d1 f3       	breq	.-12     	; 0x1256 <USONIC_GetDistance+0x62>
						{
							
						}
					}*/
					
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	0e 94 ed 0c 	call	0x19da	; 0x19da <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 09 01 	sts	0x0109, r24
					break;
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <USONIC_GetDistance+0xcc>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
    1284:	60 91 f7 00 	lds	r22, 0x00F7
    1288:	70 91 f8 00 	lds	r23, 0x00F8
    128c:	80 91 f9 00 	lds	r24, 0x00F9
    1290:	90 91 fa 00 	lds	r25, 0x00FA
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	3c ef       	ldi	r19, 0xFC	; 252
    1298:	45 e0       	ldi	r20, 0x05	; 5
    129a:	57 e4       	ldi	r21, 0x47	; 71
    129c:	0e 94 20 14 	call	0x2840	; 0x2840 <__mulsf3>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 20 14 	call	0x2840	; 0x2840 <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	88 83       	st	Y, r24
    12b2:	99 83       	std	Y+1, r25	; 0x01
    12b4:	aa 83       	std	Y+2, r26	; 0x02
    12b6:	bb 83       	std	Y+3, r27	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
    12b8:	10 92 09 01 	sts	0x0109, r1
					gu8_ICU_State=START_STATE;
    12bc:	10 92 07 01 	sts	0x0107, r1
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
    12c0:	80 91 09 01 	lds	r24, 0x0109
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <dummy_delay+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <dummy_delay+0x8>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
    12d6:	1c 82       	std	Y+4, r1	; 0x04
    12d8:	1b 82       	std	Y+3, r1	; 0x03
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	84 36       	cpi	r24, 0x64	; 100
    12e0:	91 05       	cpc	r25, r1
    12e2:	f0 f4       	brcc	.+60     	; 0x1320 <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
    12e4:	1a 82       	std	Y+2, r1	; 0x02
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 32       	cpi	r24, 0x20	; 32
    12ea:	80 f4       	brcc	.+32     	; 0x130c <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	30 f4       	brcc	.+12     	; 0x1300 <dummy_delay+0x36>
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	d0 f3       	brcs	.-12     	; 0x12f4 <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 32       	cpi	r24, 0x20	; 32
    130a:	80 f3       	brcs	.-32     	; 0x12ec <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	84 36       	cpi	r24, 0x64	; 100
    131c:	91 05       	cpc	r25, r1
    131e:	10 f3       	brcs	.-60     	; 0x12e4 <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
    132e:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    1330:	8c 91       	ld	r24, X
    1332:	88 23       	and	r24, r24
    1334:	01 f1       	breq	.+64     	; 0x1376 <StringCompare+0x48>
    1336:	8d 30       	cpi	r24, 0x0D	; 13
    1338:	09 f1       	breq	.+66     	; 0x137c <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
    133a:	fb 01       	movw	r30, r22
    133c:	90 81       	ld	r25, Z
    133e:	89 17       	cp	r24, r25
    1340:	49 f4       	brne	.+18     	; 0x1354 <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	0b c0       	rjmp	.+22     	; 0x135c <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
    1346:	86 0f       	add	r24, r22
    1348:	97 1f       	adc	r25, r23
    134a:	fc 01       	movw	r30, r24
    134c:	80 81       	ld	r24, Z
    134e:	28 17       	cp	r18, r24
    1350:	29 f0       	breq	.+10     	; 0x135c <StringCompare+0x2e>
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    1354:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
    1356:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
    1358:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <StringCompare+0x56>
      }
      u8_counter++;
    135c:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    135e:	83 2f       	mov	r24, r19
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fd 01       	movw	r30, r26
    1364:	e8 0f       	add	r30, r24
    1366:	f9 1f       	adc	r31, r25
    1368:	20 81       	ld	r18, Z
    136a:	22 23       	and	r18, r18
    136c:	51 f0       	breq	.+20     	; 0x1382 <StringCompare+0x54>
    136e:	2d 30       	cpi	r18, 0x0D	; 13
    1370:	51 f7       	brne	.-44     	; 0x1346 <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	07 c0       	rjmp	.+14     	; 0x1384 <StringCompare+0x56>
    1376:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    137c:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    1382:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
    1384:	63 0f       	add	r22, r19
    1386:	71 1d       	adc	r23, r1
    1388:	fb 01       	movw	r30, r22
    138a:	90 81       	ld	r25, Z
    138c:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
    138e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
    1390:	08 95       	ret

00001392 <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    1392:	fb 01       	movw	r30, r22
	*StringLength = 0;
    1394:	11 82       	std	Z+1, r1	; 0x01
    1396:	10 82       	st	Z, r1
	while(*String!='\0')
    1398:	dc 01       	movw	r26, r24
    139a:	2c 91       	ld	r18, X
    139c:	22 23       	and	r18, r18
    139e:	49 f0       	breq	.+18     	; 0x13b2 <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
    13a0:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    13ac:	8d 91       	ld	r24, X+
    13ae:	88 23       	and	r24, r24
    13b0:	c1 f7       	brne	.-16     	; 0x13a2 <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret

000013b6 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
    13b6:	80 53       	subi	r24, 0x30	; 48
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	20 f4       	brcc	.+8      	; 0x13c4 <STR_CharIsNumeric+0xe>
	{
		*Result=1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	fb 01       	movw	r30, r22
    13c0:	80 83       	st	Z, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
    13c4:	fb 01       	movw	r30, r22
    13c6:	10 82       	st	Z, r1
	}
	return 0;
}
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret

000013cc <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	fc 01       	movw	r30, r24
    13e2:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	b9 f0       	breq	.+46     	; 0x141a <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
    13ec:	8f 01       	movw	r16, r30
    13ee:	0f 5f       	subi	r16, 0xFF	; 255
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
    13f2:	dd 24       	eor	r13, r13
    13f4:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    13f6:	be 01       	movw	r22, r28
    13f8:	6f 5f       	subi	r22, 0xFF	; 255
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <STR_CharIsNumeric>
		if(!FunRetVal)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 23       	and	r24, r24
    1404:	19 f4       	brne	.+6      	; 0x140c <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
    1406:	f7 01       	movw	r30, r14
    1408:	10 82       	st	Z, r1
			break;
    140a:	07 c0       	rjmp	.+14     	; 0x141a <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
    140c:	f7 01       	movw	r30, r14
    140e:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    1410:	f8 01       	movw	r30, r16
    1412:	81 91       	ld	r24, Z+
    1414:	8f 01       	movw	r16, r30
    1416:	88 23       	and	r24, r24
    1418:	71 f7       	brne	.-36     	; 0x13f6 <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0f 90       	pop	r0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	08 95       	ret

0000142e <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	fc 01       	movw	r30, r24
    1438:	ec 01       	movw	r28, r24
    143a:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
    143c:	db 01       	movw	r26, r22
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	8f 01       	movw	r16, r30
    1442:	0f 5f       	subi	r16, 0xFF	; 255
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	01 c0       	rjmp	.+2      	; 0x144c <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    144a:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
    144c:	29 91       	ld	r18, Y+
    144e:	fc 01       	movw	r30, r24
    1450:	31 91       	ld	r19, Z+
    1452:	cf 01       	movw	r24, r30
    1454:	23 17       	cp	r18, r19
    1456:	59 f4       	brne	.+22     	; 0x146e <STR_CompareString+0x40>
		{
			*Result = 1;
    1458:	fa 01       	movw	r30, r20
    145a:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
    145c:	f8 01       	movw	r30, r16
    145e:	21 91       	ld	r18, Z+
    1460:	8f 01       	movw	r16, r30
    1462:	22 23       	and	r18, r18
    1464:	91 f7       	brne	.-28     	; 0x144a <STR_CompareString+0x1c>
    1466:	2c 91       	ld	r18, X
    1468:	22 23       	and	r18, r18
    146a:	79 f7       	brne	.-34     	; 0x144a <STR_CompareString+0x1c>
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    146e:	22 23       	and	r18, r18
    1470:	31 f4       	brne	.+12     	; 0x147e <STR_CompareString+0x50>
    1472:	33 23       	and	r19, r19
    1474:	21 f4       	brne	.+8      	; 0x147e <STR_CompareString+0x50>
		{
			*Result = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	fa 01       	movw	r30, r20
    147a:	80 83       	st	Z, r24
			break;
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
    147e:	fa 01       	movw	r30, r20
    1480:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
    149c:	fb 01       	movw	r30, r22
    149e:	11 82       	std	Z+1, r1	; 0x01
    14a0:	10 82       	st	Z, r1
	while(*String!='\0')
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 81       	ld	r18, Z
    14a6:	22 23       	and	r18, r18
    14a8:	39 f0       	breq	.+14     	; 0x14b8 <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    14aa:	31 96       	adiw	r30, 0x01	; 1
    14ac:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
    14ae:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    14b0:	21 91       	ld	r18, Z+
    14b2:	22 23       	and	r18, r18
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <STR_String2Number+0x20>
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <STR_String2Number+0x2c>
    14b8:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    14ba:	7c 01       	movw	r14, r24
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
    14c4:	8a 91       	ld	r24, -Y
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	c0 97       	sbiw	r24, 0x30	; 48
    14ca:	84 9f       	mul	r24, r20
    14cc:	90 01       	movw	r18, r0
    14ce:	85 9f       	mul	r24, r21
    14d0:	30 0d       	add	r19, r0
    14d2:	94 9f       	mul	r25, r20
    14d4:	30 0d       	add	r19, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	f8 01       	movw	r30, r16
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	80 83       	st	Z, r24
		Multiplier*=10;
    14e6:	cb 01       	movw	r24, r22
    14e8:	ba 01       	movw	r22, r20
    14ea:	2a e0       	ldi	r18, 0x0A	; 10
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	0e 94 83 14 	call	0x2906	; 0x2906 <__mulsi3>
    14f6:	ab 01       	movw	r20, r22
    14f8:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
    14fa:	ce 15       	cp	r28, r14
    14fc:	df 05       	cpc	r29, r15
    14fe:	11 f7       	brne	.-60     	; 0x14c4 <STR_String2Number+0x36>
	return 0;
}
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	08 95       	ret

00001510 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    1510:	fc 01       	movw	r30, r24
    1512:	20 81       	ld	r18, Z
    1514:	22 23       	and	r18, r18
    1516:	39 f0       	breq	.+14     	; 0x1526 <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    1518:	dc 01       	movw	r26, r24
    151a:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
    151c:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    151e:	2d 91       	ld	r18, X+
    1520:	22 23       	and	r18, r18
    1522:	e1 f7       	brne	.-8      	; 0x151c <STR_StringReverse+0xc>
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
    1526:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
    1528:	9f 01       	movw	r18, r30
    152a:	21 50       	subi	r18, 0x01	; 1
    152c:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
    152e:	82 17       	cp	r24, r18
    1530:	93 07       	cpc	r25, r19
    1532:	50 f4       	brcc	.+20     	; 0x1548 <STR_StringReverse+0x38>
    1534:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
    1536:	8c 91       	ld	r24, X
		*A=*B;
    1538:	92 91       	ld	r25, -Z
    153a:	9d 93       	st	X+, r25
		*B=Temp;
    153c:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    153e:	cf 01       	movw	r24, r30
    1540:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    1542:	a8 17       	cp	r26, r24
    1544:	b9 07       	cpc	r27, r25
    1546:	b8 f3       	brcs	.-18     	; 0x1536 <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	08 95       	ret

0000154c <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	a1 05       	cpc	r26, r1
    1566:	b1 05       	cpc	r27, r1
    1568:	21 f4       	brne	.+8      	; 0x1572 <STR_Number2String+0x26>
	{
		*String='0';
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	fa 01       	movw	r30, r20
    156e:	80 83       	st	Z, r24
    1570:	1f c0       	rjmp	.+62     	; 0x15b0 <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
    1572:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1574:	0f 2e       	mov	r0, r31
    1576:	fa e0       	ldi	r31, 0x0A	; 10
    1578:	cf 2e       	mov	r12, r31
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	df 2e       	mov	r13, r31
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ef 2e       	mov	r14, r31
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	ff 2e       	mov	r15, r31
    1586:	f0 2d       	mov	r31, r0
    1588:	01 c0       	rjmp	.+2      	; 0x158c <STR_Number2String+0x40>
			String++;
    158a:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	a7 01       	movw	r20, r14
    1592:	96 01       	movw	r18, r12
    1594:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    1598:	60 5d       	subi	r22, 0xD0	; 208
    159a:	fe 01       	movw	r30, r28
    159c:	61 93       	st	Z+, r22
			String++;
			Number/=10;
    159e:	82 2f       	mov	r24, r18
    15a0:	93 2f       	mov	r25, r19
    15a2:	a4 2f       	mov	r26, r20
    15a4:	b5 2f       	mov	r27, r21
		}while(Number);
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	a1 05       	cpc	r26, r1
    15aa:	b1 05       	cpc	r27, r1
    15ac:	71 f7       	brne	.-36     	; 0x158a <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
    15ae:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
    15b0:	c8 01       	movw	r24, r16
    15b2:	0e 94 88 0a 	call	0x1510	; 0x1510 <STR_StringReverse>
	return 0;
}
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	08 95       	ret

000015ca <main>:

int main(void)
{  
   while(1)
   {
		SENSING_MainFunction();
    15ca:	0e 94 8f 02 	call	0x51e	; 0x51e <SENSING_MainFunction>
		CRASH_MainFunction();
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <CRASH_MainFunction>
		STEERING_MainFunction();
    15d2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <STEERING_MainFunction>
		MONITOR_MainFunction();
    15d6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <MONITOR_MainFunction>
    15da:	f7 cf       	rjmp	.-18     	; 0x15ca <main>

000015dc <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    15dc:	42 30       	cpi	r20, 0x02	; 2
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <DIO_SetPinDirection+0x6>
    15e0:	69 c0       	rjmp	.+210    	; 0x16b4 <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    15e2:	68 30       	cpi	r22, 0x08	; 8
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <DIO_SetPinDirection+0xc>
    15e6:	68 c0       	rjmp	.+208    	; 0x16b8 <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	f9 f0       	breq	.+62     	; 0x162a <DIO_SetPinDirection+0x4e>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	30 f0       	brcs	.+12     	; 0x15fc <DIO_SetPinDirection+0x20>
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	91 f1       	breq	.+100    	; 0x1658 <DIO_SetPinDirection+0x7c>
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	09 f0       	breq	.+2      	; 0x15fa <DIO_SetPinDirection+0x1e>
    15f8:	61 c0       	rjmp	.+194    	; 0x16bc <DIO_SetPinDirection+0xe0>
    15fa:	45 c0       	rjmp	.+138    	; 0x1686 <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	06 2e       	mov	r0, r22
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_SetPinDirection+0x2c>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_SetPinDirection+0x28>
    160c:	80 95       	com	r24
    160e:	9a b3       	in	r25, 0x1a	; 26
    1610:	89 23       	and	r24, r25
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	9a 01       	movw	r18, r20
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_SetPinDirection+0x40>
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	6a 95       	dec	r22
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_SetPinDirection+0x3c>
    1620:	b9 01       	movw	r22, r18
    1622:	68 2b       	or	r22, r24
    1624:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
    1626:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1628:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	06 2e       	mov	r0, r22
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_SetPinDirection+0x5a>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_SetPinDirection+0x56>
    163a:	80 95       	com	r24
    163c:	97 b3       	in	r25, 0x17	; 23
    163e:	89 23       	and	r24, r25
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	9a 01       	movw	r18, r20
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_SetPinDirection+0x6e>
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	6a 95       	dec	r22
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_SetPinDirection+0x6a>
    164e:	b9 01       	movw	r22, r18
    1650:	68 2b       	or	r22, r24
    1652:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
    1654:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1656:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	06 2e       	mov	r0, r22
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_SetPinDirection+0x88>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_SetPinDirection+0x84>
    1668:	80 95       	com	r24
    166a:	94 b3       	in	r25, 0x14	; 20
    166c:	89 23       	and	r24, r25
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	9a 01       	movw	r18, r20
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_SetPinDirection+0x9c>
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	6a 95       	dec	r22
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_SetPinDirection+0x98>
    167c:	b9 01       	movw	r22, r18
    167e:	68 2b       	or	r22, r24
    1680:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
    1682:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1684:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	06 2e       	mov	r0, r22
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_SetPinDirection+0xb6>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_SetPinDirection+0xb2>
    1696:	80 95       	com	r24
    1698:	91 b3       	in	r25, 0x11	; 17
    169a:	89 23       	and	r24, r25
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	9a 01       	movw	r18, r20
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_SetPinDirection+0xca>
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	6a 95       	dec	r22
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_SetPinDirection+0xc6>
    16aa:	b9 01       	movw	r22, r18
    16ac:	68 2b       	or	r22, r24
    16ae:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
    16b0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16b2:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    16be:	08 95       	ret

000016c0 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    16c0:	42 30       	cpi	r20, 0x02	; 2
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <DIO_WritePin+0x6>
    16c4:	69 c0       	rjmp	.+210    	; 0x1798 <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    16c6:	68 30       	cpi	r22, 0x08	; 8
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <DIO_WritePin+0xc>
    16ca:	68 c0       	rjmp	.+208    	; 0x179c <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	f9 f0       	breq	.+62     	; 0x170e <DIO_WritePin+0x4e>
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	30 f0       	brcs	.+12     	; 0x16e0 <DIO_WritePin+0x20>
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	91 f1       	breq	.+100    	; 0x173c <DIO_WritePin+0x7c>
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	09 f0       	breq	.+2      	; 0x16de <DIO_WritePin+0x1e>
    16dc:	61 c0       	rjmp	.+194    	; 0x17a0 <DIO_WritePin+0xe0>
    16de:	45 c0       	rjmp	.+138    	; 0x176a <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	06 2e       	mov	r0, r22
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_WritePin+0x2c>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_WritePin+0x28>
    16f0:	80 95       	com	r24
    16f2:	9b b3       	in	r25, 0x1b	; 27
    16f4:	89 23       	and	r24, r25
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	9a 01       	movw	r18, r20
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_WritePin+0x40>
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	6a 95       	dec	r22
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_WritePin+0x3c>
    1704:	b9 01       	movw	r22, r18
    1706:	68 2b       	or	r22, r24
    1708:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    170a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    170c:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	06 2e       	mov	r0, r22
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_WritePin+0x5a>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_WritePin+0x56>
    171e:	80 95       	com	r24
    1720:	98 b3       	in	r25, 0x18	; 24
    1722:	89 23       	and	r24, r25
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	9a 01       	movw	r18, r20
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_WritePin+0x6e>
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	6a 95       	dec	r22
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_WritePin+0x6a>
    1732:	b9 01       	movw	r22, r18
    1734:	68 2b       	or	r22, r24
    1736:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    1738:	80 e0       	ldi	r24, 0x00	; 0
				break;
    173a:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	06 2e       	mov	r0, r22
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_WritePin+0x88>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_WritePin+0x84>
    174c:	80 95       	com	r24
    174e:	95 b3       	in	r25, 0x15	; 21
    1750:	89 23       	and	r24, r25
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	9a 01       	movw	r18, r20
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_WritePin+0x9c>
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	6a 95       	dec	r22
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_WritePin+0x98>
    1760:	b9 01       	movw	r22, r18
    1762:	68 2b       	or	r22, r24
    1764:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1766:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1768:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	06 2e       	mov	r0, r22
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_WritePin+0xb6>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_WritePin+0xb2>
    177a:	80 95       	com	r24
    177c:	92 b3       	in	r25, 0x12	; 18
    177e:	89 23       	and	r24, r25
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	9a 01       	movw	r18, r20
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_WritePin+0xca>
    1786:	22 0f       	add	r18, r18
    1788:	33 1f       	adc	r19, r19
    178a:	6a 95       	dec	r22
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_WritePin+0xc6>
    178e:	b9 01       	movw	r22, r18
    1790:	68 2b       	or	r22, r24
    1792:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1794:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1796:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    17a2:	08 95       	ret

000017a4 <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    17a4:	68 30       	cpi	r22, 0x08	; 8
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <DIO_TogglePin+0x6>
    17a8:	42 c0       	rjmp	.+132    	; 0x182e <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	b1 f0       	breq	.+44     	; 0x17da <DIO_TogglePin+0x36>
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	30 f0       	brcs	.+12     	; 0x17be <DIO_TogglePin+0x1a>
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	01 f1       	breq	.+64     	; 0x17f6 <DIO_TogglePin+0x52>
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	09 f0       	breq	.+2      	; 0x17bc <DIO_TogglePin+0x18>
    17ba:	3b c0       	rjmp	.+118    	; 0x1832 <DIO_TogglePin+0x8e>
    17bc:	2a c0       	rjmp	.+84     	; 0x1812 <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 01       	movw	r18, r24
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_TogglePin+0x26>
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	6a 95       	dec	r22
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_TogglePin+0x22>
    17ce:	b9 01       	movw	r22, r18
    17d0:	8b b3       	in	r24, 0x1b	; 27
    17d2:	68 27       	eor	r22, r24
    17d4:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17d8:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9c 01       	movw	r18, r24
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_TogglePin+0x42>
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	6a 95       	dec	r22
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_TogglePin+0x3e>
    17ea:	b9 01       	movw	r22, r18
    17ec:	88 b3       	in	r24, 0x18	; 24
    17ee:	68 27       	eor	r22, r24
    17f0:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    17f2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17f4:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 01       	movw	r18, r24
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_TogglePin+0x5e>
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	6a 95       	dec	r22
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_TogglePin+0x5a>
    1806:	b9 01       	movw	r22, r18
    1808:	85 b3       	in	r24, 0x15	; 21
    180a:	68 27       	eor	r22, r24
    180c:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    180e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1810:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 01       	movw	r18, r24
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_TogglePin+0x7a>
    181a:	22 0f       	add	r18, r18
    181c:	33 1f       	adc	r19, r19
    181e:	6a 95       	dec	r22
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_TogglePin+0x76>
    1822:	b9 01       	movw	r22, r18
    1824:	82 b3       	in	r24, 0x12	; 18
    1826:	68 27       	eor	r22, r24
    1828:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    182a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    182c:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1832:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
    1834:	08 95       	ret

00001836 <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1836:	68 30       	cpi	r22, 0x08	; 8
    1838:	08 f0       	brcs	.+2      	; 0x183c <DIO_ReadPin+0x6>
    183a:	46 c0       	rjmp	.+140    	; 0x18c8 <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
    183c:	41 15       	cp	r20, r1
    183e:	51 05       	cpc	r21, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <DIO_ReadPin+0xe>
    1842:	44 c0       	rjmp	.+136    	; 0x18cc <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	b1 f0       	breq	.+44     	; 0x1874 <DIO_ReadPin+0x3e>
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	30 f0       	brcs	.+12     	; 0x1858 <DIO_ReadPin+0x22>
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	01 f1       	breq	.+64     	; 0x1890 <DIO_ReadPin+0x5a>
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	09 f0       	breq	.+2      	; 0x1856 <DIO_ReadPin+0x20>
    1854:	3d c0       	rjmp	.+122    	; 0x18d0 <DIO_ReadPin+0x9a>
    1856:	2a c0       	rjmp	.+84     	; 0x18ac <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
    1858:	89 b3       	in	r24, 0x19	; 25
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 01       	movw	r18, r24
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_ReadPin+0x2e>
    1860:	35 95       	asr	r19
    1862:	27 95       	ror	r18
    1864:	6a 95       	dec	r22
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_ReadPin+0x2a>
    1868:	b9 01       	movw	r22, r18
    186a:	61 70       	andi	r22, 0x01	; 1
    186c:	fa 01       	movw	r30, r20
    186e:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1870:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1872:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
    1874:	86 b3       	in	r24, 0x16	; 22
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 01       	movw	r18, r24
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_ReadPin+0x4a>
    187c:	35 95       	asr	r19
    187e:	27 95       	ror	r18
    1880:	6a 95       	dec	r22
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_ReadPin+0x46>
    1884:	b9 01       	movw	r22, r18
    1886:	61 70       	andi	r22, 0x01	; 1
    1888:	fa 01       	movw	r30, r20
    188a:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    188c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    188e:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
    1890:	83 b3       	in	r24, 0x13	; 19
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 01       	movw	r18, r24
    1896:	02 c0       	rjmp	.+4      	; 0x189c <DIO_ReadPin+0x66>
    1898:	35 95       	asr	r19
    189a:	27 95       	ror	r18
    189c:	6a 95       	dec	r22
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <DIO_ReadPin+0x62>
    18a0:	b9 01       	movw	r22, r18
    18a2:	61 70       	andi	r22, 0x01	; 1
    18a4:	fa 01       	movw	r30, r20
    18a6:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    18a8:	80 e0       	ldi	r24, 0x00	; 0
				break;
    18aa:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
    18ac:	80 b3       	in	r24, 0x10	; 16
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 01       	movw	r18, r24
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_ReadPin+0x82>
    18b4:	35 95       	asr	r19
    18b6:	27 95       	ror	r18
    18b8:	6a 95       	dec	r22
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_ReadPin+0x7e>
    18bc:	b9 01       	movw	r22, r18
    18be:	61 70       	andi	r22, 0x01	; 1
    18c0:	fa 01       	movw	r30, r20
    18c2:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
				break;
    18c6:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    18d2:	08 95       	ret

000018d4 <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    18d4:	68 30       	cpi	r22, 0x08	; 8
    18d6:	08 f0       	brcs	.+2      	; 0x18da <DIO_EnablePinPullup+0x6>
    18d8:	4e c0       	rjmp	.+156    	; 0x1976 <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	c9 f0       	breq	.+50     	; 0x1910 <DIO_EnablePinPullup+0x3c>
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	30 f0       	brcs	.+12     	; 0x18ee <DIO_EnablePinPullup+0x1a>
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	31 f1       	breq	.+76     	; 0x1932 <DIO_EnablePinPullup+0x5e>
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	09 f0       	breq	.+2      	; 0x18ec <DIO_EnablePinPullup+0x18>
    18ea:	47 c0       	rjmp	.+142    	; 0x197a <DIO_EnablePinPullup+0xa6>
    18ec:	33 c0       	rjmp	.+102    	; 0x1954 <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c 01       	movw	r18, r24
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_EnablePinPullup+0x26>
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	6a 95       	dec	r22
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_EnablePinPullup+0x22>
    18fe:	b9 01       	movw	r22, r18
    1900:	92 2f       	mov	r25, r18
    1902:	90 95       	com	r25
    1904:	8b b3       	in	r24, 0x1b	; 27
    1906:	89 23       	and	r24, r25
    1908:	68 2b       	or	r22, r24
    190a:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    190c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    190e:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_EnablePinPullup+0x48>
    1918:	22 0f       	add	r18, r18
    191a:	33 1f       	adc	r19, r19
    191c:	6a 95       	dec	r22
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_EnablePinPullup+0x44>
    1920:	b9 01       	movw	r22, r18
    1922:	92 2f       	mov	r25, r18
    1924:	90 95       	com	r25
    1926:	88 b3       	in	r24, 0x18	; 24
    1928:	89 23       	and	r24, r25
    192a:	68 2b       	or	r22, r24
    192c:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    192e:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    1930:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_EnablePinPullup+0x6a>
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	6a 95       	dec	r22
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_EnablePinPullup+0x66>
    1942:	b9 01       	movw	r22, r18
    1944:	92 2f       	mov	r25, r18
    1946:	90 95       	com	r25
    1948:	85 b3       	in	r24, 0x15	; 21
    194a:	89 23       	and	r24, r25
    194c:	68 2b       	or	r22, r24
    194e:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1950:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    1952:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 01       	movw	r18, r24
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_EnablePinPullup+0x8c>
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	6a 95       	dec	r22
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_EnablePinPullup+0x88>
    1964:	b9 01       	movw	r22, r18
    1966:	92 2f       	mov	r25, r18
    1968:	90 95       	com	r25
    196a:	82 b3       	in	r24, 0x12	; 18
    196c:	89 23       	and	r24, r25
    196e:	68 2b       	or	r22, r24
    1970:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1972:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1974:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    197c:	08 95       	ret

0000197e <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
    197e:	8f b7       	in	r24, 0x3f	; 63
    1980:	80 68       	ori	r24, 0x80	; 128
    1982:	8f bf       	out	0x3f, r24	; 63
}
    1984:	08 95       	ret

00001986 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   CLEAR_BIT(SREG, I);
    1986:	8f b7       	in	r24, 0x3f	; 63
    1988:	8f 77       	andi	r24, 0x7F	; 127
    198a:	8f bf       	out	0x3f, r24	; 63
    198c:	08 95       	ret

0000198e <ICU_Init>:

//APIs Implementation
ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    198e:	88 23       	and	r24, r24
    1990:	11 f5       	brne	.+68     	; 0x19d6 <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    199c:	80 91 a6 00 	lds	r24, 0x00A6
    19a0:	28 2f       	mov	r18, r24
    19a2:	23 70       	andi	r18, 0x03	; 3
    19a4:	9f b5       	in	r25, 0x2f	; 47
    19a6:	9c 7f       	andi	r25, 0xFC	; 252
    19a8:	92 2b       	or	r25, r18
    19aa:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    19ac:	86 95       	lsr	r24
    19ae:	86 95       	lsr	r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	83 70       	andi	r24, 0x03	; 3
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	9e b5       	in	r25, 0x2e	; 46
    19c4:	97 7e       	andi	r25, 0xE7	; 231
    19c6:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    19c8:	88 7f       	andi	r24, 0xF8	; 248
    19ca:	90 91 a7 00 	lds	r25, 0x00A7
    19ce:	89 2b       	or	r24, r25
    19d0:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    19d4:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    19d8:	08 95       	ret

000019da <ICU_Reset>:

ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    19da:	62 30       	cpi	r22, 0x02	; 2
    19dc:	70 f4       	brcc	.+28     	; 0x19fa <ICU_Reset+0x20>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    19de:	88 23       	and	r24, r24
    19e0:	71 f4       	brne	.+28     	; 0x19fe <ICU_Reset+0x24>
		{
			#if  ICU1
			case ICU_1:
			REG_WRITE(TCNT1,CLEAR_REGISTER);
    19e2:	1d bc       	out	0x2d, r1	; 45
    19e4:	1c bc       	out	0x2c, r1	; 44
			BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    19e6:	62 95       	swap	r22
    19e8:	66 0f       	add	r22, r22
    19ea:	66 0f       	add	r22, r22
    19ec:	60 7c       	andi	r22, 0xC0	; 192
    19ee:	8e b5       	in	r24, 0x2e	; 46
    19f0:	8f 7b       	andi	r24, 0xBF	; 191
    19f2:	68 2b       	or	r22, r24
    19f4:	6e bd       	out	0x2e, r22	; 46
			//BIT_WRITE(TIFR,TOV1,BIT_HIGH);
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    19f8:	08 95       	ret
ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	08 95       	ret
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
			break;
			#endif
			default:
			u8_ErrorState = ERROR_NOK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return u8_ErrorState;
}
    1a00:	08 95       	ret

00001a02 <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	8b 01       	movw	r16, r22
    1a18:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    1a1a:	61 15       	cp	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <ICU_UpdateTimeOn+0x20>
    1a20:	9c c0       	rjmp	.+312    	; 0x1b5a <ICU_UpdateTimeOn+0x158>
    1a22:	41 15       	cp	r20, r1
    1a24:	51 05       	cpc	r21, r1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <ICU_UpdateTimeOn+0x28>
    1a28:	9a c0       	rjmp	.+308    	; 0x1b5e <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <ICU_UpdateTimeOn+0x2e>
    1a2e:	99 c0       	rjmp	.+306    	; 0x1b62 <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    1a30:	fb 01       	movw	r30, r22
    1a32:	80 81       	ld	r24, Z
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 f0       	breq	.+36     	; 0x1a5c <ICU_UpdateTimeOn+0x5a>
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <ICU_UpdateTimeOn+0x42>
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <ICU_UpdateTimeOn+0x40>
    1a40:	92 c0       	rjmp	.+292    	; 0x1b66 <ICU_UpdateTimeOn+0x164>
    1a42:	26 c0       	rjmp	.+76     	; 0x1a90 <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	0e 94 ed 0c 	call	0x19da	; 0x19da <ICU_Reset>
    1a4c:	88 23       	and	r24, r24
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <ICU_UpdateTimeOn+0x50>
    1a50:	8c c0       	rjmp	.+280    	; 0x1b6a <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	f8 01       	movw	r30, r16
    1a56:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	8e c0       	rjmp	.+284    	; 0x1b78 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1a5c:	88 b7       	in	r24, 0x38	; 56
    1a5e:	82 95       	swap	r24
    1a60:	86 95       	lsr	r24
    1a62:	87 70       	andi	r24, 0x07	; 7
    1a64:	80 ff       	sbrs	r24, 0
    1a66:	83 c0       	rjmp	.+262    	; 0x1b6e <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	0e 94 ed 0c 	call	0x19da	; 0x19da <ICU_Reset>
    1a70:	88 23       	and	r24, r24
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <ICU_UpdateTimeOn+0x74>
    1a74:	7e c0       	rjmp	.+252    	; 0x1b72 <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    1a76:	10 92 0a 01 	sts	0x010A, r1
    1a7a:	10 92 0b 01 	sts	0x010B, r1
    1a7e:	10 92 0c 01 	sts	0x010C, r1
    1a82:	10 92 0d 01 	sts	0x010D, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	74 c0       	rjmp	.+232    	; 0x1b78 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1a90:	88 b7       	in	r24, 0x38	; 56
    1a92:	86 95       	lsr	r24
    1a94:	86 95       	lsr	r24
    1a96:	80 ff       	sbrs	r24, 0
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    1a9a:	80 91 0a 01 	lds	r24, 0x010A
    1a9e:	90 91 0b 01 	lds	r25, 0x010B
    1aa2:	a0 91 0c 01 	lds	r26, 0x010C
    1aa6:	b0 91 0d 01 	lds	r27, 0x010D
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	a1 1d       	adc	r26, r1
    1aae:	b1 1d       	adc	r27, r1
    1ab0:	80 93 0a 01 	sts	0x010A, r24
    1ab4:	90 93 0b 01 	sts	0x010B, r25
    1ab8:	a0 93 0c 01 	sts	0x010C, r26
    1abc:	b0 93 0d 01 	sts	0x010D, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1ac0:	88 b7       	in	r24, 0x38	; 56
    1ac2:	84 60       	ori	r24, 0x04	; 4
    1ac4:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1ac6:	88 b7       	in	r24, 0x38	; 56
    1ac8:	82 95       	swap	r24
    1aca:	86 95       	lsr	r24
    1acc:	87 70       	andi	r24, 0x07	; 7
    1ace:	80 ff       	sbrs	r24, 0
    1ad0:	52 c0       	rjmp	.+164    	; 0x1b76 <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1ad2:	60 91 0a 01 	lds	r22, 0x010A
    1ad6:	70 91 0b 01 	lds	r23, 0x010B
    1ada:	80 91 0c 01 	lds	r24, 0x010C
    1ade:	90 91 0d 01 	lds	r25, 0x010D
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	0e 94 83 14 	call	0x2906	; 0x2906 <__mulsi3>
    1aee:	ab 01       	movw	r20, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	86 b5       	in	r24, 0x26	; 38
    1af4:	97 b5       	in	r25, 0x27	; 39
    1af6:	a0 e0       	ldi	r26, 0x00	; 0
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	84 0f       	add	r24, r20
    1afc:	95 1f       	adc	r25, r21
    1afe:	a6 1f       	adc	r26, r22
    1b00:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double64_t)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    1b02:	28 2f       	mov	r18, r24
    1b04:	39 2f       	mov	r19, r25
    1b06:	4a 2f       	mov	r20, r26
    1b08:	5b 2f       	mov	r21, r27
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__floatundisf>
    1b16:	4b 01       	movw	r8, r22
    1b18:	5c 01       	movw	r10, r24
    1b1a:	60 91 a8 00 	lds	r22, 0x00A8
    1b1e:	70 91 a9 00 	lds	r23, 0x00A9
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	34 e2       	ldi	r19, 0x24	; 36
    1b2e:	44 e7       	ldi	r20, 0x74	; 116
    1b30:	5b e4       	ldi	r21, 0x4B	; 75
    1b32:	0e 94 98 12 	call	0x2530	; 0x2530 <__divsf3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	c5 01       	movw	r24, r10
    1b3c:	b4 01       	movw	r22, r8
    1b3e:	0e 94 20 14 	call	0x2840	; 0x2840 <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f7 01       	movw	r30, r14
    1b48:	80 83       	st	Z, r24
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	a2 83       	std	Z+2, r26	; 0x02
    1b4e:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	0d c0       	rjmp	.+26     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	0b c0       	rjmp	.+22     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1b76:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
}
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	bf 90       	pop	r11
    1b86:	af 90       	pop	r10
    1b88:	9f 90       	pop	r9
    1b8a:	8f 90       	pop	r8
    1b8c:	08 95       	ret

00001b8e <ICU_GetICR1Registert>:

ERROR_STATE_t ICU_GetICR1Registert(uint8_t ICUNumber,ptr_uint16_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b8e:	88 23       	and	r24, r24
    1b90:	39 f4       	brne	.+14     	; 0x1ba0 <ICU_GetICR1Registert+0x12>
	{
		#if  ICU1
			case ICU_1:
				*Register=ICR1;
    1b92:	86 b5       	in	r24, 0x26	; 38
    1b94:	97 b5       	in	r25, 0x27	; 39
    1b96:	fb 01       	movw	r30, r22
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1b9e:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1ba2:	08 95       	ret

00001ba4 <ICU_GetTIFRRegistert>:

ERROR_STATE_t ICU_GetTIFRRegistert(uint8_t ICUNumber,ptr_uint8_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1ba4:	88 23       	and	r24, r24
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <ICU_GetTIFRRegistert+0xe>
	{
		#if  ICU1
			case ICU_1:
				*Register=TIFR;
    1ba8:	88 b7       	in	r24, 0x38	; 56
    1baa:	fb 01       	movw	r30, r22
    1bac:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1bb0:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1bb4:	08 95       	ret

00001bb6 <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bb6:	88 23       	and	r24, r24
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
    1bba:	7d bd       	out	0x2d, r23	; 45
    1bbc:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
    1bbe:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
    1bc2:	08 95       	ret

00001bc4 <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bc4:	88 23       	and	r24, r24
    1bc6:	79 f4       	brne	.+30     	; 0x1be6 <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1bc8:	66 23       	and	r22, r22
    1bca:	19 f0       	breq	.+6      	; 0x1bd2 <ICU_EnableInterrupt+0xe>
    1bcc:	61 30       	cpi	r22, 0x01	; 1
    1bce:	69 f4       	brne	.+26     	; 0x1bea <ICU_EnableInterrupt+0x26>
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <ICU_EnableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
    1bd2:	89 b7       	in	r24, 0x39	; 57
    1bd4:	84 60       	ori	r24, 0x04	; 4
    1bd6:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1bda:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
    1bdc:	89 b7       	in	r24, 0x39	; 57
    1bde:	80 62       	ori	r24, 0x20	; 32
    1be0:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1be2:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1be4:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1bec:	08 95       	ret

00001bee <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bee:	88 23       	and	r24, r24
    1bf0:	79 f4       	brne	.+30     	; 0x1c10 <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1bf2:	66 23       	and	r22, r22
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <ICU_DisableInterrupt+0xe>
    1bf6:	61 30       	cpi	r22, 0x01	; 1
    1bf8:	69 f4       	brne	.+26     	; 0x1c14 <ICU_DisableInterrupt+0x26>
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <ICU_DisableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
    1bfc:	89 b7       	in	r24, 0x39	; 57
    1bfe:	8b 7f       	andi	r24, 0xFB	; 251
    1c00:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1c02:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1c04:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
    1c06:	89 b7       	in	r24, 0x39	; 57
    1c08:	8f 7d       	andi	r24, 0xDF	; 223
    1c0a:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1c0e:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1c16:	08 95       	ret

00001c18 <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
    1c18:	41 15       	cp	r20, r1
    1c1a:	51 05       	cpc	r21, r1
    1c1c:	99 f0       	breq	.+38     	; 0x1c44 <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1c1e:	88 23       	and	r24, r24
    1c20:	99 f4       	brne	.+38     	; 0x1c48 <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
    1c22:	66 23       	and	r22, r22
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <ICU_SetCallback+0x14>
    1c26:	61 30       	cpi	r22, 0x01	; 1
    1c28:	89 f4       	brne	.+34     	; 0x1c4c <ICU_SetCallback+0x34>
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <ICU_SetCallback+0x20>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
    1c2c:	50 93 0f 01 	sts	0x010F, r21
    1c30:	40 93 0e 01 	sts	0x010E, r20
							u8_ErrorState=ERROR_OK;
    1c34:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1c36:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
    1c38:	50 93 11 01 	sts	0x0111, r21
    1c3c:	40 93 10 01 	sts	0x0110, r20
							u8_ErrorState=ERROR_OK;
    1c40:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1c42:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
    1c4e:	08 95       	ret

00001c50 <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
    1c50:	1f 92       	push	r1
    1c52:	0f 92       	push	r0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	0f 92       	push	r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
   gptr_CallbackOverflow();
    1c72:	e0 91 0e 01 	lds	r30, 0x010E
    1c76:	f0 91 0f 01 	lds	r31, 0x010F
    1c7a:	09 95       	icall
}
    1c7c:	ff 91       	pop	r31
    1c7e:	ef 91       	pop	r30
    1c80:	bf 91       	pop	r27
    1c82:	af 91       	pop	r26
    1c84:	9f 91       	pop	r25
    1c86:	8f 91       	pop	r24
    1c88:	7f 91       	pop	r23
    1c8a:	6f 91       	pop	r22
    1c8c:	5f 91       	pop	r21
    1c8e:	4f 91       	pop	r20
    1c90:	3f 91       	pop	r19
    1c92:	2f 91       	pop	r18
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	af 93       	push	r26
    1cba:	bf 93       	push	r27
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
   gptr_CallbackInputCapture();
    1cc0:	e0 91 10 01 	lds	r30, 0x0110
    1cc4:	f0 91 11 01 	lds	r31, 0x0111
    1cc8:	09 95       	icall
}
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	0f 90       	pop	r0
    1ce8:	1f 90       	pop	r1
    1cea:	18 95       	reti

00001cec <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1cec:	88 23       	and	r24, r24
    1cee:	69 f5       	brne	.+90     	; 0x1d4a <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    1cf0:	20 91 ab 00 	lds	r18, 0x00AB
    1cf4:	42 2f       	mov	r20, r18
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	41 70       	andi	r20, 0x01	; 1
    1cfa:	50 70       	andi	r21, 0x00	; 0
    1cfc:	00 24       	eor	r0, r0
    1cfe:	56 95       	lsr	r21
    1d00:	47 95       	ror	r20
    1d02:	07 94       	ror	r0
    1d04:	56 95       	lsr	r21
    1d06:	47 95       	ror	r20
    1d08:	07 94       	ror	r0
    1d0a:	54 2f       	mov	r21, r20
    1d0c:	40 2d       	mov	r20, r0
    1d0e:	83 b7       	in	r24, 0x33	; 51
    1d10:	8f 7b       	andi	r24, 0xBF	; 191
    1d12:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    1d14:	47 7f       	andi	r20, 0xF7	; 247
    1d16:	26 95       	lsr	r18
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	21 70       	andi	r18, 0x01	; 1
    1d1c:	30 70       	andi	r19, 0x00	; 0
    1d1e:	c9 01       	movw	r24, r18
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1d2e:	8f 7c       	andi	r24, 0xCF	; 207
    1d30:	90 91 ac 00 	lds	r25, 0x00AC
    1d34:	92 95       	swap	r25
    1d36:	90 7f       	andi	r25, 0xF0	; 240
    1d38:	89 2b       	or	r24, r25
    1d3a:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	63 e0       	ldi	r22, 0x03	; 3
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    1d46:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d48:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d4c:	08 95       	ret

00001d4e <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d4e:	88 23       	and	r24, r24
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1d52:	83 b7       	in	r24, 0x33	; 51
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	90 91 aa 00 	lds	r25, 0x00AA
    1d5a:	89 2b       	or	r24, r25
    1d5c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d60:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d64:	08 95       	ret

00001d66 <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d66:	88 23       	and	r24, r24
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    1d6a:	83 b7       	in	r24, 0x33	; 51
    1d6c:	88 7f       	andi	r24, 0xF8	; 248
    1d6e:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1d70:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d72:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1d74:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d76:	08 95       	ret

00001d78 <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d78:	88 23       	and	r24, r24
    1d7a:	51 f4       	brne	.+20     	; 0x1d90 <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1d7c:	90 91 ac 00 	lds	r25, 0x00AC
    1d80:	92 95       	swap	r25
    1d82:	90 7f       	andi	r25, 0xF0	; 240
    1d84:	83 b7       	in	r24, 0x33	; 51
    1d86:	8f 7c       	andi	r24, 0xCF	; 207
    1d88:	89 2b       	or	r24, r25
    1d8a:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d8e:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    1d92:	08 95       	ret

00001d94 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d94:	88 23       	and	r24, r24
    1d96:	29 f4       	brne	.+10     	; 0x1da2 <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    1d98:	83 b7       	in	r24, 0x33	; 51
    1d9a:	8f 7c       	andi	r24, 0xCF	; 207
    1d9c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1da0:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1da4:	08 95       	ret

00001da6 <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    1da6:	96 2f       	mov	r25, r22
    1da8:	91 50       	subi	r25, 0x01	; 1
    1daa:	94 36       	cpi	r25, 0x64	; 100
    1dac:	10 f5       	brcc	.+68     	; 0x1df2 <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    1dae:	88 23       	and	r24, r24
    1db0:	11 f5       	brne	.+68     	; 0x1df6 <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    1db2:	80 91 ac 00 	lds	r24, 0x00AC
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	01 f5       	brne	.+64     	; 0x1dfa <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 2e 13 	call	0x265c	; 0x265c <__floatsisf>
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	48 ec       	ldi	r20, 0xC8	; 200
    1dca:	52 e4       	ldi	r21, 0x42	; 66
    1dcc:	0e 94 98 12 	call	0x2530	; 0x2530 <__divsf3>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	53 e4       	ldi	r21, 0x43	; 67
    1dd8:	0e 94 20 14 	call	0x2840	; 0x2840 <__mulsf3>
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 2f 12 	call	0x245e	; 0x245e <__subsf3>
    1de8:	0e 94 00 13 	call	0x2600	; 0x2600 <__fixunssfsi>
    1dec:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1df0:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    1dfc:	08 95       	ret

00001dfe <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <GetFreqPrescaleRatio+0x6>
    1e02:	51 c0       	rjmp	.+162    	; 0x1ea6 <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	8e 0f       	add	r24, r30
    1e0e:	9f 1f       	adc	r25, r31
    1e10:	fc 01       	movw	r30, r24
    1e12:	ea 54       	subi	r30, 0x4A	; 74
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	21 f1       	breq	.+72     	; 0x1e64 <GetFreqPrescaleRatio+0x66>
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	30 f4       	brcc	.+12     	; 0x1e2c <GetFreqPrescaleRatio+0x2e>
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	51 f0       	breq	.+20     	; 0x1e38 <GetFreqPrescaleRatio+0x3a>
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <GetFreqPrescaleRatio+0x2c>
    1e28:	a4 c0       	rjmp	.+328    	; 0x1f72 <GetFreqPrescaleRatio+0x174>
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <GetFreqPrescaleRatio+0x50>
    1e2c:	84 30       	cpi	r24, 0x04	; 4
    1e2e:	29 f1       	breq	.+74     	; 0x1e7a <GetFreqPrescaleRatio+0x7c>
    1e30:	85 30       	cpi	r24, 0x05	; 5
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <GetFreqPrescaleRatio+0x38>
    1e34:	9e c0       	rjmp	.+316    	; 0x1f72 <GetFreqPrescaleRatio+0x174>
    1e36:	2c c0       	rjmp	.+88     	; 0x1e90 <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e8       	ldi	r26, 0x80	; 128
    1e3e:	bd e3       	ldi	r27, 0x3D	; 61
    1e40:	fb 01       	movw	r30, r22
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e4c:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e0       	ldi	r26, 0x00	; 0
    1e54:	bf e3       	ldi	r27, 0x3F	; 63
    1e56:	fb 01       	movw	r30, r22
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e60:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e62:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	b0 e4       	ldi	r27, 0x40	; 64
    1e6c:	fb 01       	movw	r30, r22
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e78:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	b1 e4       	ldi	r27, 0x41	; 65
    1e82:	fb 01       	movw	r30, r22
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	a2 83       	std	Z+2, r26	; 0x02
    1e8a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e8e:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	b2 e4       	ldi	r27, 0x42	; 66
    1e98:	fb 01       	movw	r30, r22
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1ea4:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <GetFreqPrescaleRatio+0xae>
    1eaa:	65 c0       	rjmp	.+202    	; 0x1f76 <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1eac:	80 91 be 00 	lds	r24, 0x00BE
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	99 f1       	breq	.+102    	; 0x1f1a <GetFreqPrescaleRatio+0x11c>
    1eb4:	85 30       	cpi	r24, 0x05	; 5
    1eb6:	40 f4       	brcc	.+16     	; 0x1ec8 <GetFreqPrescaleRatio+0xca>
    1eb8:	82 30       	cpi	r24, 0x02	; 2
    1eba:	c9 f0       	breq	.+50     	; 0x1eee <GetFreqPrescaleRatio+0xf0>
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	10 f5       	brcc	.+68     	; 0x1f04 <GetFreqPrescaleRatio+0x106>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <GetFreqPrescaleRatio+0xc8>
    1ec4:	5a c0       	rjmp	.+180    	; 0x1f7a <GetFreqPrescaleRatio+0x17c>
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <GetFreqPrescaleRatio+0xda>
    1ec8:	86 30       	cpi	r24, 0x06	; 6
    1eca:	e9 f1       	breq	.+122    	; 0x1f46 <GetFreqPrescaleRatio+0x148>
    1ecc:	86 30       	cpi	r24, 0x06	; 6
    1ece:	80 f1       	brcs	.+96     	; 0x1f30 <GetFreqPrescaleRatio+0x132>
    1ed0:	87 30       	cpi	r24, 0x07	; 7
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <GetFreqPrescaleRatio+0xd8>
    1ed4:	52 c0       	rjmp	.+164    	; 0x1f7a <GetFreqPrescaleRatio+0x17c>
    1ed6:	42 c0       	rjmp	.+132    	; 0x1f5c <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e8       	ldi	r26, 0x80	; 128
    1ede:	bd e3       	ldi	r27, 0x3D	; 61
    1ee0:	fb 01       	movw	r30, r22
    1ee2:	80 83       	st	Z, r24
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	a2 83       	std	Z+2, r26	; 0x02
    1ee8:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1eea:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1eec:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e0       	ldi	r26, 0x00	; 0
    1ef4:	bf e3       	ldi	r27, 0x3F	; 63
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	80 83       	st	Z, r24
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	a2 83       	std	Z+2, r26	; 0x02
    1efe:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f02:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e4       	ldi	r27, 0x40	; 64
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f16:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f18:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	b0 e4       	ldi	r27, 0x40	; 64
    1f22:	fb 01       	movw	r30, r22
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f2e:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e0       	ldi	r26, 0x00	; 0
    1f36:	b1 e4       	ldi	r27, 0x41	; 65
    1f38:	fb 01       	movw	r30, r22
    1f3a:	80 83       	st	Z, r24
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	a2 83       	std	Z+2, r26	; 0x02
    1f40:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f42:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f44:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e8       	ldi	r26, 0x80	; 128
    1f4c:	b1 e4       	ldi	r27, 0x41	; 65
    1f4e:	fb 01       	movw	r30, r22
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f58:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f5a:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	b2 e4       	ldi	r27, 0x42	; 66
    1f64:	fb 01       	movw	r30, r22
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	a2 83       	std	Z+2, r26	; 0x02
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f70:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1f72:	8c ef       	ldi	r24, 0xFC	; 252
    1f74:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1f7a:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    1f7c:	08 95       	ret

00001f7e <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	81 f0       	breq	.+32     	; 0x1fa2 <TIM_Init+0x24>
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	18 f0       	brcs	.+6      	; 0x1f8c <TIM_Init+0xe>
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	49 f5       	brne	.+82     	; 0x1fdc <TIM_Init+0x5e>
    1f8a:	19 c0       	rjmp	.+50     	; 0x1fbe <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    1f8c:	80 91 b6 00 	lds	r24, 0x00B6
    1f90:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    1f92:	89 b7       	in	r24, 0x39	; 57
    1f94:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    1f96:	90 91 b7 00 	lds	r25, 0x00B7
    1f9a:	89 2b       	or	r24, r25
    1f9c:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    1fa0:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    1fa2:	80 91 b9 00 	lds	r24, 0x00B9
    1fa6:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    1fa8:	99 b7       	in	r25, 0x39	; 57
    1faa:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    1fac:	80 91 ba 00 	lds	r24, 0x00BA
    1fb0:	88 0f       	add	r24, r24
    1fb2:	88 0f       	add	r24, r24
    1fb4:	88 0f       	add	r24, r24
    1fb6:	89 2b       	or	r24, r25
    1fb8:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    1fbc:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    1fbe:	80 91 bc 00 	lds	r24, 0x00BC
    1fc2:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    1fc4:	99 b7       	in	r25, 0x39	; 57
    1fc6:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    1fc8:	80 91 bd 00 	lds	r24, 0x00BD
    1fcc:	82 95       	swap	r24
    1fce:	88 0f       	add	r24, r24
    1fd0:	88 0f       	add	r24, r24
    1fd2:	80 7c       	andi	r24, 0xC0	; 192
    1fd4:	89 2b       	or	r24, r25
    1fd6:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    1fda:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    1fdc:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1fde:	08 95       	ret

00001fe0 <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	79 f0       	breq	.+30     	; 0x2002 <TIM_Start+0x22>
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	18 f0       	brcs	.+6      	; 0x1fee <TIM_Start+0xe>
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	09 f5       	brne	.+66     	; 0x202e <TIM_Start+0x4e>
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    1fee:	a2 e5       	ldi	r26, 0x52	; 82
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1ff2:	e3 e5       	ldi	r30, 0x53	; 83
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    1ff8:	a4 e4       	ldi	r26, 0x44	; 68
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1ffc:	e5 e4       	ldi	r30, 0x45	; 69
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    2000:	04 c0       	rjmp	.+8      	; 0x200a <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    2002:	ac e4       	ldi	r26, 0x4C	; 76
    2004:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    2006:	ee e4       	ldi	r30, 0x4E	; 78
    2008:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    200a:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    200c:	20 81       	ld	r18, Z
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	dc 01       	movw	r26, r24
    2012:	aa 0f       	add	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	8a 0f       	add	r24, r26
    2018:	9b 1f       	adc	r25, r27
    201a:	dc 01       	movw	r26, r24
    201c:	aa 54       	subi	r26, 0x4A	; 74
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	12 96       	adiw	r26, 0x02	; 2
    2022:	8c 91       	ld	r24, X
    2024:	12 97       	sbiw	r26, 0x02	; 2
    2026:	82 2b       	or	r24, r18
    2028:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    202e:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    2030:	08 95       	ret

00002032 <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	59 f0       	breq	.+22     	; 0x204c <TIM_Stop+0x1a>
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	18 f0       	brcs	.+6      	; 0x2040 <TIM_Stop+0xe>
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	71 f4       	brne	.+28     	; 0x205a <TIM_Stop+0x28>
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    2040:	e3 e5       	ldi	r30, 0x53	; 83
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    2046:	e5 e4       	ldi	r30, 0x45	; 69
    2048:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    204c:	ee e4       	ldi	r30, 0x4E	; 78
    204e:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    2050:	80 81       	ld	r24, Z
    2052:	88 7f       	andi	r24, 0xF8	; 248
    2054:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    205a:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    205c:	08 95       	ret

0000205e <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    205e:	61 15       	cp	r22, r1
    2060:	71 05       	cpc	r23, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <TIM_GetStatus+0x8>
    2064:	64 c0       	rjmp	.+200    	; 0x212e <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	11 f1       	breq	.+68     	; 0x20ae <TIM_GetStatus+0x50>
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	20 f0       	brcs	.+8      	; 0x2076 <TIM_GetStatus+0x18>
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	09 f0       	breq	.+2      	; 0x2074 <TIM_GetStatus+0x16>
    2072:	5f c0       	rjmp	.+190    	; 0x2132 <TIM_GetStatus+0xd4>
    2074:	41 c0       	rjmp	.+130    	; 0x20f8 <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    2076:	80 91 b6 00 	lds	r24, 0x00B6
    207a:	88 23       	and	r24, r24
    207c:	51 f4       	brne	.+20     	; 0x2092 <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    207e:	08 b6       	in	r0, 0x38	; 56
    2080:	00 fe       	sbrs	r0, 0
    2082:	59 c0       	rjmp	.+178    	; 0x2136 <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2084:	fb 01       	movw	r30, r22
    2086:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    2088:	88 b7       	in	r24, 0x38	; 56
    208a:	81 60       	ori	r24, 0x01	; 1
    208c:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    2092:	88 30       	cpi	r24, 0x08	; 8
    2094:	09 f0       	breq	.+2      	; 0x2098 <TIM_GetStatus+0x3a>
    2096:	51 c0       	rjmp	.+162    	; 0x213a <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    2098:	08 b6       	in	r0, 0x38	; 56
    209a:	01 fe       	sbrs	r0, 1
    209c:	50 c0       	rjmp	.+160    	; 0x213e <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	fb 01       	movw	r30, r22
    20a2:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    20a4:	88 b7       	in	r24, 0x38	; 56
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    20ae:	80 91 b9 00 	lds	r24, 0x00B9
    20b2:	88 23       	and	r24, r24
    20b4:	51 f4       	brne	.+20     	; 0x20ca <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    20b6:	08 b6       	in	r0, 0x38	; 56
    20b8:	02 fe       	sbrs	r0, 2
    20ba:	43 c0       	rjmp	.+134    	; 0x2142 <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    20bc:	fb 01       	movw	r30, r22
    20be:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    20c0:	88 b7       	in	r24, 0x38	; 56
    20c2:	84 60       	ori	r24, 0x04	; 4
    20c4:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    20ca:	88 30       	cpi	r24, 0x08	; 8
    20cc:	e1 f5       	brne	.+120    	; 0x2146 <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    20ce:	88 b7       	in	r24, 0x38	; 56
    20d0:	84 ff       	sbrs	r24, 4
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	fb 01       	movw	r30, r22
    20d8:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    20da:	88 b7       	in	r24, 0x38	; 56
    20dc:	80 61       	ori	r24, 0x10	; 16
    20de:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    20e4:	83 ff       	sbrs	r24, 3
    20e6:	31 c0       	rjmp	.+98     	; 0x214a <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	fb 01       	movw	r30, r22
    20ec:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    20ee:	88 b7       	in	r24, 0x38	; 56
    20f0:	88 60       	ori	r24, 0x08	; 8
    20f2:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    20f8:	80 91 bc 00 	lds	r24, 0x00BC
    20fc:	88 23       	and	r24, r24
    20fe:	51 f4       	brne	.+20     	; 0x2114 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    2100:	08 b6       	in	r0, 0x38	; 56
    2102:	06 fe       	sbrs	r0, 6
    2104:	24 c0       	rjmp	.+72     	; 0x214e <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2106:	fb 01       	movw	r30, r22
    2108:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    210a:	88 b7       	in	r24, 0x38	; 56
    210c:	80 64       	ori	r24, 0x40	; 64
    210e:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    2114:	88 30       	cpi	r24, 0x08	; 8
    2116:	e9 f4       	brne	.+58     	; 0x2152 <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    2118:	08 b6       	in	r0, 0x38	; 56
    211a:	07 fe       	sbrs	r0, 7
    211c:	1c c0       	rjmp	.+56     	; 0x2156 <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	fb 01       	movw	r30, r22
    2122:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    2124:	88 b7       	in	r24, 0x38	; 56
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    2132:	8e ef       	ldi	r24, 0xFE	; 254
    2134:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2136:	8d ef       	ldi	r24, 0xFD	; 253
    2138:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    213e:	8d ef       	ldi	r24, 0xFD	; 253
    2140:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2142:	8d ef       	ldi	r24, 0xFD	; 253
    2144:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    214a:	8d ef       	ldi	r24, 0xFD	; 253
    214c:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    214e:	8d ef       	ldi	r24, 0xFD	; 253
    2150:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2156:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    2158:	08 95       	ret

0000215a <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	00 d0       	rcall	.+0      	; 0x2172 <TIM_DelayUs+0x18>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <TIM_DelayUs+0x1a>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	18 2f       	mov	r17, r24
    217a:	6a 01       	movw	r12, r20
    217c:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	08 f0       	brcs	.+2      	; 0x2184 <TIM_DelayUs+0x2a>
    2182:	5c c0       	rjmp	.+184    	; 0x223c <TIM_DelayUs+0xe2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2184:	21 15       	cp	r18, r1
    2186:	31 05       	cpc	r19, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <TIM_DelayUs+0x32>
    218a:	5a c0       	rjmp	.+180    	; 0x2240 <TIM_DelayUs+0xe6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    218c:	30 93 13 01 	sts	0x0113, r19
    2190:	20 93 12 01 	sts	0x0112, r18
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    2194:	80 91 14 01 	lds	r24, 0x0114
    2198:	88 23       	and	r24, r24
    219a:	09 f0       	breq	.+2      	; 0x219e <TIM_DelayUs+0x44>
    219c:	53 c0       	rjmp	.+166    	; 0x2244 <TIM_DelayUs+0xea>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    219e:	81 2f       	mov	r24, r17
    21a0:	be 01       	movw	r22, r28
    21a2:	6f 5f       	subi	r22, 0xFF	; 255
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    21aa:	8c 3f       	cpi	r24, 0xFC	; 252
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <TIM_DelayUs+0x56>
    21ae:	4c c0       	rjmp	.+152    	; 0x2248 <TIM_DelayUs+0xee>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    21b0:	89 80       	ldd	r8, Y+1	; 0x01
    21b2:	9a 80       	ldd	r9, Y+2	; 0x02
    21b4:	ab 80       	ldd	r10, Y+3	; 0x03
    21b6:	bc 80       	ldd	r11, Y+4	; 0x04
    21b8:	c5 01       	movw	r24, r10
    21ba:	b4 01       	movw	r22, r8
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	a1 f0       	breq	.+40     	; 0x21f2 <TIM_DelayUs+0x98>
      {
         TIM_Delay /= f32_FreqRatio;
    21ca:	c7 01       	movw	r24, r14
    21cc:	b6 01       	movw	r22, r12
    21ce:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
    21d2:	a5 01       	movw	r20, r10
    21d4:	94 01       	movw	r18, r8
    21d6:	0e 94 98 12 	call	0x2530	; 0x2530 <__divsf3>
    21da:	46 2f       	mov	r20, r22
    21dc:	57 2f       	mov	r21, r23
    21de:	68 2f       	mov	r22, r24
    21e0:	79 2f       	mov	r23, r25
    21e2:	cb 01       	movw	r24, r22
    21e4:	ba 01       	movw	r22, r20
    21e6:	0e 94 00 13 	call	0x2600	; 0x2600 <__fixunssfsi>
    21ea:	c6 2e       	mov	r12, r22
    21ec:	d7 2e       	mov	r13, r23
    21ee:	e8 2e       	mov	r14, r24
    21f0:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    21f2:	bb 27       	eor	r27, r27
    21f4:	af 2d       	mov	r26, r15
    21f6:	9e 2d       	mov	r25, r14
    21f8:	8d 2d       	mov	r24, r13
    21fa:	80 93 15 01 	sts	0x0115, r24
    21fe:	90 93 16 01 	sts	0x0116, r25
    2202:	a0 93 17 01 	sts	0x0117, r26
    2206:	b0 93 18 01 	sts	0x0118, r27
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    220a:	6c 2d       	mov	r22, r12
    220c:	c0 92 19 01 	sts	0x0119, r12
      
      if(gu32_Overflows == 0)
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	a1 05       	cpc	r26, r1
    2214:	b1 05       	cpc	r27, r1
    2216:	41 f4       	brne	.+16     	; 0x2228 <TIM_DelayUs+0xce>
      {
         gu8_OverflowsComplete = HIGH;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	80 93 1a 01 	sts	0x011A, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    221e:	81 2f       	mov	r24, r17
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <TIM_DelayUs+0xd8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    2228:	81 2f       	mov	r24, r17
    222a:	6f ef       	ldi	r22, 0xFF	; 255
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 14 01 	sts	0x0114, r24
      return TIMER_E_PENDING;
    2238:	8d ef       	ldi	r24, 0xFD	; 253
    223a:	07 c0       	rjmp	.+14     	; 0x224a <TIM_DelayUs+0xf0>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    223c:	8e ef       	ldi	r24, 0xFE	; 254
    223e:	05 c0       	rjmp	.+10     	; 0x224a <TIM_DelayUs+0xf0>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	03 c0       	rjmp	.+6      	; 0x224a <TIM_DelayUs+0xf0>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <TIM_DelayUs+0xf0>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    2248:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	8f 90       	pop	r8
    2268:	08 95       	ret

0000226a <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    226a:	8f 92       	push	r8
    226c:	9f 92       	push	r9
    226e:	af 92       	push	r10
    2270:	bf 92       	push	r11
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <TIM_DelayMs+0x18>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <TIM_DelayMs+0x1a>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	18 2f       	mov	r17, r24
    228a:	04 2f       	mov	r16, r20
    228c:	f5 2e       	mov	r15, r21
    228e:	e6 2e       	mov	r14, r22
    2290:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	08 f0       	brcs	.+2      	; 0x2298 <TIM_DelayMs+0x2e>
    2296:	6d c0       	rjmp	.+218    	; 0x2372 <TIM_DelayMs+0x108>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2298:	21 15       	cp	r18, r1
    229a:	31 05       	cpc	r19, r1
    229c:	09 f4       	brne	.+2      	; 0x22a0 <TIM_DelayMs+0x36>
    229e:	6b c0       	rjmp	.+214    	; 0x2376 <TIM_DelayMs+0x10c>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    22a0:	30 93 13 01 	sts	0x0113, r19
    22a4:	20 93 12 01 	sts	0x0112, r18
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    22a8:	80 91 14 01 	lds	r24, 0x0114
    22ac:	88 23       	and	r24, r24
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <TIM_DelayMs+0x48>
    22b0:	64 c0       	rjmp	.+200    	; 0x237a <TIM_DelayMs+0x110>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    22b2:	81 2f       	mov	r24, r17
    22b4:	be 01       	movw	r22, r28
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    22be:	8c 3f       	cpi	r24, 0xFC	; 252
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <TIM_DelayMs+0x5a>
    22c2:	5d c0       	rjmp	.+186    	; 0x237e <TIM_DelayMs+0x114>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    22c4:	89 80       	ldd	r8, Y+1	; 0x01
    22c6:	9a 80       	ldd	r9, Y+2	; 0x02
    22c8:	ab 80       	ldd	r10, Y+3	; 0x03
    22ca:	bc 80       	ldd	r11, Y+4	; 0x04
    22cc:	c5 01       	movw	r24, r10
    22ce:	b4 01       	movw	r22, r8
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	a9 01       	movw	r20, r18
    22d6:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    22da:	88 23       	and	r24, r24
    22dc:	b1 f0       	breq	.+44     	; 0x230a <TIM_DelayMs+0xa0>
      {
         TIM_Delay /= f32_FreqRatio;
    22de:	60 2f       	mov	r22, r16
    22e0:	7f 2d       	mov	r23, r15
    22e2:	8e 2d       	mov	r24, r14
    22e4:	9d 2d       	mov	r25, r13
    22e6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
    22ea:	a5 01       	movw	r20, r10
    22ec:	94 01       	movw	r18, r8
    22ee:	0e 94 98 12 	call	0x2530	; 0x2530 <__divsf3>
    22f2:	46 2f       	mov	r20, r22
    22f4:	57 2f       	mov	r21, r23
    22f6:	68 2f       	mov	r22, r24
    22f8:	79 2f       	mov	r23, r25
    22fa:	cb 01       	movw	r24, r22
    22fc:	ba 01       	movw	r22, r20
    22fe:	0e 94 00 13 	call	0x2600	; 0x2600 <__fixunssfsi>
    2302:	06 2f       	mov	r16, r22
    2304:	f7 2e       	mov	r15, r23
    2306:	e8 2e       	mov	r14, r24
    2308:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    230a:	60 2f       	mov	r22, r16
    230c:	7f 2d       	mov	r23, r15
    230e:	8e 2d       	mov	r24, r14
    2310:	9d 2d       	mov	r25, r13
    2312:	28 ee       	ldi	r18, 0xE8	; 232
    2314:	33 e0       	ldi	r19, 0x03	; 3
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	0e 94 83 14 	call	0x2906	; 0x2906 <__mulsi3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	89 2f       	mov	r24, r25
    2324:	9a 2f       	mov	r25, r26
    2326:	ab 2f       	mov	r26, r27
    2328:	bb 27       	eor	r27, r27
    232a:	80 93 15 01 	sts	0x0115, r24
    232e:	90 93 16 01 	sts	0x0116, r25
    2332:	a0 93 17 01 	sts	0x0117, r26
    2336:	b0 93 18 01 	sts	0x0118, r27
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    233a:	68 ee       	ldi	r22, 0xE8	; 232
    233c:	06 9f       	mul	r16, r22
    233e:	60 2d       	mov	r22, r0
    2340:	11 24       	eor	r1, r1
    2342:	60 93 19 01 	sts	0x0119, r22
      
      if(gu32_Overflows == 0)
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	a1 05       	cpc	r26, r1
    234a:	b1 05       	cpc	r27, r1
    234c:	41 f4       	brne	.+16     	; 0x235e <TIM_DelayMs+0xf4>
      {
         gu8_OverflowsComplete = HIGH;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	80 93 1a 01 	sts	0x011A, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    2354:	81 2f       	mov	r24, r17
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <TIM_DelayMs+0xfe>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    235e:	81 2f       	mov	r24, r17
    2360:	6f ef       	ldi	r22, 0xFF	; 255
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	80 93 14 01 	sts	0x0114, r24
      return TIMER_E_PENDING;
    236e:	8d ef       	ldi	r24, 0xFD	; 253
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <TIM_DelayMs+0x116>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    2372:	8e ef       	ldi	r24, 0xFE	; 254
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <TIM_DelayMs+0x116>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <TIM_DelayMs+0x116>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <TIM_DelayMs+0x116>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    237e:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	08 95       	ret

000023a0 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	18 2f       	mov	r17, r24
   if(DelayReady == gEnu_State)
    23ae:	20 91 14 01 	lds	r18, 0x0114
    23b2:	22 23       	and	r18, r18
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <TIM_DelayStatus+0x18>
    23b6:	49 c0       	rjmp	.+146    	; 0x244a <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    23b8:	80 91 12 01 	lds	r24, 0x0112
    23bc:	90 91 13 01 	lds	r25, 0x0113
    23c0:	68 17       	cp	r22, r24
    23c2:	79 07       	cpc	r23, r25
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <TIM_DelayStatus+0x28>
    23c6:	43 c0       	rjmp	.+134    	; 0x244e <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    23c8:	21 30       	cpi	r18, 0x01	; 1
    23ca:	09 f0       	breq	.+2      	; 0x23ce <TIM_DelayStatus+0x2e>
    23cc:	42 c0       	rjmp	.+132    	; 0x2452 <TIM_DelayStatus+0xb2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    23ce:	81 2f       	mov	r24, r17
    23d0:	be 01       	movw	r22, r28
    23d2:	6f 5f       	subi	r22, 0xFF	; 255
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	0e 94 2f 10 	call	0x205e	; 0x205e <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    23da:	88 23       	and	r24, r24
    23dc:	a9 f5       	brne	.+106    	; 0x2448 <TIM_DelayStatus+0xa8>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    23de:	80 91 1a 01 	lds	r24, 0x011A
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	41 f4       	brne	.+16     	; 0x23f6 <TIM_DelayStatus+0x56>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    23e6:	10 92 14 01 	sts	0x0114, r1
            gu8_OverflowsComplete = LOW;
    23ea:	10 92 1a 01 	sts	0x011A, r1
            gu8_Remindar = 0;
    23ee:	10 92 19 01 	sts	0x0119, r1
            /* return success message. */
            return ERROR_OK;
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	2f c0       	rjmp	.+94     	; 0x2454 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    23f6:	80 91 15 01 	lds	r24, 0x0115
    23fa:	90 91 16 01 	lds	r25, 0x0116
    23fe:	a0 91 17 01 	lds	r26, 0x0117
    2402:	b0 91 18 01 	lds	r27, 0x0118
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	a1 09       	sbc	r26, r1
    240a:	b1 09       	sbc	r27, r1
    240c:	80 93 15 01 	sts	0x0115, r24
    2410:	90 93 16 01 	sts	0x0116, r25
    2414:	a0 93 17 01 	sts	0x0117, r26
    2418:	b0 93 18 01 	sts	0x0118, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	a1 05       	cpc	r26, r1
    2420:	b1 05       	cpc	r27, r1
    2422:	59 f4       	brne	.+22     	; 0x243a <TIM_DelayStatus+0x9a>
         {
            gu8_OverflowsComplete = HIGH;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	80 93 1a 01 	sts	0x011A, r24
            TIM_Start(TIM_channel, gu8_Remindar);
    242a:	60 91 19 01 	lds	r22, 0x0119
    242e:	81 2f       	mov	r24, r17
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    2436:	8d ef       	ldi	r24, 0xFD	; 253
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    243a:	81 2f       	mov	r24, r17
    243c:	6f ef       	ldi	r22, 0xFF	; 255
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    2444:	8d ef       	ldi	r24, 0xFD	; 253
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <TIM_DelayStatus+0xb4>
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    244a:	8b ef       	ldi	r24, 0xFB	; 251
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
   }      
    2454:	0f 90       	pop	r0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	08 95       	ret

0000245e <__subsf3>:
    245e:	50 58       	subi	r21, 0x80	; 128

00002460 <__addsf3>:
    2460:	bb 27       	eor	r27, r27
    2462:	aa 27       	eor	r26, r26
    2464:	0e d0       	rcall	.+28     	; 0x2482 <__addsf3x>
    2466:	ae c1       	rjmp	.+860    	; 0x27c4 <__fp_round>
    2468:	9f d1       	rcall	.+830    	; 0x27a8 <__fp_pscA>
    246a:	30 f0       	brcs	.+12     	; 0x2478 <__addsf3+0x18>
    246c:	a4 d1       	rcall	.+840    	; 0x27b6 <__fp_pscB>
    246e:	20 f0       	brcs	.+8      	; 0x2478 <__addsf3+0x18>
    2470:	31 f4       	brne	.+12     	; 0x247e <__addsf3+0x1e>
    2472:	9f 3f       	cpi	r25, 0xFF	; 255
    2474:	11 f4       	brne	.+4      	; 0x247a <__addsf3+0x1a>
    2476:	1e f4       	brtc	.+6      	; 0x247e <__addsf3+0x1e>
    2478:	94 c1       	rjmp	.+808    	; 0x27a2 <__fp_nan>
    247a:	0e f4       	brtc	.+2      	; 0x247e <__addsf3+0x1e>
    247c:	e0 95       	com	r30
    247e:	e7 fb       	bst	r30, 7
    2480:	8a c1       	rjmp	.+788    	; 0x2796 <__fp_inf>

00002482 <__addsf3x>:
    2482:	e9 2f       	mov	r30, r25
    2484:	b0 d1       	rcall	.+864    	; 0x27e6 <__fp_split3>
    2486:	80 f3       	brcs	.-32     	; 0x2468 <__addsf3+0x8>
    2488:	ba 17       	cp	r27, r26
    248a:	62 07       	cpc	r22, r18
    248c:	73 07       	cpc	r23, r19
    248e:	84 07       	cpc	r24, r20
    2490:	95 07       	cpc	r25, r21
    2492:	18 f0       	brcs	.+6      	; 0x249a <__addsf3x+0x18>
    2494:	71 f4       	brne	.+28     	; 0x24b2 <__addsf3x+0x30>
    2496:	9e f5       	brtc	.+102    	; 0x24fe <__addsf3x+0x7c>
    2498:	c8 c1       	rjmp	.+912    	; 0x282a <__fp_zero>
    249a:	0e f4       	brtc	.+2      	; 0x249e <__addsf3x+0x1c>
    249c:	e0 95       	com	r30
    249e:	0b 2e       	mov	r0, r27
    24a0:	ba 2f       	mov	r27, r26
    24a2:	a0 2d       	mov	r26, r0
    24a4:	0b 01       	movw	r0, r22
    24a6:	b9 01       	movw	r22, r18
    24a8:	90 01       	movw	r18, r0
    24aa:	0c 01       	movw	r0, r24
    24ac:	ca 01       	movw	r24, r20
    24ae:	a0 01       	movw	r20, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	ff 27       	eor	r31, r31
    24b4:	59 1b       	sub	r21, r25
    24b6:	99 f0       	breq	.+38     	; 0x24de <__addsf3x+0x5c>
    24b8:	59 3f       	cpi	r21, 0xF9	; 249
    24ba:	50 f4       	brcc	.+20     	; 0x24d0 <__addsf3x+0x4e>
    24bc:	50 3e       	cpi	r21, 0xE0	; 224
    24be:	68 f1       	brcs	.+90     	; 0x251a <__addsf3x+0x98>
    24c0:	1a 16       	cp	r1, r26
    24c2:	f0 40       	sbci	r31, 0x00	; 0
    24c4:	a2 2f       	mov	r26, r18
    24c6:	23 2f       	mov	r18, r19
    24c8:	34 2f       	mov	r19, r20
    24ca:	44 27       	eor	r20, r20
    24cc:	58 5f       	subi	r21, 0xF8	; 248
    24ce:	f3 cf       	rjmp	.-26     	; 0x24b6 <__addsf3x+0x34>
    24d0:	46 95       	lsr	r20
    24d2:	37 95       	ror	r19
    24d4:	27 95       	ror	r18
    24d6:	a7 95       	ror	r26
    24d8:	f0 40       	sbci	r31, 0x00	; 0
    24da:	53 95       	inc	r21
    24dc:	c9 f7       	brne	.-14     	; 0x24d0 <__addsf3x+0x4e>
    24de:	7e f4       	brtc	.+30     	; 0x24fe <__addsf3x+0x7c>
    24e0:	1f 16       	cp	r1, r31
    24e2:	ba 0b       	sbc	r27, r26
    24e4:	62 0b       	sbc	r22, r18
    24e6:	73 0b       	sbc	r23, r19
    24e8:	84 0b       	sbc	r24, r20
    24ea:	ba f0       	brmi	.+46     	; 0x251a <__addsf3x+0x98>
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	a1 f0       	breq	.+40     	; 0x2518 <__addsf3x+0x96>
    24f0:	ff 0f       	add	r31, r31
    24f2:	bb 1f       	adc	r27, r27
    24f4:	66 1f       	adc	r22, r22
    24f6:	77 1f       	adc	r23, r23
    24f8:	88 1f       	adc	r24, r24
    24fa:	c2 f7       	brpl	.-16     	; 0x24ec <__addsf3x+0x6a>
    24fc:	0e c0       	rjmp	.+28     	; 0x251a <__addsf3x+0x98>
    24fe:	ba 0f       	add	r27, r26
    2500:	62 1f       	adc	r22, r18
    2502:	73 1f       	adc	r23, r19
    2504:	84 1f       	adc	r24, r20
    2506:	48 f4       	brcc	.+18     	; 0x251a <__addsf3x+0x98>
    2508:	87 95       	ror	r24
    250a:	77 95       	ror	r23
    250c:	67 95       	ror	r22
    250e:	b7 95       	ror	r27
    2510:	f7 95       	ror	r31
    2512:	9e 3f       	cpi	r25, 0xFE	; 254
    2514:	08 f0       	brcs	.+2      	; 0x2518 <__addsf3x+0x96>
    2516:	b3 cf       	rjmp	.-154    	; 0x247e <__addsf3+0x1e>
    2518:	93 95       	inc	r25
    251a:	88 0f       	add	r24, r24
    251c:	08 f0       	brcs	.+2      	; 0x2520 <__addsf3x+0x9e>
    251e:	99 27       	eor	r25, r25
    2520:	ee 0f       	add	r30, r30
    2522:	97 95       	ror	r25
    2524:	87 95       	ror	r24
    2526:	08 95       	ret

00002528 <__cmpsf2>:
    2528:	12 d1       	rcall	.+548    	; 0x274e <__fp_cmp>
    252a:	08 f4       	brcc	.+2      	; 0x252e <__cmpsf2+0x6>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	08 95       	ret

00002530 <__divsf3>:
    2530:	0c d0       	rcall	.+24     	; 0x254a <__divsf3x>
    2532:	48 c1       	rjmp	.+656    	; 0x27c4 <__fp_round>
    2534:	40 d1       	rcall	.+640    	; 0x27b6 <__fp_pscB>
    2536:	40 f0       	brcs	.+16     	; 0x2548 <__divsf3+0x18>
    2538:	37 d1       	rcall	.+622    	; 0x27a8 <__fp_pscA>
    253a:	30 f0       	brcs	.+12     	; 0x2548 <__divsf3+0x18>
    253c:	21 f4       	brne	.+8      	; 0x2546 <__divsf3+0x16>
    253e:	5f 3f       	cpi	r21, 0xFF	; 255
    2540:	19 f0       	breq	.+6      	; 0x2548 <__divsf3+0x18>
    2542:	29 c1       	rjmp	.+594    	; 0x2796 <__fp_inf>
    2544:	51 11       	cpse	r21, r1
    2546:	72 c1       	rjmp	.+740    	; 0x282c <__fp_szero>
    2548:	2c c1       	rjmp	.+600    	; 0x27a2 <__fp_nan>

0000254a <__divsf3x>:
    254a:	4d d1       	rcall	.+666    	; 0x27e6 <__fp_split3>
    254c:	98 f3       	brcs	.-26     	; 0x2534 <__divsf3+0x4>

0000254e <__divsf3_pse>:
    254e:	99 23       	and	r25, r25
    2550:	c9 f3       	breq	.-14     	; 0x2544 <__divsf3+0x14>
    2552:	55 23       	and	r21, r21
    2554:	b1 f3       	breq	.-20     	; 0x2542 <__divsf3+0x12>
    2556:	95 1b       	sub	r25, r21
    2558:	55 0b       	sbc	r21, r21
    255a:	bb 27       	eor	r27, r27
    255c:	aa 27       	eor	r26, r26
    255e:	62 17       	cp	r22, r18
    2560:	73 07       	cpc	r23, r19
    2562:	84 07       	cpc	r24, r20
    2564:	38 f0       	brcs	.+14     	; 0x2574 <__divsf3_pse+0x26>
    2566:	9f 5f       	subi	r25, 0xFF	; 255
    2568:	5f 4f       	sbci	r21, 0xFF	; 255
    256a:	22 0f       	add	r18, r18
    256c:	33 1f       	adc	r19, r19
    256e:	44 1f       	adc	r20, r20
    2570:	aa 1f       	adc	r26, r26
    2572:	a9 f3       	breq	.-22     	; 0x255e <__divsf3_pse+0x10>
    2574:	33 d0       	rcall	.+102    	; 0x25dc <__divsf3_pse+0x8e>
    2576:	0e 2e       	mov	r0, r30
    2578:	3a f0       	brmi	.+14     	; 0x2588 <__divsf3_pse+0x3a>
    257a:	e0 e8       	ldi	r30, 0x80	; 128
    257c:	30 d0       	rcall	.+96     	; 0x25de <__divsf3_pse+0x90>
    257e:	91 50       	subi	r25, 0x01	; 1
    2580:	50 40       	sbci	r21, 0x00	; 0
    2582:	e6 95       	lsr	r30
    2584:	00 1c       	adc	r0, r0
    2586:	ca f7       	brpl	.-14     	; 0x257a <__divsf3_pse+0x2c>
    2588:	29 d0       	rcall	.+82     	; 0x25dc <__divsf3_pse+0x8e>
    258a:	fe 2f       	mov	r31, r30
    258c:	27 d0       	rcall	.+78     	; 0x25dc <__divsf3_pse+0x8e>
    258e:	66 0f       	add	r22, r22
    2590:	77 1f       	adc	r23, r23
    2592:	88 1f       	adc	r24, r24
    2594:	bb 1f       	adc	r27, r27
    2596:	26 17       	cp	r18, r22
    2598:	37 07       	cpc	r19, r23
    259a:	48 07       	cpc	r20, r24
    259c:	ab 07       	cpc	r26, r27
    259e:	b0 e8       	ldi	r27, 0x80	; 128
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <__divsf3_pse+0x56>
    25a2:	bb 0b       	sbc	r27, r27
    25a4:	80 2d       	mov	r24, r0
    25a6:	bf 01       	movw	r22, r30
    25a8:	ff 27       	eor	r31, r31
    25aa:	93 58       	subi	r25, 0x83	; 131
    25ac:	5f 4f       	sbci	r21, 0xFF	; 255
    25ae:	2a f0       	brmi	.+10     	; 0x25ba <__divsf3_pse+0x6c>
    25b0:	9e 3f       	cpi	r25, 0xFE	; 254
    25b2:	51 05       	cpc	r21, r1
    25b4:	68 f0       	brcs	.+26     	; 0x25d0 <__divsf3_pse+0x82>
    25b6:	ef c0       	rjmp	.+478    	; 0x2796 <__fp_inf>
    25b8:	39 c1       	rjmp	.+626    	; 0x282c <__fp_szero>
    25ba:	5f 3f       	cpi	r21, 0xFF	; 255
    25bc:	ec f3       	brlt	.-6      	; 0x25b8 <__divsf3_pse+0x6a>
    25be:	98 3e       	cpi	r25, 0xE8	; 232
    25c0:	dc f3       	brlt	.-10     	; 0x25b8 <__divsf3_pse+0x6a>
    25c2:	86 95       	lsr	r24
    25c4:	77 95       	ror	r23
    25c6:	67 95       	ror	r22
    25c8:	b7 95       	ror	r27
    25ca:	f7 95       	ror	r31
    25cc:	9f 5f       	subi	r25, 0xFF	; 255
    25ce:	c9 f7       	brne	.-14     	; 0x25c2 <__divsf3_pse+0x74>
    25d0:	88 0f       	add	r24, r24
    25d2:	91 1d       	adc	r25, r1
    25d4:	96 95       	lsr	r25
    25d6:	87 95       	ror	r24
    25d8:	97 f9       	bld	r25, 7
    25da:	08 95       	ret
    25dc:	e1 e0       	ldi	r30, 0x01	; 1
    25de:	66 0f       	add	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	88 1f       	adc	r24, r24
    25e4:	bb 1f       	adc	r27, r27
    25e6:	62 17       	cp	r22, r18
    25e8:	73 07       	cpc	r23, r19
    25ea:	84 07       	cpc	r24, r20
    25ec:	ba 07       	cpc	r27, r26
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <__divsf3_pse+0xaa>
    25f0:	62 1b       	sub	r22, r18
    25f2:	73 0b       	sbc	r23, r19
    25f4:	84 0b       	sbc	r24, r20
    25f6:	ba 0b       	sbc	r27, r26
    25f8:	ee 1f       	adc	r30, r30
    25fa:	88 f7       	brcc	.-30     	; 0x25de <__divsf3_pse+0x90>
    25fc:	e0 95       	com	r30
    25fe:	08 95       	ret

00002600 <__fixunssfsi>:
    2600:	fa d0       	rcall	.+500    	; 0x27f6 <__fp_splitA>
    2602:	88 f0       	brcs	.+34     	; 0x2626 <__fixunssfsi+0x26>
    2604:	9f 57       	subi	r25, 0x7F	; 127
    2606:	90 f0       	brcs	.+36     	; 0x262c <__fixunssfsi+0x2c>
    2608:	b9 2f       	mov	r27, r25
    260a:	99 27       	eor	r25, r25
    260c:	b7 51       	subi	r27, 0x17	; 23
    260e:	a0 f0       	brcs	.+40     	; 0x2638 <__fixunssfsi+0x38>
    2610:	d1 f0       	breq	.+52     	; 0x2646 <__fixunssfsi+0x46>
    2612:	66 0f       	add	r22, r22
    2614:	77 1f       	adc	r23, r23
    2616:	88 1f       	adc	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	1a f0       	brmi	.+6      	; 0x2622 <__fixunssfsi+0x22>
    261c:	ba 95       	dec	r27
    261e:	c9 f7       	brne	.-14     	; 0x2612 <__fixunssfsi+0x12>
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <__fixunssfsi+0x46>
    2622:	b1 30       	cpi	r27, 0x01	; 1
    2624:	81 f0       	breq	.+32     	; 0x2646 <__fixunssfsi+0x46>
    2626:	01 d1       	rcall	.+514    	; 0x282a <__fp_zero>
    2628:	b1 e0       	ldi	r27, 0x01	; 1
    262a:	08 95       	ret
    262c:	fe c0       	rjmp	.+508    	; 0x282a <__fp_zero>
    262e:	67 2f       	mov	r22, r23
    2630:	78 2f       	mov	r23, r24
    2632:	88 27       	eor	r24, r24
    2634:	b8 5f       	subi	r27, 0xF8	; 248
    2636:	39 f0       	breq	.+14     	; 0x2646 <__fixunssfsi+0x46>
    2638:	b9 3f       	cpi	r27, 0xF9	; 249
    263a:	cc f3       	brlt	.-14     	; 0x262e <__fixunssfsi+0x2e>
    263c:	86 95       	lsr	r24
    263e:	77 95       	ror	r23
    2640:	67 95       	ror	r22
    2642:	b3 95       	inc	r27
    2644:	d9 f7       	brne	.-10     	; 0x263c <__fixunssfsi+0x3c>
    2646:	3e f4       	brtc	.+14     	; 0x2656 <__fixunssfsi+0x56>
    2648:	90 95       	com	r25
    264a:	80 95       	com	r24
    264c:	70 95       	com	r23
    264e:	61 95       	neg	r22
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	8f 4f       	sbci	r24, 0xFF	; 255
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	08 95       	ret

00002658 <__floatunsisf>:
    2658:	e8 94       	clt
    265a:	09 c0       	rjmp	.+18     	; 0x266e <__floatsisf+0x12>

0000265c <__floatsisf>:
    265c:	97 fb       	bst	r25, 7
    265e:	3e f4       	brtc	.+14     	; 0x266e <__floatsisf+0x12>
    2660:	90 95       	com	r25
    2662:	80 95       	com	r24
    2664:	70 95       	com	r23
    2666:	61 95       	neg	r22
    2668:	7f 4f       	sbci	r23, 0xFF	; 255
    266a:	8f 4f       	sbci	r24, 0xFF	; 255
    266c:	9f 4f       	sbci	r25, 0xFF	; 255
    266e:	99 23       	and	r25, r25
    2670:	a9 f0       	breq	.+42     	; 0x269c <__floatsisf+0x40>
    2672:	f9 2f       	mov	r31, r25
    2674:	96 e9       	ldi	r25, 0x96	; 150
    2676:	bb 27       	eor	r27, r27
    2678:	93 95       	inc	r25
    267a:	f6 95       	lsr	r31
    267c:	87 95       	ror	r24
    267e:	77 95       	ror	r23
    2680:	67 95       	ror	r22
    2682:	b7 95       	ror	r27
    2684:	f1 11       	cpse	r31, r1
    2686:	f8 cf       	rjmp	.-16     	; 0x2678 <__floatsisf+0x1c>
    2688:	fa f4       	brpl	.+62     	; 0x26c8 <__floatsisf+0x6c>
    268a:	bb 0f       	add	r27, r27
    268c:	11 f4       	brne	.+4      	; 0x2692 <__floatsisf+0x36>
    268e:	60 ff       	sbrs	r22, 0
    2690:	1b c0       	rjmp	.+54     	; 0x26c8 <__floatsisf+0x6c>
    2692:	6f 5f       	subi	r22, 0xFF	; 255
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	8f 4f       	sbci	r24, 0xFF	; 255
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	16 c0       	rjmp	.+44     	; 0x26c8 <__floatsisf+0x6c>
    269c:	88 23       	and	r24, r24
    269e:	11 f0       	breq	.+4      	; 0x26a4 <__floatsisf+0x48>
    26a0:	96 e9       	ldi	r25, 0x96	; 150
    26a2:	11 c0       	rjmp	.+34     	; 0x26c6 <__floatsisf+0x6a>
    26a4:	77 23       	and	r23, r23
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <__floatsisf+0x54>
    26a8:	9e e8       	ldi	r25, 0x8E	; 142
    26aa:	87 2f       	mov	r24, r23
    26ac:	76 2f       	mov	r23, r22
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <__floatsisf+0x5e>
    26b0:	66 23       	and	r22, r22
    26b2:	71 f0       	breq	.+28     	; 0x26d0 <__floatsisf+0x74>
    26b4:	96 e8       	ldi	r25, 0x86	; 134
    26b6:	86 2f       	mov	r24, r22
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	2a f0       	brmi	.+10     	; 0x26c8 <__floatsisf+0x6c>
    26be:	9a 95       	dec	r25
    26c0:	66 0f       	add	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	88 1f       	adc	r24, r24
    26c6:	da f7       	brpl	.-10     	; 0x26be <__floatsisf+0x62>
    26c8:	88 0f       	add	r24, r24
    26ca:	96 95       	lsr	r25
    26cc:	87 95       	ror	r24
    26ce:	97 f9       	bld	r25, 7
    26d0:	08 95       	ret

000026d2 <__floatundisf>:
    26d2:	e8 94       	clt

000026d4 <__fp_di2sf>:
    26d4:	f9 2f       	mov	r31, r25
    26d6:	96 eb       	ldi	r25, 0xB6	; 182
    26d8:	ff 23       	and	r31, r31
    26da:	81 f0       	breq	.+32     	; 0x26fc <__fp_di2sf+0x28>
    26dc:	12 16       	cp	r1, r18
    26de:	13 06       	cpc	r1, r19
    26e0:	14 06       	cpc	r1, r20
    26e2:	44 0b       	sbc	r20, r20
    26e4:	93 95       	inc	r25
    26e6:	f6 95       	lsr	r31
    26e8:	87 95       	ror	r24
    26ea:	77 95       	ror	r23
    26ec:	67 95       	ror	r22
    26ee:	57 95       	ror	r21
    26f0:	40 40       	sbci	r20, 0x00	; 0
    26f2:	ff 23       	and	r31, r31
    26f4:	b9 f7       	brne	.-18     	; 0x26e4 <__fp_di2sf+0x10>
    26f6:	1b c0       	rjmp	.+54     	; 0x272e <__fp_di2sf+0x5a>
    26f8:	99 27       	eor	r25, r25
    26fa:	08 95       	ret
    26fc:	88 23       	and	r24, r24
    26fe:	51 f4       	brne	.+20     	; 0x2714 <__fp_di2sf+0x40>
    2700:	98 50       	subi	r25, 0x08	; 8
    2702:	d2 f7       	brpl	.-12     	; 0x26f8 <__fp_di2sf+0x24>
    2704:	87 2b       	or	r24, r23
    2706:	76 2f       	mov	r23, r22
    2708:	65 2f       	mov	r22, r21
    270a:	54 2f       	mov	r21, r20
    270c:	43 2f       	mov	r20, r19
    270e:	32 2f       	mov	r19, r18
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	b1 f3       	breq	.-20     	; 0x2700 <__fp_di2sf+0x2c>
    2714:	12 16       	cp	r1, r18
    2716:	13 06       	cpc	r1, r19
    2718:	14 06       	cpc	r1, r20
    271a:	44 0b       	sbc	r20, r20
    271c:	88 23       	and	r24, r24
    271e:	3a f0       	brmi	.+14     	; 0x272e <__fp_di2sf+0x5a>
    2720:	9a 95       	dec	r25
    2722:	44 0f       	add	r20, r20
    2724:	55 1f       	adc	r21, r21
    2726:	66 1f       	adc	r22, r22
    2728:	77 1f       	adc	r23, r23
    272a:	88 1f       	adc	r24, r24
    272c:	ca f7       	brpl	.-14     	; 0x2720 <__fp_di2sf+0x4c>
    272e:	55 23       	and	r21, r21
    2730:	4a f4       	brpl	.+18     	; 0x2744 <__fp_di2sf+0x70>
    2732:	44 0f       	add	r20, r20
    2734:	55 1f       	adc	r21, r21
    2736:	11 f4       	brne	.+4      	; 0x273c <__fp_di2sf+0x68>
    2738:	60 ff       	sbrs	r22, 0
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <__fp_di2sf+0x70>
    273c:	6f 5f       	subi	r22, 0xFF	; 255
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	8f 4f       	sbci	r24, 0xFF	; 255
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	88 0f       	add	r24, r24
    2746:	96 95       	lsr	r25
    2748:	87 95       	ror	r24
    274a:	97 f9       	bld	r25, 7
    274c:	08 95       	ret

0000274e <__fp_cmp>:
    274e:	99 0f       	add	r25, r25
    2750:	00 08       	sbc	r0, r0
    2752:	55 0f       	add	r21, r21
    2754:	aa 0b       	sbc	r26, r26
    2756:	e0 e8       	ldi	r30, 0x80	; 128
    2758:	fe ef       	ldi	r31, 0xFE	; 254
    275a:	16 16       	cp	r1, r22
    275c:	17 06       	cpc	r1, r23
    275e:	e8 07       	cpc	r30, r24
    2760:	f9 07       	cpc	r31, r25
    2762:	c0 f0       	brcs	.+48     	; 0x2794 <__fp_cmp+0x46>
    2764:	12 16       	cp	r1, r18
    2766:	13 06       	cpc	r1, r19
    2768:	e4 07       	cpc	r30, r20
    276a:	f5 07       	cpc	r31, r21
    276c:	98 f0       	brcs	.+38     	; 0x2794 <__fp_cmp+0x46>
    276e:	62 1b       	sub	r22, r18
    2770:	73 0b       	sbc	r23, r19
    2772:	84 0b       	sbc	r24, r20
    2774:	95 0b       	sbc	r25, r21
    2776:	39 f4       	brne	.+14     	; 0x2786 <__fp_cmp+0x38>
    2778:	0a 26       	eor	r0, r26
    277a:	61 f0       	breq	.+24     	; 0x2794 <__fp_cmp+0x46>
    277c:	23 2b       	or	r18, r19
    277e:	24 2b       	or	r18, r20
    2780:	25 2b       	or	r18, r21
    2782:	21 f4       	brne	.+8      	; 0x278c <__fp_cmp+0x3e>
    2784:	08 95       	ret
    2786:	0a 26       	eor	r0, r26
    2788:	09 f4       	brne	.+2      	; 0x278c <__fp_cmp+0x3e>
    278a:	a1 40       	sbci	r26, 0x01	; 1
    278c:	a6 95       	lsr	r26
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	81 1d       	adc	r24, r1
    2792:	81 1d       	adc	r24, r1
    2794:	08 95       	ret

00002796 <__fp_inf>:
    2796:	97 f9       	bld	r25, 7
    2798:	9f 67       	ori	r25, 0x7F	; 127
    279a:	80 e8       	ldi	r24, 0x80	; 128
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	08 95       	ret

000027a2 <__fp_nan>:
    27a2:	9f ef       	ldi	r25, 0xFF	; 255
    27a4:	80 ec       	ldi	r24, 0xC0	; 192
    27a6:	08 95       	ret

000027a8 <__fp_pscA>:
    27a8:	00 24       	eor	r0, r0
    27aa:	0a 94       	dec	r0
    27ac:	16 16       	cp	r1, r22
    27ae:	17 06       	cpc	r1, r23
    27b0:	18 06       	cpc	r1, r24
    27b2:	09 06       	cpc	r0, r25
    27b4:	08 95       	ret

000027b6 <__fp_pscB>:
    27b6:	00 24       	eor	r0, r0
    27b8:	0a 94       	dec	r0
    27ba:	12 16       	cp	r1, r18
    27bc:	13 06       	cpc	r1, r19
    27be:	14 06       	cpc	r1, r20
    27c0:	05 06       	cpc	r0, r21
    27c2:	08 95       	ret

000027c4 <__fp_round>:
    27c4:	09 2e       	mov	r0, r25
    27c6:	03 94       	inc	r0
    27c8:	00 0c       	add	r0, r0
    27ca:	11 f4       	brne	.+4      	; 0x27d0 <__fp_round+0xc>
    27cc:	88 23       	and	r24, r24
    27ce:	52 f0       	brmi	.+20     	; 0x27e4 <__fp_round+0x20>
    27d0:	bb 0f       	add	r27, r27
    27d2:	40 f4       	brcc	.+16     	; 0x27e4 <__fp_round+0x20>
    27d4:	bf 2b       	or	r27, r31
    27d6:	11 f4       	brne	.+4      	; 0x27dc <__fp_round+0x18>
    27d8:	60 ff       	sbrs	r22, 0
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <__fp_round+0x20>
    27dc:	6f 5f       	subi	r22, 0xFF	; 255
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	8f 4f       	sbci	r24, 0xFF	; 255
    27e2:	9f 4f       	sbci	r25, 0xFF	; 255
    27e4:	08 95       	ret

000027e6 <__fp_split3>:
    27e6:	57 fd       	sbrc	r21, 7
    27e8:	90 58       	subi	r25, 0x80	; 128
    27ea:	44 0f       	add	r20, r20
    27ec:	55 1f       	adc	r21, r21
    27ee:	59 f0       	breq	.+22     	; 0x2806 <__fp_splitA+0x10>
    27f0:	5f 3f       	cpi	r21, 0xFF	; 255
    27f2:	71 f0       	breq	.+28     	; 0x2810 <__fp_splitA+0x1a>
    27f4:	47 95       	ror	r20

000027f6 <__fp_splitA>:
    27f6:	88 0f       	add	r24, r24
    27f8:	97 fb       	bst	r25, 7
    27fa:	99 1f       	adc	r25, r25
    27fc:	61 f0       	breq	.+24     	; 0x2816 <__fp_splitA+0x20>
    27fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2800:	79 f0       	breq	.+30     	; 0x2820 <__fp_splitA+0x2a>
    2802:	87 95       	ror	r24
    2804:	08 95       	ret
    2806:	12 16       	cp	r1, r18
    2808:	13 06       	cpc	r1, r19
    280a:	14 06       	cpc	r1, r20
    280c:	55 1f       	adc	r21, r21
    280e:	f2 cf       	rjmp	.-28     	; 0x27f4 <__fp_split3+0xe>
    2810:	46 95       	lsr	r20
    2812:	f1 df       	rcall	.-30     	; 0x27f6 <__fp_splitA>
    2814:	08 c0       	rjmp	.+16     	; 0x2826 <__fp_splitA+0x30>
    2816:	16 16       	cp	r1, r22
    2818:	17 06       	cpc	r1, r23
    281a:	18 06       	cpc	r1, r24
    281c:	99 1f       	adc	r25, r25
    281e:	f1 cf       	rjmp	.-30     	; 0x2802 <__fp_splitA+0xc>
    2820:	86 95       	lsr	r24
    2822:	71 05       	cpc	r23, r1
    2824:	61 05       	cpc	r22, r1
    2826:	08 94       	sec
    2828:	08 95       	ret

0000282a <__fp_zero>:
    282a:	e8 94       	clt

0000282c <__fp_szero>:
    282c:	bb 27       	eor	r27, r27
    282e:	66 27       	eor	r22, r22
    2830:	77 27       	eor	r23, r23
    2832:	cb 01       	movw	r24, r22
    2834:	97 f9       	bld	r25, 7
    2836:	08 95       	ret

00002838 <__gesf2>:
    2838:	8a df       	rcall	.-236    	; 0x274e <__fp_cmp>
    283a:	08 f4       	brcc	.+2      	; 0x283e <__gesf2+0x6>
    283c:	8f ef       	ldi	r24, 0xFF	; 255
    283e:	08 95       	ret

00002840 <__mulsf3>:
    2840:	0b d0       	rcall	.+22     	; 0x2858 <__mulsf3x>
    2842:	c0 cf       	rjmp	.-128    	; 0x27c4 <__fp_round>
    2844:	b1 df       	rcall	.-158    	; 0x27a8 <__fp_pscA>
    2846:	28 f0       	brcs	.+10     	; 0x2852 <__mulsf3+0x12>
    2848:	b6 df       	rcall	.-148    	; 0x27b6 <__fp_pscB>
    284a:	18 f0       	brcs	.+6      	; 0x2852 <__mulsf3+0x12>
    284c:	95 23       	and	r25, r21
    284e:	09 f0       	breq	.+2      	; 0x2852 <__mulsf3+0x12>
    2850:	a2 cf       	rjmp	.-188    	; 0x2796 <__fp_inf>
    2852:	a7 cf       	rjmp	.-178    	; 0x27a2 <__fp_nan>
    2854:	11 24       	eor	r1, r1
    2856:	ea cf       	rjmp	.-44     	; 0x282c <__fp_szero>

00002858 <__mulsf3x>:
    2858:	c6 df       	rcall	.-116    	; 0x27e6 <__fp_split3>
    285a:	a0 f3       	brcs	.-24     	; 0x2844 <__mulsf3+0x4>

0000285c <__mulsf3_pse>:
    285c:	95 9f       	mul	r25, r21
    285e:	d1 f3       	breq	.-12     	; 0x2854 <__mulsf3+0x14>
    2860:	95 0f       	add	r25, r21
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	55 1f       	adc	r21, r21
    2866:	62 9f       	mul	r22, r18
    2868:	f0 01       	movw	r30, r0
    286a:	72 9f       	mul	r23, r18
    286c:	bb 27       	eor	r27, r27
    286e:	f0 0d       	add	r31, r0
    2870:	b1 1d       	adc	r27, r1
    2872:	63 9f       	mul	r22, r19
    2874:	aa 27       	eor	r26, r26
    2876:	f0 0d       	add	r31, r0
    2878:	b1 1d       	adc	r27, r1
    287a:	aa 1f       	adc	r26, r26
    287c:	64 9f       	mul	r22, r20
    287e:	66 27       	eor	r22, r22
    2880:	b0 0d       	add	r27, r0
    2882:	a1 1d       	adc	r26, r1
    2884:	66 1f       	adc	r22, r22
    2886:	82 9f       	mul	r24, r18
    2888:	22 27       	eor	r18, r18
    288a:	b0 0d       	add	r27, r0
    288c:	a1 1d       	adc	r26, r1
    288e:	62 1f       	adc	r22, r18
    2890:	73 9f       	mul	r23, r19
    2892:	b0 0d       	add	r27, r0
    2894:	a1 1d       	adc	r26, r1
    2896:	62 1f       	adc	r22, r18
    2898:	83 9f       	mul	r24, r19
    289a:	a0 0d       	add	r26, r0
    289c:	61 1d       	adc	r22, r1
    289e:	22 1f       	adc	r18, r18
    28a0:	74 9f       	mul	r23, r20
    28a2:	33 27       	eor	r19, r19
    28a4:	a0 0d       	add	r26, r0
    28a6:	61 1d       	adc	r22, r1
    28a8:	23 1f       	adc	r18, r19
    28aa:	84 9f       	mul	r24, r20
    28ac:	60 0d       	add	r22, r0
    28ae:	21 1d       	adc	r18, r1
    28b0:	82 2f       	mov	r24, r18
    28b2:	76 2f       	mov	r23, r22
    28b4:	6a 2f       	mov	r22, r26
    28b6:	11 24       	eor	r1, r1
    28b8:	9f 57       	subi	r25, 0x7F	; 127
    28ba:	50 40       	sbci	r21, 0x00	; 0
    28bc:	8a f0       	brmi	.+34     	; 0x28e0 <__mulsf3_pse+0x84>
    28be:	e1 f0       	breq	.+56     	; 0x28f8 <__mulsf3_pse+0x9c>
    28c0:	88 23       	and	r24, r24
    28c2:	4a f0       	brmi	.+18     	; 0x28d6 <__mulsf3_pse+0x7a>
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	bb 1f       	adc	r27, r27
    28ca:	66 1f       	adc	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	91 50       	subi	r25, 0x01	; 1
    28d2:	50 40       	sbci	r21, 0x00	; 0
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__mulsf3_pse+0x64>
    28d6:	9e 3f       	cpi	r25, 0xFE	; 254
    28d8:	51 05       	cpc	r21, r1
    28da:	70 f0       	brcs	.+28     	; 0x28f8 <__mulsf3_pse+0x9c>
    28dc:	5c cf       	rjmp	.-328    	; 0x2796 <__fp_inf>
    28de:	a6 cf       	rjmp	.-180    	; 0x282c <__fp_szero>
    28e0:	5f 3f       	cpi	r21, 0xFF	; 255
    28e2:	ec f3       	brlt	.-6      	; 0x28de <__mulsf3_pse+0x82>
    28e4:	98 3e       	cpi	r25, 0xE8	; 232
    28e6:	dc f3       	brlt	.-10     	; 0x28de <__mulsf3_pse+0x82>
    28e8:	86 95       	lsr	r24
    28ea:	77 95       	ror	r23
    28ec:	67 95       	ror	r22
    28ee:	b7 95       	ror	r27
    28f0:	f7 95       	ror	r31
    28f2:	e7 95       	ror	r30
    28f4:	9f 5f       	subi	r25, 0xFF	; 255
    28f6:	c1 f7       	brne	.-16     	; 0x28e8 <__mulsf3_pse+0x8c>
    28f8:	fe 2b       	or	r31, r30
    28fa:	88 0f       	add	r24, r24
    28fc:	91 1d       	adc	r25, r1
    28fe:	96 95       	lsr	r25
    2900:	87 95       	ror	r24
    2902:	97 f9       	bld	r25, 7
    2904:	08 95       	ret

00002906 <__mulsi3>:
    2906:	62 9f       	mul	r22, r18
    2908:	d0 01       	movw	r26, r0
    290a:	73 9f       	mul	r23, r19
    290c:	f0 01       	movw	r30, r0
    290e:	82 9f       	mul	r24, r18
    2910:	e0 0d       	add	r30, r0
    2912:	f1 1d       	adc	r31, r1
    2914:	64 9f       	mul	r22, r20
    2916:	e0 0d       	add	r30, r0
    2918:	f1 1d       	adc	r31, r1
    291a:	92 9f       	mul	r25, r18
    291c:	f0 0d       	add	r31, r0
    291e:	83 9f       	mul	r24, r19
    2920:	f0 0d       	add	r31, r0
    2922:	74 9f       	mul	r23, r20
    2924:	f0 0d       	add	r31, r0
    2926:	65 9f       	mul	r22, r21
    2928:	f0 0d       	add	r31, r0
    292a:	99 27       	eor	r25, r25
    292c:	72 9f       	mul	r23, r18
    292e:	b0 0d       	add	r27, r0
    2930:	e1 1d       	adc	r30, r1
    2932:	f9 1f       	adc	r31, r25
    2934:	63 9f       	mul	r22, r19
    2936:	b0 0d       	add	r27, r0
    2938:	e1 1d       	adc	r30, r1
    293a:	f9 1f       	adc	r31, r25
    293c:	bd 01       	movw	r22, r26
    293e:	cf 01       	movw	r24, r30
    2940:	11 24       	eor	r1, r1
    2942:	08 95       	ret

00002944 <__udivmodsi4>:
    2944:	a1 e2       	ldi	r26, 0x21	; 33
    2946:	1a 2e       	mov	r1, r26
    2948:	aa 1b       	sub	r26, r26
    294a:	bb 1b       	sub	r27, r27
    294c:	fd 01       	movw	r30, r26
    294e:	0d c0       	rjmp	.+26     	; 0x296a <__udivmodsi4_ep>

00002950 <__udivmodsi4_loop>:
    2950:	aa 1f       	adc	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	ee 1f       	adc	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	a2 17       	cp	r26, r18
    295a:	b3 07       	cpc	r27, r19
    295c:	e4 07       	cpc	r30, r20
    295e:	f5 07       	cpc	r31, r21
    2960:	20 f0       	brcs	.+8      	; 0x296a <__udivmodsi4_ep>
    2962:	a2 1b       	sub	r26, r18
    2964:	b3 0b       	sbc	r27, r19
    2966:	e4 0b       	sbc	r30, r20
    2968:	f5 0b       	sbc	r31, r21

0000296a <__udivmodsi4_ep>:
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	1a 94       	dec	r1
    2974:	69 f7       	brne	.-38     	; 0x2950 <__udivmodsi4_loop>
    2976:	60 95       	com	r22
    2978:	70 95       	com	r23
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	bd 01       	movw	r22, r26
    2984:	cf 01       	movw	r24, r30
    2986:	08 95       	ret

00002988 <_exit>:
    2988:	f8 94       	cli

0000298a <__stop_program>:
    298a:	ff cf       	rjmp	.-2      	; 0x298a <__stop_program>
