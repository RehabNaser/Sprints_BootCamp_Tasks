
ReceiverApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001b32  00001bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  008000b6  008000b6  00001c1c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002370  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027c1  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001039  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d80  00000000  00000000  00006844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e16  00000000  00000000  000075c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027e3  00000000  00000000  000083da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__vector_1>
       8:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_2>
       c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_3>
      10:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_4>
      14:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_5>
      18:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_6>
      1c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_7>
      20:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_8>
      24:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_9>
      28:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_10>
      2c:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_11>
      30:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_12>
      34:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_13>
      38:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_14>
      3c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_15>
      40:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_16>
      44:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_17>
      48:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_18>
      4c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_19>
      50:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <main>
      8a:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_UART_TXCBF>:
																};//This arr stores the size of every element of the packet
static ptr_STR_BCMTask_t aptr_Task[COMM_NUMBERS]={NULL_PTR,NULL_PTR,NULL_PTR};//This arr stores pointers to tasks structure
/*- LOCAL FUNCTIONS IMPLEMENTATION------------------------*/
static void BCM_UART_TXCBF(void)
{
    aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      92:	e0 91 b7 00 	lds	r30, 0x00B7
      96:	f0 91 b8 00 	lds	r31, 0x00B8
      9a:	82 e0       	ldi	r24, 0x02	; 2
      9c:	83 83       	std	Z+3, r24	; 0x03
    //BCM_SetState(COMM_UART_CH,BCM_TXSTATE_SENDING);
}
      9e:	08 95       	ret

000000a0 <BCM_SPI_TXCBF>:

static void BCM_SPI_TXCBF(void)
{
    aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      a0:	e0 91 b9 00 	lds	r30, 0x00B9
      a4:	f0 91 ba 00 	lds	r31, 0x00BA
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	83 83       	std	Z+3, r24	; 0x03
    //BCM_SetState(COMM_SPI_CH,BCM_TXSTATE_SENDING);
}
      ac:	08 95       	ret

000000ae <BCM_I2C_TXCBF>:

static void BCM_I2C_TXCBF(void)
{
    aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      ae:	e0 91 bb 00 	lds	r30, 0x00BB
      b2:	f0 91 bc 00 	lds	r31, 0x00BC
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	83 83       	std	Z+3, r24	; 0x03
    //BCM_SetState(COMM_I2C_CH,BCM_TXSTATE_SENDING);
}
      ba:	08 95       	ret

000000bc <BCM_UART_RXCBF>:

static void BCM_UART_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_UART_CH]->u8_BCMState)
      bc:	e0 91 b7 00 	lds	r30, 0x00B7
      c0:	f0 91 b8 00 	lds	r31, 0x00B8
      c4:	93 81       	ldd	r25, Z+3	; 0x03
      c6:	91 30       	cpi	r25, 0x01	; 1
      c8:	21 f0       	breq	.+8      	; 0xd2 <BCM_UART_RXCBF+0x16>
      ca:	93 30       	cpi	r25, 0x03	; 3
      cc:	09 f0       	breq	.+2      	; 0xd0 <BCM_UART_RXCBF+0x14>
      ce:	5b c0       	rjmp	.+182    	; 0x186 <BCM_UART_RXCBF+0xca>
      d0:	3e c0       	rjmp	.+124    	; 0x14e <BCM_UART_RXCBF+0x92>
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter]=Data;
      d2:	a4 81       	ldd	r26, Z+4	; 0x04
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	aa 0f       	add	r26, r26
      d8:	bb 1f       	adc	r27, r27
      da:	a0 54       	subi	r26, 0x40	; 64
      dc:	bf 4f       	sbci	r27, 0xFF	; 255
      de:	4d 91       	ld	r20, X+
      e0:	5c 91       	ld	r21, X
      e2:	25 81       	ldd	r18, Z+5	; 0x05
      e4:	36 81       	ldd	r19, Z+6	; 0x06
      e6:	fa 01       	movw	r30, r20
      e8:	e2 0f       	add	r30, r18
      ea:	f3 1f       	adc	r31, r19
      ec:	80 83       	st	Z, r24

            (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)++;
      ee:	e0 91 b7 00 	lds	r30, 0x00B7
      f2:	f0 91 b8 00 	lds	r31, 0x00B8
      f6:	85 81       	ldd	r24, Z+5	; 0x05
      f8:	96 81       	ldd	r25, Z+6	; 0x06
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	96 83       	std	Z+6, r25	; 0x06
      fe:	85 83       	std	Z+5, r24	; 0x05
			}
			else
			{
				/*Do Nothing*/
			}
            if((au16_Packet_sizes[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter))
     100:	44 81       	ldd	r20, Z+4	; 0x04
     102:	a4 2f       	mov	r26, r20
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	aa 0f       	add	r26, r26
     108:	bb 1f       	adc	r27, r27
     10a:	a0 5a       	subi	r26, 0xA0	; 160
     10c:	bf 4f       	sbci	r27, 0xFF	; 255
     10e:	2d 91       	ld	r18, X+
     110:	3c 91       	ld	r19, X
     112:	11 97       	sbiw	r26, 0x01	; 1
     114:	82 17       	cp	r24, r18
     116:	93 07       	cpc	r25, r19
     118:	b1 f5       	brne	.+108    	; 0x186 <BCM_UART_RXCBF+0xca>
            {
                (aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter)++;
     11a:	4f 5f       	subi	r20, 0xFF	; 255
     11c:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)=ZERO;
     11e:	16 82       	std	Z+6, r1	; 0x06
     120:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     122:	44 30       	cpi	r20, 0x04	; 4
     124:	19 f4       	brne	.+6      	; 0x12c <BCM_UART_RXCBF+0x70>
                {
                    aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_RXSTATE_CS;
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	83 83       	std	Z+3, r24	; 0x03
     12a:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     12c:	42 30       	cpi	r20, 0x02	; 2
     12e:	59 f5       	brne	.+86     	; 0x186 <BCM_UART_RXCBF+0xca>
                {
                    if( (au16_Packet_sizes[COMM_UART_CH][DATA_INDEX]) > (aptr_Task[COMM_UART_CH]->u16_BCMSize) )
     130:	80 91 64 00 	lds	r24, 0x0064
     134:	90 91 65 00 	lds	r25, 0x0065
     138:	27 81       	ldd	r18, Z+7	; 0x07
     13a:	30 85       	ldd	r19, Z+8	; 0x08
     13c:	28 17       	cp	r18, r24
     13e:	39 07       	cpc	r19, r25
     140:	18 f4       	brcc	.+6      	; 0x148 <BCM_UART_RXCBF+0x8c>
                    {
                        aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	83 83       	std	Z+3, r24	; 0x03
     146:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_UART_CH]->u16_BCMSize=au16_Packet_sizes[COMM_UART_CH][DATA_INDEX];
     148:	90 87       	std	Z+8, r25	; 0x08
     14a:	87 83       	std	Z+7, r24	; 0x07
     14c:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)++;
     14e:	85 81       	ldd	r24, Z+5	; 0x05
     150:	96 81       	ldd	r25, Z+6	; 0x06
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	96 83       	std	Z+6, r25	; 0x06
     156:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter))
     158:	44 81       	ldd	r20, Z+4	; 0x04
     15a:	a4 2f       	mov	r26, r20
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	aa 0f       	add	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	a0 5a       	subi	r26, 0xA0	; 160
     164:	bf 4f       	sbci	r27, 0xFF	; 255
     166:	2d 91       	ld	r18, X+
     168:	3c 91       	ld	r19, X
     16a:	11 97       	sbiw	r26, 0x01	; 1
     16c:	82 17       	cp	r24, r18
     16e:	93 07       	cpc	r25, r19
     170:	51 f4       	brne	.+20     	; 0x186 <BCM_UART_RXCBF+0xca>
            {
                (aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter)++;
     172:	4f 5f       	subi	r20, 0xFF	; 255
     174:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)=ZERO;
     176:	16 82       	std	Z+6, r1	; 0x06
     178:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     17a:	44 30       	cpi	r20, 0x04	; 4
     17c:	21 f4       	brne	.+8      	; 0x186 <BCM_UART_RXCBF+0xca>
                {
                    aptr_Task[COMM_UART_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_UART_CH]=NOT_INIT;
     182:	10 92 bd 00 	sts	0x00BD, r1
     186:	08 95       	ret

00000188 <BCM_SPI_RXCBF>:
}

static void BCM_SPI_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_SPI_CH]->u8_BCMState)
     188:	e0 91 b9 00 	lds	r30, 0x00B9
     18c:	f0 91 ba 00 	lds	r31, 0x00BA
     190:	93 81       	ldd	r25, Z+3	; 0x03
     192:	91 30       	cpi	r25, 0x01	; 1
     194:	21 f0       	breq	.+8      	; 0x19e <BCM_SPI_RXCBF+0x16>
     196:	93 30       	cpi	r25, 0x03	; 3
     198:	09 f0       	breq	.+2      	; 0x19c <BCM_SPI_RXCBF+0x14>
     19a:	5b c0       	rjmp	.+182    	; 0x252 <BCM_SPI_RXCBF+0xca>
     19c:	3e c0       	rjmp	.+124    	; 0x21a <BCM_SPI_RXCBF+0x92>
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter]=Data;
     19e:	a4 81       	ldd	r26, Z+4	; 0x04
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	aa 0f       	add	r26, r26
     1a4:	bb 1f       	adc	r27, r27
     1a6:	a8 53       	subi	r26, 0x38	; 56
     1a8:	bf 4f       	sbci	r27, 0xFF	; 255
     1aa:	4d 91       	ld	r20, X+
     1ac:	5c 91       	ld	r21, X
     1ae:	25 81       	ldd	r18, Z+5	; 0x05
     1b0:	36 81       	ldd	r19, Z+6	; 0x06
     1b2:	fa 01       	movw	r30, r20
     1b4:	e2 0f       	add	r30, r18
     1b6:	f3 1f       	adc	r31, r19
     1b8:	80 83       	st	Z, r24

            (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)++;
     1ba:	e0 91 b9 00 	lds	r30, 0x00B9
     1be:	f0 91 ba 00 	lds	r31, 0x00BA
     1c2:	85 81       	ldd	r24, Z+5	; 0x05
     1c4:	96 81       	ldd	r25, Z+6	; 0x06
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	96 83       	std	Z+6, r25	; 0x06
     1ca:	85 83       	std	Z+5, r24	; 0x05
			}
			else
			{
				/*Do Nothing*/
			}
            if((au16_Packet_sizes[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter))
     1cc:	44 81       	ldd	r20, Z+4	; 0x04
     1ce:	a4 2f       	mov	r26, r20
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	aa 0f       	add	r26, r26
     1d4:	bb 1f       	adc	r27, r27
     1d6:	a8 59       	subi	r26, 0x98	; 152
     1d8:	bf 4f       	sbci	r27, 0xFF	; 255
     1da:	2d 91       	ld	r18, X+
     1dc:	3c 91       	ld	r19, X
     1de:	11 97       	sbiw	r26, 0x01	; 1
     1e0:	82 17       	cp	r24, r18
     1e2:	93 07       	cpc	r25, r19
     1e4:	b1 f5       	brne	.+108    	; 0x252 <BCM_SPI_RXCBF+0xca>
            {
                (aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter)++;
     1e6:	4f 5f       	subi	r20, 0xFF	; 255
     1e8:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)=ZERO;
     1ea:	16 82       	std	Z+6, r1	; 0x06
     1ec:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     1ee:	44 30       	cpi	r20, 0x04	; 4
     1f0:	19 f4       	brne	.+6      	; 0x1f8 <BCM_SPI_RXCBF+0x70>
                {
                    aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_RXSTATE_CS;
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	83 83       	std	Z+3, r24	; 0x03
     1f6:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     1f8:	42 30       	cpi	r20, 0x02	; 2
     1fa:	59 f5       	brne	.+86     	; 0x252 <BCM_SPI_RXCBF+0xca>
                {
                    if(au16_Packet_sizes[COMM_SPI_CH][DATA_INDEX]>aptr_Task[COMM_SPI_CH]->u16_BCMSize)
     1fc:	80 91 6c 00 	lds	r24, 0x006C
     200:	90 91 6d 00 	lds	r25, 0x006D
     204:	27 81       	ldd	r18, Z+7	; 0x07
     206:	30 85       	ldd	r19, Z+8	; 0x08
     208:	28 17       	cp	r18, r24
     20a:	39 07       	cpc	r19, r25
     20c:	18 f4       	brcc	.+6      	; 0x214 <BCM_SPI_RXCBF+0x8c>
                    {
                        aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	83 83       	std	Z+3, r24	; 0x03
     212:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_SPI_CH]->u16_BCMSize=au16_Packet_sizes[COMM_SPI_CH][DATA_INDEX];
     214:	90 87       	std	Z+8, r25	; 0x08
     216:	87 83       	std	Z+7, r24	; 0x07
     218:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)++;
     21a:	85 81       	ldd	r24, Z+5	; 0x05
     21c:	96 81       	ldd	r25, Z+6	; 0x06
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	96 83       	std	Z+6, r25	; 0x06
     222:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter))
     224:	44 81       	ldd	r20, Z+4	; 0x04
     226:	a4 2f       	mov	r26, r20
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	aa 0f       	add	r26, r26
     22c:	bb 1f       	adc	r27, r27
     22e:	a8 59       	subi	r26, 0x98	; 152
     230:	bf 4f       	sbci	r27, 0xFF	; 255
     232:	2d 91       	ld	r18, X+
     234:	3c 91       	ld	r19, X
     236:	11 97       	sbiw	r26, 0x01	; 1
     238:	82 17       	cp	r24, r18
     23a:	93 07       	cpc	r25, r19
     23c:	51 f4       	brne	.+20     	; 0x252 <BCM_SPI_RXCBF+0xca>
            {
                (aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter)++;
     23e:	4f 5f       	subi	r20, 0xFF	; 255
     240:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)=ZERO;
     242:	16 82       	std	Z+6, r1	; 0x06
     244:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     246:	44 30       	cpi	r20, 0x04	; 4
     248:	21 f4       	brne	.+8      	; 0x252 <BCM_SPI_RXCBF+0xca>
                {
                    aptr_Task[COMM_SPI_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_SPI_CH]=NOT_INIT;
     24e:	10 92 be 00 	sts	0x00BE, r1
     252:	08 95       	ret

00000254 <BCM_I2C_RXCBF>:
}

static void BCM_I2C_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_I2C_CH]->u8_BCMState)
     254:	e0 91 bb 00 	lds	r30, 0x00BB
     258:	f0 91 bc 00 	lds	r31, 0x00BC
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	91 30       	cpi	r25, 0x01	; 1
     260:	21 f0       	breq	.+8      	; 0x26a <BCM_I2C_RXCBF+0x16>
     262:	93 30       	cpi	r25, 0x03	; 3
     264:	09 f0       	breq	.+2      	; 0x268 <BCM_I2C_RXCBF+0x14>
     266:	7a c0       	rjmp	.+244    	; 0x35c <BCM_I2C_RXCBF+0x108>
     268:	4e c0       	rjmp	.+156    	; 0x306 <BCM_I2C_RXCBF+0xb2>
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter]=Data;
     26a:	a4 81       	ldd	r26, Z+4	; 0x04
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	aa 0f       	add	r26, r26
     270:	bb 1f       	adc	r27, r27
     272:	a0 53       	subi	r26, 0x30	; 48
     274:	bf 4f       	sbci	r27, 0xFF	; 255
     276:	4d 91       	ld	r20, X+
     278:	5c 91       	ld	r21, X
     27a:	25 81       	ldd	r18, Z+5	; 0x05
     27c:	36 81       	ldd	r19, Z+6	; 0x06
     27e:	fa 01       	movw	r30, r20
     280:	e2 0f       	add	r30, r18
     282:	f3 1f       	adc	r31, r19
     284:	80 83       	st	Z, r24

            (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)++;
     286:	e0 91 bb 00 	lds	r30, 0x00BB
     28a:	f0 91 bc 00 	lds	r31, 0x00BC
     28e:	85 81       	ldd	r24, Z+5	; 0x05
     290:	96 81       	ldd	r25, Z+6	; 0x06
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	96 83       	std	Z+6, r25	; 0x06
     296:	85 83       	std	Z+5, r24	; 0x05
			}
			else
			{
				/*Do Nothing*/
			}
            if((au16_Packet_sizes[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter))
     298:	e0 91 bb 00 	lds	r30, 0x00BB
     29c:	f0 91 bc 00 	lds	r31, 0x00BC
     2a0:	44 81       	ldd	r20, Z+4	; 0x04
     2a2:	a4 2f       	mov	r26, r20
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	aa 0f       	add	r26, r26
     2a8:	bb 1f       	adc	r27, r27
     2aa:	a0 59       	subi	r26, 0x90	; 144
     2ac:	bf 4f       	sbci	r27, 0xFF	; 255
     2ae:	2d 91       	ld	r18, X+
     2b0:	3c 91       	ld	r19, X
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	85 81       	ldd	r24, Z+5	; 0x05
     2b6:	96 81       	ldd	r25, Z+6	; 0x06
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <BCM_I2C_RXCBF+0x6c>
     2be:	4e c0       	rjmp	.+156    	; 0x35c <BCM_I2C_RXCBF+0x108>
            {
                (aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter)++;
     2c0:	4f 5f       	subi	r20, 0xFF	; 255
     2c2:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)=ZERO;
     2c4:	e0 91 bb 00 	lds	r30, 0x00BB
     2c8:	f0 91 bc 00 	lds	r31, 0x00BC
     2cc:	16 82       	std	Z+6, r1	; 0x06
     2ce:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter);
     2d0:	e0 91 bb 00 	lds	r30, 0x00BB
     2d4:	f0 91 bc 00 	lds	r31, 0x00BC
     2d8:	84 81       	ldd	r24, Z+4	; 0x04
                if(PACKET_SIZE==u8_FrameCounter)
     2da:	84 30       	cpi	r24, 0x04	; 4
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <BCM_I2C_RXCBF+0x90>
                {
                    aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_RXSTATE_CS;
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	83 83       	std	Z+3, r24	; 0x03
     2e2:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	d1 f5       	brne	.+116    	; 0x35c <BCM_I2C_RXCBF+0x108>
                {
                    if(au16_Packet_sizes[COMM_I2C_CH][DATA_INDEX]>aptr_Task[COMM_I2C_CH]->u16_BCMSize)
     2e8:	80 91 74 00 	lds	r24, 0x0074
     2ec:	90 91 75 00 	lds	r25, 0x0075
     2f0:	27 81       	ldd	r18, Z+7	; 0x07
     2f2:	30 85       	ldd	r19, Z+8	; 0x08
     2f4:	28 17       	cp	r18, r24
     2f6:	39 07       	cpc	r19, r25
     2f8:	18 f4       	brcc	.+6      	; 0x300 <BCM_I2C_RXCBF+0xac>
                    {
                        aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	83 83       	std	Z+3, r24	; 0x03
     2fe:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_I2C_CH]->u16_BCMSize=au16_Packet_sizes[COMM_I2C_CH][DATA_INDEX];
     300:	90 87       	std	Z+8, r25	; 0x08
     302:	87 83       	std	Z+7, r24	; 0x07
     304:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)++;
     306:	85 81       	ldd	r24, Z+5	; 0x05
     308:	96 81       	ldd	r25, Z+6	; 0x06
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	96 83       	std	Z+6, r25	; 0x06
     30e:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter))
     310:	e0 91 bb 00 	lds	r30, 0x00BB
     314:	f0 91 bc 00 	lds	r31, 0x00BC
     318:	44 81       	ldd	r20, Z+4	; 0x04
     31a:	a4 2f       	mov	r26, r20
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	aa 0f       	add	r26, r26
     320:	bb 1f       	adc	r27, r27
     322:	a0 59       	subi	r26, 0x90	; 144
     324:	bf 4f       	sbci	r27, 0xFF	; 255
     326:	2d 91       	ld	r18, X+
     328:	3c 91       	ld	r19, X
     32a:	11 97       	sbiw	r26, 0x01	; 1
     32c:	85 81       	ldd	r24, Z+5	; 0x05
     32e:	96 81       	ldd	r25, Z+6	; 0x06
     330:	28 17       	cp	r18, r24
     332:	39 07       	cpc	r19, r25
     334:	99 f4       	brne	.+38     	; 0x35c <BCM_I2C_RXCBF+0x108>
            {
                (aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter)++;
     336:	4f 5f       	subi	r20, 0xFF	; 255
     338:	44 83       	std	Z+4, r20	; 0x04
                (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)=ZERO;
     33a:	e0 91 bb 00 	lds	r30, 0x00BB
     33e:	f0 91 bc 00 	lds	r31, 0x00BC
     342:	16 82       	std	Z+6, r1	; 0x06
     344:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter);
     346:	e0 91 bb 00 	lds	r30, 0x00BB
     34a:	f0 91 bc 00 	lds	r31, 0x00BC
                if(PACKET_SIZE==u8_FrameCounter)
     34e:	84 81       	ldd	r24, Z+4	; 0x04
     350:	84 30       	cpi	r24, 0x04	; 4
     352:	21 f4       	brne	.+8      	; 0x35c <BCM_I2C_RXCBF+0x108>
                {
                    aptr_Task[COMM_I2C_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_I2C_CH]=NOT_INIT;
     358:	10 92 bf 00 	sts	0x00BF, r1
     35c:	08 95       	ret

0000035e <BCM_InitPacket>:
    }
    /*Return state */
    return u8_ErrorState;
}
static ERROR_STATE_t BCM_InitPacket(uint8_t COMM_ID,uint8_t COMM_Mode)
{
     35e:	28 2f       	mov	r18, r24
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
    if(COMM_ID>=COMM_NUMBERS)
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	08 f0       	brcs	.+2      	; 0x366 <BCM_InitPacket+0x8>
     364:	59 c0       	rjmp	.+178    	; 0x418 <BCM_InitPacket+0xba>
    {
        u8_ErrorState = ERROR_NOK;
    }
    else
    {
        switch(COMM_Mode)
     366:	66 23       	and	r22, r22
     368:	11 f1       	breq	.+68     	; 0x3ae <BCM_InitPacket+0x50>
     36a:	61 30       	cpi	r22, 0x01	; 1
     36c:	99 f5       	brne	.+102    	; 0x3d4 <BCM_InitPacket+0x76>
        {
            case BCM_MODE_TX:
                aptr_Packet[COMM_ID][SIZE_INDEX]=(ptr_uint8_t)&(aptr_Task[COMM_ID]->u16_BCMSize);
     36e:	48 2f       	mov	r20, r24
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	fa 01       	movw	r30, r20
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	e9 54       	subi	r30, 0x49	; 73
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	a0 81       	ld	r26, Z
     37e:	b1 81       	ldd	r27, Z+1	; 0x01
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	44 0f       	add	r20, r20
     38a:	55 1f       	adc	r21, r21
     38c:	fa 01       	movw	r30, r20
     38e:	e0 54       	subi	r30, 0x40	; 64
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	cd 01       	movw	r24, r26
     394:	07 96       	adiw	r24, 0x07	; 7
     396:	93 83       	std	Z+3, r25	; 0x03
     398:	82 83       	std	Z+2, r24	; 0x02
                au16_Packet_sizes[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->u16_BCMSize;
     39a:	17 96       	adiw	r26, 0x07	; 7
     39c:	8d 91       	ld	r24, X+
     39e:	9c 91       	ld	r25, X
     3a0:	18 97       	sbiw	r26, 0x08	; 8
     3a2:	40 5a       	subi	r20, 0xA0	; 160
     3a4:	5f 4f       	sbci	r21, 0xFF	; 255
     3a6:	fa 01       	movw	r30, r20
     3a8:	95 83       	std	Z+5, r25	; 0x05
     3aa:	84 83       	std	Z+4, r24	; 0x04
                break;
     3ac:	13 c0       	rjmp	.+38     	; 0x3d4 <BCM_InitPacket+0x76>
            case BCM_MODE_RX:
                aptr_Packet[COMM_ID][SIZE_INDEX]=(ptr_uint8_t)&(au16_Packet_sizes[COMM_ID][DATA_INDEX]);
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	ac 01       	movw	r20, r24
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	fa 01       	movw	r30, r20
     3c0:	e0 54       	subi	r30, 0x40	; 64
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	4c 59       	subi	r20, 0x9C	; 156
     3c6:	5f 4f       	sbci	r21, 0xFF	; 255
     3c8:	53 83       	std	Z+3, r21	; 0x03
     3ca:	42 83       	std	Z+2, r20	; 0x02
				gau8_CSTemp[COMM_ID]=ZERO;
     3cc:	88 52       	subi	r24, 0x28	; 40
     3ce:	9f 4f       	sbci	r25, 0xFF	; 255
     3d0:	fc 01       	movw	r30, r24
     3d2:	10 82       	st	Z, r1
                break;
            default:
                break;

        }
        aptr_Packet[COMM_ID][CMD_INDEX]=&aptr_Task[COMM_ID]->u8_BCMID;
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	ee 0f       	add	r30, r30
     3da:	ff 1f       	adc	r31, r31
     3dc:	e9 54       	subi	r30, 0x49	; 73
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	01 90       	ld	r0, Z+
     3e2:	f0 81       	ld	r31, Z
     3e4:	e0 2d       	mov	r30, r0
     3e6:	d9 01       	movw	r26, r18
     3e8:	aa 0f       	add	r26, r26
     3ea:	bb 1f       	adc	r27, r27
     3ec:	aa 0f       	add	r26, r26
     3ee:	bb 1f       	adc	r27, r27
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	a0 54       	subi	r26, 0x40	; 64
     3f6:	bf 4f       	sbci	r27, 0xFF	; 255
     3f8:	11 96       	adiw	r26, 0x01	; 1
     3fa:	fc 93       	st	X, r31
     3fc:	ee 93       	st	-X, r30
        aptr_Packet[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->ptr_BCMBuffer;
     3fe:	81 85       	ldd	r24, Z+9	; 0x09
     400:	92 85       	ldd	r25, Z+10	; 0x0a
     402:	15 96       	adiw	r26, 0x05	; 5
     404:	9c 93       	st	X, r25
     406:	8e 93       	st	-X, r24
     408:	14 97       	sbiw	r26, 0x04	; 4
        aptr_Packet[COMM_ID][CS_INDEX]=&(aptr_Task[COMM_ID]->u8_BCMCS);
     40a:	32 96       	adiw	r30, 0x02	; 2
     40c:	17 96       	adiw	r26, 0x07	; 7
     40e:	fc 93       	st	X, r31
     410:	ee 93       	st	-X, r30
     412:	16 97       	sbiw	r26, 0x06	; 6
    /*Return state */
    return u8_ErrorState;
}
static ERROR_STATE_t BCM_InitPacket(uint8_t COMM_ID,uint8_t COMM_Mode)
{
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret
    if(COMM_ID>=COMM_NUMBERS)
    {
        u8_ErrorState = ERROR_NOK;
     418:	81 e0       	ldi	r24, 0x01	; 1
        aptr_Packet[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->ptr_BCMBuffer;
        aptr_Packet[COMM_ID][CS_INDEX]=&(aptr_Task[COMM_ID]->u8_BCMCS);

    }
    return u8_ErrorState;
}
     41a:	08 95       	ret

0000041c <BCM_Init>:
            break;
    }
}

static ERROR_STATE_t BCM_Init(void)
{
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
    /*Check if the BCM had been init before*/
    if(NOT_INIT==IsInit)
     42a:	80 91 b6 00 	lds	r24, 0x00B6
     42e:	88 23       	and	r24, r24
     430:	09 f0       	breq	.+2      	; 0x434 <BCM_Init+0x18>
     432:	51 c0       	rjmp	.+162    	; 0x4d6 <BCM_Init+0xba>
     434:	0f 2e       	mov	r0, r31
     436:	f0 ea       	ldi	r31, 0xA0	; 160
     438:	cf 2e       	mov	r12, r31
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	df 2e       	mov	r13, r31
     43e:	f0 2d       	mov	r31, r0
     440:	0f 2e       	mov	r0, r31
     442:	f7 eb       	ldi	r31, 0xB7	; 183
     444:	ef 2e       	mov	r14, r31
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	ff 2e       	mov	r15, r31
     44a:	f0 2d       	mov	r31, r0
     44c:	c0 e0       	ldi	r28, 0x00	; 0
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	1c 2f       	mov	r17, r28
        uint8_t InitCounter;
        /*This for loop to init all the used comm channel */
        for(InitCounter=ZERO;InitCounter<COMM_NUMBERS;InitCounter++)
        {
            /*Check if the the channel is enabled*/
            if(ENABLE==au8_BCM_UsedCH[InitCounter])
     452:	f6 01       	movw	r30, r12
     454:	81 91       	ld	r24, Z+
     456:	6f 01       	movw	r12, r30
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	91 f4       	brne	.+36     	; 0x480 <BCM_Init+0x64>
            {
                /*Init the comm channel */
                while(ERROR_OK!=COMMProxy_Init(InitCounter));
     45c:	81 2f       	mov	r24, r17
     45e:	0e 94 38 05 	call	0xa70	; 0xa70 <COMMProxy_Init>
     462:	88 23       	and	r24, r24
     464:	d9 f7       	brne	.-10     	; 0x45c <BCM_Init+0x40>
                if(NULL_PTR==aptr_Task[InitCounter])
     466:	f7 01       	movw	r30, r14
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	00 97       	sbiw	r24, 0x00	; 0
     46e:	41 f4       	brne	.+16     	; 0x480 <BCM_Init+0x64>
                {
                    /*Assign the address of the task structure to the pointer*/
                    /*IF YES MAKE IT POINT TO THE TASK*/
                    BCM_Get(InitCounter,&aptr_Task[InitCounter]);
     470:	be 01       	movw	r22, r28
     472:	66 0f       	add	r22, r22
     474:	77 1f       	adc	r23, r23
     476:	69 54       	subi	r22, 0x49	; 73
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	81 2f       	mov	r24, r17
     47c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <BCM_Get>
     480:	21 96       	adiw	r28, 0x01	; 1
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	e8 0e       	add	r14, r24
     488:	f9 1e       	adc	r15, r25
    /*Check if the BCM had been init before*/
    if(NOT_INIT==IsInit)
    {
        uint8_t InitCounter;
        /*This for loop to init all the used comm channel */
        for(InitCounter=ZERO;InitCounter<COMM_NUMBERS;InitCounter++)
     48a:	c3 30       	cpi	r28, 0x03	; 3
     48c:	d1 05       	cpc	r29, r1
     48e:	01 f7       	brne	.-64     	; 0x450 <BCM_Init+0x34>
            {
                //DO NOTHING
            }
        }
        /*set call back functions*/
        COMMProxy_SetTxCallback(COMM_UART_CH,BCM_UART_TXCBF);
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	69 e4       	ldi	r22, 0x49	; 73
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	0e 94 c2 05 	call	0xb84	; 0xb84 <COMMProxy_SetTxCallback>
        COMMProxy_SetTxCallback(COMM_SPI_CH,BCM_SPI_TXCBF);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	60 e5       	ldi	r22, 0x50	; 80
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	0e 94 c2 05 	call	0xb84	; 0xb84 <COMMProxy_SetTxCallback>
		COMMProxy_SetTxCallback(COMM_I2C_CH,BCM_I2C_TXCBF);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	67 e5       	ldi	r22, 0x57	; 87
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 c2 05 	call	0xb84	; 0xb84 <COMMProxy_SetTxCallback>

        COMMProxy_SetRxCallback(COMM_UART_CH,BCM_UART_RXCBF);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	6e e5       	ldi	r22, 0x5E	; 94
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <COMMProxy_SetRxCallback>
        COMMProxy_SetRxCallback(COMM_SPI_CH,BCM_SPI_RXCBF);
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	64 ec       	ldi	r22, 0xC4	; 196
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 d5 05 	call	0xbaa	; 0xbaa <COMMProxy_SetRxCallback>
		COMMProxy_SetRxCallback(COMM_I2C_CH,BCM_I2C_RXCBF);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	6a e2       	ldi	r22, 0x2A	; 42
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <COMMProxy_SetRxCallback>
        /*set the init flag*/
        IsInit=INIT;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 b6 00 	sts	0x00B6, r24
    }
}

static ERROR_STATE_t BCM_Init(void)
{
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <BCM_Init+0xbc>
        /*set the init flag*/
        IsInit=INIT;
    }
    else
    {
        u8_ErrorState=ERROR_NOK;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
    }
    /*Return state */
    return u8_ErrorState;
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	08 95       	ret

000004e8 <BCM_TxMainFunction>:
    }
    return u8_ErrorState;
}
/*- APIs IMPLEMENTATION-----------------------------------*/
extern void BCM_TxMainFunction(void)
{
     4e8:	2f 92       	push	r2
     4ea:	3f 92       	push	r3
     4ec:	4f 92       	push	r4
     4ee:	5f 92       	push	r5
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	00 d0       	rcall	.+0      	; 0x50e <BCM_TxMainFunction+0x26>
     50e:	00 d0       	rcall	.+0      	; 0x510 <BCM_TxMainFunction+0x28>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8_ChCounter=ZERO;
    if(NOT_INIT==IsInit)
     514:	80 91 b6 00 	lds	r24, 0x00B6
     518:	88 23       	and	r24, r24
     51a:	11 f4       	brne	.+4      	; 0x520 <BCM_TxMainFunction+0x38>
    {
       BCM_Init();
     51c:	0e 94 0e 02 	call	0x41c	; 0x41c <BCM_Init>
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     520:	80 91 b6 00 	lds	r24, 0x00B6
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	09 f0       	breq	.+2      	; 0x52a <BCM_TxMainFunction+0x42>
     528:	a5 c0       	rjmp	.+330    	; 0x674 <BCM_TxMainFunction+0x18c>
     52a:	0f 2e       	mov	r0, r31
     52c:	f0 ea       	ldi	r31, 0xA0	; 160
     52e:	8f 2e       	mov	r8, r31
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	9f 2e       	mov	r9, r31
     534:	f0 2d       	mov	r31, r0
     536:	07 eb       	ldi	r16, 0xB7	; 183
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	0f 2e       	mov	r0, r31
     53c:	fd eb       	ldi	r31, 0xBD	; 189
     53e:	cf 2e       	mov	r12, r31
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	df 2e       	mov	r13, r31
     544:	f0 2d       	mov	r31, r0
     546:	1c 82       	std	Y+4, r1	; 0x04
     548:	1b 82       	std	Y+3, r1	; 0x03
                    }
                    switch (aptr_Task[u8_ChCounter]->u8_BCMState)
                    {
                        case BCM_TXSTATE_SENDING:
                            //SEND PACKET(COMMAND,SIZE,DATA,SC)
                            aptr_Task[u8_ChCounter]->u8_BCMState=BCM_TXSTATE_PENDING;
     54a:	aa 24       	eor	r10, r10
     54c:	a3 94       	inc	r10
							COMMProxy_Send(u8_ChCounter,(aptr_Packet[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])[aptr_Task[u8_ChCounter]->u16_BCMByteCoounter]);
     54e:	0f 2e       	mov	r0, r31
     550:	f0 ec       	ldi	r31, 0xC0	; 192
     552:	4f 2e       	mov	r4, r31
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	5f 2e       	mov	r5, r31
     558:	f0 2d       	mov	r31, r0
                            (aptr_Task[u8_ChCounter]->u16_BCMByteCoounter)++;
                            if((au16_Packet_sizes[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])==(aptr_Task[u8_ChCounter]->u16_BCMByteCoounter))
     55a:	0f 2e       	mov	r0, r31
     55c:	f0 e6       	ldi	r31, 0x60	; 96
     55e:	2f 2e       	mov	r2, r31
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	3f 2e       	mov	r3, r31
     564:	f0 2d       	mov	r31, r0
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     566:	bb 80       	ldd	r11, Y+3	; 0x03
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
        {
            if(DISABLE==au8_BCM_UsedCH[u8_ChCounter])
     568:	eb 80       	ldd	r14, Y+3	; 0x03
     56a:	fc 80       	ldd	r15, Y+4	; 0x04
     56c:	d4 01       	movw	r26, r8
     56e:	8d 91       	ld	r24, X+
     570:	4d 01       	movw	r8, r26
     572:	88 23       	and	r24, r24
     574:	09 f4       	brne	.+2      	; 0x578 <BCM_TxMainFunction+0x90>
     576:	6f c0       	rjmp	.+222    	; 0x656 <BCM_TxMainFunction+0x16e>

    }
    return u8_ErrorState;
}
/*- APIs IMPLEMENTATION-----------------------------------*/
extern void BCM_TxMainFunction(void)
     578:	38 01       	movw	r6, r16
            {
                continue;
            }
            else
            {
                if(BCM_MODE_TX==aptr_Task[u8_ChCounter]->u8_BCMMode)
     57a:	d8 01       	movw	r26, r16
     57c:	ed 91       	ld	r30, X+
     57e:	fc 91       	ld	r31, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	81 81       	ldd	r24, Z+1	; 0x01
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	09 f0       	breq	.+2      	; 0x58a <BCM_TxMainFunction+0xa2>
     588:	66 c0       	rjmp	.+204    	; 0x656 <BCM_TxMainFunction+0x16e>

    }
    return u8_ErrorState;
}
/*- APIs IMPLEMENTATION-----------------------------------*/
extern void BCM_TxMainFunction(void)
     58a:	da 82       	std	Y+2, r13	; 0x02
     58c:	c9 82       	std	Y+1, r12	; 0x01
            else
            {
                if(BCM_MODE_TX==aptr_Task[u8_ChCounter]->u8_BCMMode)
                {
                    /*CHECK IF THE POINTER TO TASK IS NULL*/
                    if(NOT_INIT==au8_InitPacketFlag[u8_ChCounter])
     58e:	f6 01       	movw	r30, r12
     590:	80 81       	ld	r24, Z
     592:	88 23       	and	r24, r24
     594:	29 f4       	brne	.+10     	; 0x5a0 <BCM_TxMainFunction+0xb8>
                    {
                        /*IF YES MAKE IT POINT TO THE TASK*/
                        au8_InitPacketFlag[u8_ChCounter]=INIT;
     596:	a0 82       	st	Z, r10
                        BCM_InitPacket(u8_ChCounter,BCM_MODE_TX);
     598:	8b 2d       	mov	r24, r11
     59a:	6a 2d       	mov	r22, r10
     59c:	0e 94 af 01 	call	0x35e	; 0x35e <BCM_InitPacket>
                    }
                    else
                    {
                        //DO NOTHING
                    }
                    switch (aptr_Task[u8_ChCounter]->u8_BCMState)
     5a0:	d3 01       	movw	r26, r6
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	11 97       	sbiw	r26, 0x01	; 1
     5a8:	83 81       	ldd	r24, Z+3	; 0x03
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <BCM_TxMainFunction+0xc8>
     5ae:	53 c0       	rjmp	.+166    	; 0x656 <BCM_TxMainFunction+0x16e>
                    {
                        case BCM_TXSTATE_SENDING:
                            //SEND PACKET(COMMAND,SIZE,DATA,SC)
                            aptr_Task[u8_ChCounter]->u8_BCMState=BCM_TXSTATE_PENDING;
     5b0:	a3 82       	std	Z+3, r10	; 0x03
							COMMProxy_Send(u8_ChCounter,(aptr_Packet[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])[aptr_Task[u8_ChCounter]->u16_BCMByteCoounter]);
     5b2:	ed 91       	ld	r30, X+
     5b4:	fc 91       	ld	r31, X
     5b6:	84 81       	ldd	r24, Z+4	; 0x04
     5b8:	ee 0c       	add	r14, r14
     5ba:	ff 1c       	adc	r15, r15
     5bc:	ee 0c       	add	r14, r14
     5be:	ff 1c       	adc	r15, r15
     5c0:	97 01       	movw	r18, r14
     5c2:	28 0f       	add	r18, r24
     5c4:	31 1d       	adc	r19, r1
     5c6:	c9 01       	movw	r24, r18
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	84 0d       	add	r24, r4
     5ce:	95 1d       	adc	r25, r5
     5d0:	dc 01       	movw	r26, r24
     5d2:	8d 91       	ld	r24, X+
     5d4:	9c 91       	ld	r25, X
     5d6:	05 80       	ldd	r0, Z+5	; 0x05
     5d8:	f6 81       	ldd	r31, Z+6	; 0x06
     5da:	e0 2d       	mov	r30, r0
     5dc:	e8 0f       	add	r30, r24
     5de:	f9 1f       	adc	r31, r25
     5e0:	8b 2d       	mov	r24, r11
     5e2:	60 81       	ld	r22, Z
     5e4:	0e 94 90 05 	call	0xb20	; 0xb20 <COMMProxy_Send>
                            (aptr_Task[u8_ChCounter]->u16_BCMByteCoounter)++;
     5e8:	d3 01       	movw	r26, r6
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	85 81       	ldd	r24, Z+5	; 0x05
     5f2:	96 81       	ldd	r25, Z+6	; 0x06
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	96 83       	std	Z+6, r25	; 0x06
     5f8:	85 83       	std	Z+5, r24	; 0x05
                            if((au16_Packet_sizes[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])==(aptr_Task[u8_ChCounter]->u16_BCMByteCoounter))
     5fa:	ed 91       	ld	r30, X+
     5fc:	fc 91       	ld	r31, X
     5fe:	44 81       	ldd	r20, Z+4	; 0x04
     600:	c7 01       	movw	r24, r14
     602:	84 0f       	add	r24, r20
     604:	91 1d       	adc	r25, r1
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	82 0d       	add	r24, r2
     60c:	93 1d       	adc	r25, r3
     60e:	dc 01       	movw	r26, r24
     610:	8d 91       	ld	r24, X+
     612:	9c 91       	ld	r25, X
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	25 81       	ldd	r18, Z+5	; 0x05
     618:	36 81       	ldd	r19, Z+6	; 0x06
     61a:	82 17       	cp	r24, r18
     61c:	93 07       	cpc	r25, r19
     61e:	d9 f4       	brne	.+54     	; 0x656 <BCM_TxMainFunction+0x16e>
                            {
                                (aptr_Task[u8_ChCounter]->u8_BCMPacketCounter)++;
     620:	84 2f       	mov	r24, r20
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	84 83       	std	Z+4, r24	; 0x04
                                (aptr_Task[u8_ChCounter]->u16_BCMByteCoounter)=ZERO;
     626:	d3 01       	movw	r26, r6
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	16 82       	std	Z+6, r1	; 0x06
     630:	15 82       	std	Z+5, r1	; 0x05
                                if(PACKET_SIZE==(aptr_Task[u8_ChCounter]->u8_BCMPacketCounter))
     632:	ed 91       	ld	r30, X+
     634:	fc 91       	ld	r31, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	61 f4       	brne	.+24     	; 0x656 <BCM_TxMainFunction+0x16e>
                                {
                                    aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
     63e:	b2 e0       	ldi	r27, 0x02	; 2
     640:	b1 83       	std	Z+1, r27	; 0x01
                                    (aptr_Task[u8_ChCounter]->ptr_BCMCallBackFu)();
     642:	d3 01       	movw	r26, r6
     644:	ed 91       	ld	r30, X+
     646:	fc 91       	ld	r31, X
     648:	03 84       	ldd	r0, Z+11	; 0x0b
     64a:	f4 85       	ldd	r31, Z+12	; 0x0c
     64c:	e0 2d       	mov	r30, r0
     64e:	09 95       	icall
                                    au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
     650:	e9 81       	ldd	r30, Y+1	; 0x01
     652:	fa 81       	ldd	r31, Y+2	; 0x02
     654:	10 82       	st	Z, r1
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	3c 81       	ldd	r19, Y+4	; 0x04
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	3c 83       	std	Y+4, r19	; 0x04
     660:	2b 83       	std	Y+3, r18	; 0x03
     662:	0e 5f       	subi	r16, 0xFE	; 254
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	08 94       	sec
     668:	c1 1c       	adc	r12, r1
     66a:	d1 1c       	adc	r13, r1
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
     66c:	23 30       	cpi	r18, 0x03	; 3
     66e:	31 05       	cpc	r19, r1
     670:	09 f0       	breq	.+2      	; 0x674 <BCM_TxMainFunction+0x18c>
     672:	79 cf       	rjmp	.-270    	; 0x566 <BCM_TxMainFunction+0x7e>
                    //DO NOTHING
                }
            }
        }
    }
}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	3f 90       	pop	r3
     69e:	2f 90       	pop	r2
     6a0:	08 95       	ret

000006a2 <BCM_RxMainFunction>:
extern void BCM_RxMainFunction(void)
{
     6a2:	6f 92       	push	r6
     6a4:	7f 92       	push	r7
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
    uint8_t u8_ChCounter=ZERO;
    if(NOT_INIT==IsInit)
     6be:	80 91 b6 00 	lds	r24, 0x00B6
     6c2:	88 23       	and	r24, r24
     6c4:	11 f4       	brne	.+4      	; 0x6ca <BCM_RxMainFunction+0x28>
    {
       BCM_Init();
     6c6:	0e 94 0e 02 	call	0x41c	; 0x41c <BCM_Init>
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     6ca:	80 91 b6 00 	lds	r24, 0x00B6
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <BCM_RxMainFunction+0x32>
     6d2:	50 c0       	rjmp	.+160    	; 0x774 <BCM_RxMainFunction+0xd2>
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f0 ea       	ldi	r31, 0xA0	; 160
     6d8:	cf 2e       	mov	r12, r31
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	df 2e       	mov	r13, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	07 eb       	ldi	r16, 0xB7	; 183
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	0f 2e       	mov	r0, r31
     6e6:	fd eb       	ldi	r31, 0xBD	; 189
     6e8:	ef 2e       	mov	r14, r31
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	ff 2e       	mov	r15, r31
     6ee:	f0 2d       	mov	r31, r0
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	d0 e0       	ldi	r29, 0x00	; 0
                        case BCM_RXSTATE_RECEIVING:
                            /*Waiting*/
                            break;
                        case BCM_RXSTATE_CS:
                            /*Checking Sum*/
                            aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
     6f4:	99 24       	eor	r9, r9
     6f6:	68 94       	set
     6f8:	91 f8       	bld	r9, 1
                {
                    /*CHECK IF THE POINTER TO TASK IS NULL*/
                    if(NOT_INIT==au8_InitPacketFlag[u8_ChCounter])
                    {
                        /*IF YES MAKE IT POINT TO THE TASK*/
                        au8_InitPacketFlag[u8_ChCounter]=INIT;
     6fa:	88 24       	eor	r8, r8
     6fc:	83 94       	inc	r8
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     6fe:	8c 2f       	mov	r24, r28
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
        {
            if(DISABLE==au8_BCM_UsedCH[u8_ChCounter])
     700:	d6 01       	movw	r26, r12
     702:	9d 91       	ld	r25, X+
     704:	6d 01       	movw	r12, r26
     706:	99 23       	and	r25, r25
     708:	61 f1       	breq	.+88     	; 0x762 <BCM_RxMainFunction+0xc0>
                }
            }
        }
    }
}
extern void BCM_RxMainFunction(void)
     70a:	58 01       	movw	r10, r16
            {
                continue;
            }
            else
            {
                if(BCM_MODE_RX==aptr_Task[u8_ChCounter]->u8_BCMMode)
     70c:	d8 01       	movw	r26, r16
     70e:	ed 91       	ld	r30, X+
     710:	fc 91       	ld	r31, X
     712:	11 97       	sbiw	r26, 0x01	; 1
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	99 23       	and	r25, r25
     718:	21 f5       	brne	.+72     	; 0x762 <BCM_RxMainFunction+0xc0>
                }
            }
        }
    }
}
extern void BCM_RxMainFunction(void)
     71a:	37 01       	movw	r6, r14
            else
            {
                if(BCM_MODE_RX==aptr_Task[u8_ChCounter]->u8_BCMMode)
                {
                    /*CHECK IF THE POINTER TO TASK IS NULL*/
                    if(NOT_INIT==au8_InitPacketFlag[u8_ChCounter])
     71c:	f7 01       	movw	r30, r14
     71e:	90 81       	ld	r25, Z
     720:	99 23       	and	r25, r25
     722:	21 f4       	brne	.+8      	; 0x72c <BCM_RxMainFunction+0x8a>
                    {
                        /*IF YES MAKE IT POINT TO THE TASK*/
                        au8_InitPacketFlag[u8_ChCounter]=INIT;
     724:	80 82       	st	Z, r8
                        BCM_InitPacket(u8_ChCounter,BCM_MODE_RX);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	0e 94 af 01 	call	0x35e	; 0x35e <BCM_InitPacket>
                    }
                    else
                    {
                        //DO NOTHING
                    }
                    switch (aptr_Task[u8_ChCounter]->u8_BCMState)
     72c:	d5 01       	movw	r26, r10
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	a1 f4       	brne	.+40     	; 0x762 <BCM_RxMainFunction+0xc0>
                        case BCM_RXSTATE_RECEIVING:
                            /*Waiting*/
                            break;
                        case BCM_RXSTATE_CS:
                            /*Checking Sum*/
                            aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
     73a:	91 82       	std	Z+1, r9	; 0x01
                            au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
     73c:	f3 01       	movw	r30, r6
     73e:	10 82       	st	Z, r1
							
                            if((aptr_Task[u8_ChCounter]->u8_BCMCS)==gau8_CSTemp[u8_ChCounter])
     740:	f5 01       	movw	r30, r10
     742:	a0 81       	ld	r26, Z
     744:	b1 81       	ldd	r27, Z+1	; 0x01
                }
            }
        }
    }
}
extern void BCM_RxMainFunction(void)
     746:	fe 01       	movw	r30, r28
     748:	e8 52       	subi	r30, 0x28	; 40
     74a:	ff 4f       	sbci	r31, 0xFF	; 255
                        case BCM_RXSTATE_CS:
                            /*Checking Sum*/
                            aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
                            au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
							
                            if((aptr_Task[u8_ChCounter]->u8_BCMCS)==gau8_CSTemp[u8_ChCounter])
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	9c 91       	ld	r25, X
     750:	12 97       	sbiw	r26, 0x02	; 2
     752:	80 81       	ld	r24, Z
     754:	98 17       	cp	r25, r24
     756:	29 f4       	brne	.+10     	; 0x762 <BCM_RxMainFunction+0xc0>
                            {
                                (aptr_Task[u8_ChCounter]->ptr_BCMCallBackFu)();
     758:	1b 96       	adiw	r26, 0x0b	; 11
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	1c 97       	sbiw	r26, 0x0c	; 12
     760:	09 95       	icall
     762:	21 96       	adiw	r28, 0x01	; 1
     764:	0e 5f       	subi	r16, 0xFE	; 254
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	08 94       	sec
     76a:	e1 1c       	adc	r14, r1
     76c:	f1 1c       	adc	r15, r1
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
     76e:	c3 30       	cpi	r28, 0x03	; 3
     770:	d1 05       	cpc	r29, r1
     772:	29 f6       	brne	.-118    	; 0x6fe <BCM_RxMainFunction+0x5c>
                    //DO NOTHING
                }
            }
        }
    }
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	bf 90       	pop	r11
     786:	af 90       	pop	r10
     788:	9f 90       	pop	r9
     78a:	8f 90       	pop	r8
     78c:	7f 90       	pop	r7
     78e:	6f 90       	pop	r6
     790:	08 95       	ret

00000792 <BCM_Send>:
/*- APIs IMPLEMENTATION-----------------------------------*/
/**
* @brief: This function sets the data to be sent.
*/
extern ERROR_STATE_t BCM_Send(uint8_t CH_ID, uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t TX_CBF)
{
     792:	da 01       	movw	r26, r20
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
    uint16_t u16_BCM_CSCounter=ZERO;
	if(CH_ID>=COMM_NUMBERS)
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	08 f0       	brcs	.+2      	; 0x79a <BCM_Send+0x8>
     798:	5d c0       	rjmp	.+186    	; 0x854 <BCM_Send+0xc2>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
     79a:	48 2f       	mov	r20, r24
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	fa 01       	movw	r30, r20
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e4 0f       	add	r30, r20
     7a6:	f5 1f       	adc	r31, r21
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e4 0f       	add	r30, r20
     7b2:	f5 1f       	adc	r31, r21
     7b4:	e8 58       	subi	r30, 0x88	; 136
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	81 81       	ldd	r24, Z+1	; 0x01
     7ba:	82 30       	cpi	r24, 0x02	; 2
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <BCM_Send+0x2e>
     7be:	4c c0       	rjmp	.+152    	; 0x858 <BCM_Send+0xc6>
    {
        u8_ErrorState =ERROR_NOK;
    }
    else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
     7c0:	cb 01       	movw	r24, r22
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	88 3e       	cpi	r24, 0xE8	; 232
     7c8:	9e 07       	cpc	r25, r30
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <BCM_Send+0x3c>
     7cc:	47 c0       	rjmp	.+142    	; 0x85c <BCM_Send+0xca>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==TX_CBF))
     7ce:	10 97       	sbiw	r26, 0x00	; 0
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <BCM_Send+0x42>
     7d2:	46 c0       	rjmp	.+140    	; 0x860 <__stack+0x1>
     7d4:	21 15       	cp	r18, r1
     7d6:	31 05       	cpc	r19, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <BCM_Send+0x4a>
     7da:	44 c0       	rjmp	.+136    	; 0x864 <__stack+0x5>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else
	{
	    gastr_BCM_Task[CH_ID].u8_BCMID=u8_BCM_ID;
     7dc:	fa 01       	movw	r30, r20
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e4 0f       	add	r30, r20
     7e4:	f5 1f       	adc	r31, r21
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	e4 0f       	add	r30, r20
     7f0:	f5 1f       	adc	r31, r21
     7f2:	e8 58       	subi	r30, 0x88	; 136
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	80 91 9f 00 	lds	r24, 0x009F
     7fa:	80 83       	st	Z, r24
		gastr_BCM_Task[CH_ID].u8_BCMMode=BCM_MODE_TX;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	81 83       	std	Z+1, r24	; 0x01
		gastr_BCM_Task[CH_ID].u8_BCMCS=ZERO;
     800:	12 82       	std	Z+2, r1	; 0x02
		gastr_BCM_Task[CH_ID].u8_BCMState=BCM_TXSTATE_SENDING;
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	83 83       	std	Z+3, r24	; 0x03
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
     806:	14 82       	std	Z+4, r1	; 0x04
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
     808:	16 82       	std	Z+6, r1	; 0x06
     80a:	15 82       	std	Z+5, r1	; 0x05
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
     80c:	70 87       	std	Z+8, r23	; 0x08
     80e:	67 83       	std	Z+7, r22	; 0x07
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
     810:	b2 87       	std	Z+10, r27	; 0x0a
     812:	a1 87       	std	Z+9, r26	; 0x09
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=TX_CBF;
     814:	34 87       	std	Z+12, r19	; 0x0c
     816:	23 87       	std	Z+11, r18	; 0x0b
		for(u16_BCM_CSCounter=ZERO;u16_BCM_CSCounter<Size;u16_BCM_CSCounter++)
     818:	61 15       	cp	r22, r1
     81a:	71 05       	cpc	r23, r1
     81c:	29 f1       	breq	.+74     	; 0x868 <__stack+0x9>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
		{
			gastr_BCM_Task[CH_ID].u8_BCMCS+=DataArr[u16_BCM_CSCounter];
     822:	ca 01       	movw	r24, r20
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	84 0f       	add	r24, r20
     82a:	95 1f       	adc	r25, r21
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	84 0f       	add	r24, r20
     836:	95 1f       	adc	r25, r21
     838:	fc 01       	movw	r30, r24
     83a:	e6 58       	subi	r30, 0x86	; 134
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	9d 91       	ld	r25, X+
     840:	80 81       	ld	r24, Z
     842:	89 0f       	add	r24, r25
     844:	80 83       	st	Z, r24
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=TX_CBF;
		for(u16_BCM_CSCounter=ZERO;u16_BCM_CSCounter<Size;u16_BCM_CSCounter++)
     846:	2f 5f       	subi	r18, 0xFF	; 255
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	26 17       	cp	r18, r22
     84c:	37 07       	cpc	r19, r23
     84e:	b9 f7       	brne	.-18     	; 0x83e <BCM_Send+0xac>
/**
* @brief: This function sets the data to be sent.
*/
extern ERROR_STATE_t BCM_Send(uint8_t CH_ID, uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t TX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret
    uint16_t u16_BCM_CSCounter=ZERO;
	if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	08 95       	ret
	}
    else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
    {
        u8_ErrorState =ERROR_NOK;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	08 95       	ret
    }
    else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
	{
		u8_ErrorState =ERROR_NOK;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==TX_CBF))
	{
		u8_ErrorState =ERROR_NOK;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
/**
* @brief: This function sets the data to be sent.
*/
extern ERROR_STATE_t BCM_Send(uint8_t CH_ID, uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t TX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     868:	80 e0       	ldi	r24, 0x00	; 0
		{
			gastr_BCM_Task[CH_ID].u8_BCMCS+=DataArr[u16_BCM_CSCounter];
		}
	}
    return u8_ErrorState;
}
     86a:	08 95       	ret

0000086c <BCM_Receive>:
/**
* @brief: This function sets up the receiving buffer.
*/
extern ERROR_STATE_t BCM_Receive(uint8_t CH_ID,uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t RX_CBF)
{
     86c:	da 01       	movw	r26, r20
     86e:	a9 01       	movw	r20, r18
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
	if(CH_ID>=COMM_NUMBERS)
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	d0 f5       	brcc	.+116    	; 0x8e8 <BCM_Receive+0x7c>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
     874:	28 2f       	mov	r18, r24
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	e2 0f       	add	r30, r18
     880:	f3 1f       	adc	r31, r19
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	e2 0f       	add	r30, r18
     88c:	f3 1f       	adc	r31, r19
     88e:	e8 58       	subi	r30, 0x88	; 136
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	81 81       	ldd	r24, Z+1	; 0x01
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	51 f5       	brne	.+84     	; 0x8ec <BCM_Receive+0x80>
    {
        u8_ErrorState =ERROR_NOK;
    }
	else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
     898:	cb 01       	movw	r24, r22
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	e3 e0       	ldi	r30, 0x03	; 3
     89e:	88 3e       	cpi	r24, 0xE8	; 232
     8a0:	9e 07       	cpc	r25, r30
     8a2:	30 f5       	brcc	.+76     	; 0x8f0 <BCM_Receive+0x84>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==RX_CBF))
     8a4:	10 97       	sbiw	r26, 0x00	; 0
     8a6:	31 f1       	breq	.+76     	; 0x8f4 <BCM_Receive+0x88>
     8a8:	41 15       	cp	r20, r1
     8aa:	51 05       	cpc	r21, r1
     8ac:	29 f1       	breq	.+74     	; 0x8f8 <BCM_Receive+0x8c>
    {
		 u8_ErrorState =ERROR_NOK;
	}
	else
	{
		gastr_BCM_Task[CH_ID].u8_BCMMode=BCM_MODE_RX;
     8ae:	c9 01       	movw	r24, r18
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	82 0f       	add	r24, r18
     8c2:	93 1f       	adc	r25, r19
     8c4:	fc 01       	movw	r30, r24
     8c6:	e8 58       	subi	r30, 0x88	; 136
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	11 82       	std	Z+1, r1	; 0x01
		gastr_BCM_Task[CH_ID].u8_BCMCS=ZERO;
     8cc:	12 82       	std	Z+2, r1	; 0x02
		gastr_BCM_Task[CH_ID].u8_BCMState=BCM_RXSTATE_RECEIVING;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	83 83       	std	Z+3, r24	; 0x03
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
     8d2:	14 82       	std	Z+4, r1	; 0x04
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
     8d4:	16 82       	std	Z+6, r1	; 0x06
     8d6:	15 82       	std	Z+5, r1	; 0x05
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
     8d8:	70 87       	std	Z+8, r23	; 0x08
     8da:	67 83       	std	Z+7, r22	; 0x07
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
     8dc:	b2 87       	std	Z+10, r27	; 0x0a
     8de:	a1 87       	std	Z+9, r26	; 0x09
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=RX_CBF;
     8e0:	54 87       	std	Z+12, r21	; 0x0c
     8e2:	43 87       	std	Z+11, r20	; 0x0b
/**
* @brief: This function sets up the receiving buffer.
*/
extern ERROR_STATE_t BCM_Receive(uint8_t CH_ID,uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t RX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret
	if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	08 95       	ret
	}
	else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
    {
        u8_ErrorState =ERROR_NOK;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	08 95       	ret
    }
	else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
	{
		u8_ErrorState =ERROR_NOK;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 95       	ret
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==RX_CBF))
    {
		 u8_ErrorState =ERROR_NOK;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret
     8f8:	81 e0       	ldi	r24, 0x01	; 1
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=RX_CBF;

	}
    return u8_ErrorState;
}
     8fa:	08 95       	ret

000008fc <BCM_Get>:
* @brief: This function gets the data.
*/
extern ERROR_STATE_t BCM_Get(uint8_t CH_ID,ptr_STR_BCMTask_t* Task)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
    if(NULL_PTR==Task)
     8fc:	61 15       	cp	r22, r1
     8fe:	71 05       	cpc	r23, r1
     900:	a9 f0       	breq	.+42     	; 0x92c <BCM_Get+0x30>
    {
        u8_ErrorState =ERROR_NOK;
    }
    else if(CH_ID>=COMM_NUMBERS)
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	a8 f4       	brcc	.+42     	; 0x930 <BCM_Get+0x34>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else
	{
	   *Task=&gastr_BCM_Task[CH_ID];
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9c 01       	movw	r18, r24
     90a:	22 0f       	add	r18, r18
     90c:	33 1f       	adc	r19, r19
     90e:	28 0f       	add	r18, r24
     910:	39 1f       	adc	r19, r25
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	88 58       	subi	r24, 0x88	; 136
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	fb 01       	movw	r30, r22
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
/**
* @brief: This function gets the data.
*/
extern ERROR_STATE_t BCM_Get(uint8_t CH_ID,ptr_STR_BCMTask_t* Task)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret
    if(NULL_PTR==Task)
    {
        u8_ErrorState =ERROR_NOK;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	08 95       	ret
    }
    else if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     930:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
	   *Task=&gastr_BCM_Task[CH_ID];
	}
    return u8_ErrorState;
}
     932:	08 95       	ret

00000934 <BCM_SetState>:
* @brief: This function sets the state.
*/
extern ERROR_STATE_t BCM_SetState(uint8_t CH_ID,uint8_t CurrentState)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
    if(CH_ID>=COMM_NUMBERS)
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	a0 f4       	brcc	.+40     	; 0x960 <BCM_SetState+0x2c>
    {
        u8_ErrorState =ERROR_NOK;
    }
    else if(CurrentState>=BCM_STATE_INVALID)
     938:	64 30       	cpi	r22, 0x04	; 4
     93a:	a0 f4       	brcc	.+40     	; 0x964 <BCM_SetState+0x30>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else
	{
		gastr_BCM_Task[CH_ID].u8_BCMState=CurrentState;
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	fc 01       	movw	r30, r24
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	e8 0f       	add	r30, r24
     946:	f9 1f       	adc	r31, r25
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	8e 0f       	add	r24, r30
     952:	9f 1f       	adc	r25, r31
     954:	fc 01       	movw	r30, r24
     956:	e8 58       	subi	r30, 0x88	; 136
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	63 83       	std	Z+3, r22	; 0x03
/**
* @brief: This function sets the state.
*/
extern ERROR_STATE_t BCM_SetState(uint8_t CH_ID,uint8_t CurrentState)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret
    if(CH_ID>=COMM_NUMBERS)
    {
        u8_ErrorState =ERROR_NOK;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret
    }
    else if(CurrentState>=BCM_STATE_INVALID)
	{
		u8_ErrorState =ERROR_NOK;
     964:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		gastr_BCM_Task[CH_ID].u8_BCMState=CurrentState;
	}
    return u8_ErrorState;
}
     966:	08 95       	ret

00000968 <UART_TX_ISR>:
* @brief: This function is ISR Function for UART Transmit.
*/
void UART_TX_ISR(void)
{
   /* Call Callback Function if set. */
   if(NULL_PTR != gptr_TxCallback[COMM_UART_CH])
     968:	e0 91 e0 00 	lds	r30, 0x00E0
     96c:	f0 91 e1 00 	lds	r31, 0x00E1
     970:	30 97       	sbiw	r30, 0x00	; 0
     972:	09 f0       	breq	.+2      	; 0x976 <UART_TX_ISR+0xe>
   {
      gptr_TxCallback[COMM_UART_CH]();
     974:	09 95       	icall
     976:	08 95       	ret

00000978 <I2C_ISR>:
* @brief: This function is ISR Function for I2C.
*/
void I2C_ISR(void)
{
   /* Get I2C Status */
   I2C_Status(I2C_CH_0, &gu8_I2CStatus);
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	6e ed       	ldi	r22, 0xDE	; 222
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 7d 07 	call	0xefa	; 0xefa <I2C_Status>
   
   switch(gu8_I2CStatus)
     982:	80 91 de 00 	lds	r24, 0x00DE
     986:	80 36       	cpi	r24, 0x60	; 96
     988:	59 f1       	breq	.+86     	; 0x9e0 <I2C_ISR+0x68>
     98a:	81 36       	cpi	r24, 0x61	; 97
     98c:	38 f4       	brcc	.+14     	; 0x99c <I2C_ISR+0x24>
     98e:	88 31       	cpi	r24, 0x18	; 24
     990:	b1 f0       	breq	.+44     	; 0x9be <I2C_ISR+0x46>
     992:	88 32       	cpi	r24, 0x28	; 40
     994:	d1 f0       	breq	.+52     	; 0x9ca <I2C_ISR+0x52>
     996:	88 30       	cpi	r24, 0x08	; 8
     998:	c9 f5       	brne	.+114    	; 0xa0c <I2C_ISR+0x94>
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <I2C_ISR+0x3c>
     99c:	80 38       	cpi	r24, 0x80	; 128
     99e:	21 f1       	breq	.+72     	; 0x9e8 <I2C_ISR+0x70>
     9a0:	81 38       	cpi	r24, 0x81	; 129
     9a2:	18 f4       	brcc	.+6      	; 0x9aa <I2C_ISR+0x32>
     9a4:	80 37       	cpi	r24, 0x70	; 112
     9a6:	91 f5       	brne	.+100    	; 0xa0c <I2C_ISR+0x94>
     9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <I2C_ISR+0x68>
     9aa:	80 39       	cpi	r24, 0x90	; 144
     9ac:	e9 f0       	breq	.+58     	; 0x9e8 <I2C_ISR+0x70>
     9ae:	80 3a       	cpi	r24, 0xA0	; 160
     9b0:	69 f5       	brne	.+90     	; 0xa0c <I2C_ISR+0x94>
     9b2:	29 c0       	rjmp	.+82     	; 0xa06 <I2C_ISR+0x8e>
   {
      case I2C_STATUS_START:
         /* Send Slave Address */
         I2C_Write(I2C_CH_0, I2C_SLAVE_ADDR);
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	6c ec       	ldi	r22, 0xCC	; 204
     9b8:	0e 94 40 07 	call	0xe80	; 0xe80 <I2C_Write>
         break;
     9bc:	08 95       	ret
      case I2C_STATUS_T_ACK_ADDR:
         /* Write Data */
         I2C_Write(I2C_CH_0, gu8_I2CData);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	60 91 df 00 	lds	r22, 0x00DF
     9c4:	0e 94 40 07 	call	0xe80	; 0xe80 <I2C_Write>
         break;
     9c8:	08 95       	ret
      case I2C_STATUS_T_ACK_DATA:
         /* Send Stop Condition */
         I2C_Stop(I2C_CH_0);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 70 07 	call	0xee0	; 0xee0 <I2C_Stop>
         /* Call Callback Function if set. */
         if(NULL_PTR != gptr_TxCallback[COMM_I2C_CH])
     9d0:	e0 91 e4 00 	lds	r30, 0x00E4
     9d4:	f0 91 e5 00 	lds	r31, 0x00E5
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	c1 f0       	breq	.+48     	; 0xa0c <I2C_ISR+0x94>
         {
            gptr_TxCallback[COMM_I2C_CH]();
     9dc:	09 95       	icall
     9de:	08 95       	ret
         }
         break;
      case I2C_STATUS_R_ACK_ADDR:
      case I2C_STATUS_R_GENERAL_ADDR:
         I2C_ClearIntFlag(I2C_CH_0);
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 b9 07 	call	0xf72	; 0xf72 <I2C_ClearIntFlag>
         break;
     9e6:	08 95       	ret
      case I2C_STATUS_R_ACK_DATA:
      case I2C_STATUS_R_GACK_DATA:
         /* Get Data From I2C Buffer. */
         
         I2C_ReadAck(I2C_CH_0, &gu8_I2CData);
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	6f ed       	ldi	r22, 0xDF	; 223
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 4b 07 	call	0xe96	; 0xe96 <I2C_ReadAck>
         /* Call Callback Function if set. */
         if(NULL_PTR != gptr_RxCallback[COMM_I2C_CH])
     9f2:	e0 91 ea 00 	lds	r30, 0x00EA
     9f6:	f0 91 eb 00 	lds	r31, 0x00EB
     9fa:	30 97       	sbiw	r30, 0x00	; 0
     9fc:	39 f0       	breq	.+14     	; 0xa0c <I2C_ISR+0x94>
         {
            gptr_RxCallback[COMM_I2C_CH](gu8_I2CData);
     9fe:	80 91 df 00 	lds	r24, 0x00DF
     a02:	09 95       	icall
     a04:	08 95       	ret
         }
         break;
      case I2C_STATUS_R_STOP:
         I2C_ClearIntFlag(I2C_CH_0);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 b9 07 	call	0xf72	; 0xf72 <I2C_ClearIntFlag>
     a0c:	08 95       	ret

00000a0e <SPI_ISR>:
/**
* @brief: This function is ISR Function for SPI.
*/
void SPI_ISR(void)
{
   if( (SPI_CH_0_CONTROL_MASK & MASTER_SELECT) )
     a0e:	80 91 b0 00 	lds	r24, 0x00B0
     a12:	84 ff       	sbrs	r24, 4
     a14:	0f c0       	rjmp	.+30     	; 0xa34 <SPI_ISR+0x26>
   {
      /* Unselect slave line */
      DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_HIGH);
     a16:	80 91 a8 00 	lds	r24, 0x00A8
     a1a:	60 91 a7 00 	lds	r22, 0x00A7
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
      /* Call Callback Function if set. */
      if(NULL_PTR != gptr_TxCallback[COMM_SPI_CH])
     a24:	e0 91 e2 00 	lds	r30, 0x00E2
     a28:	f0 91 e3 00 	lds	r31, 0x00E3
     a2c:	30 97       	sbiw	r30, 0x00	; 0
     a2e:	81 f0       	breq	.+32     	; 0xa50 <SPI_ISR+0x42>
      {
         gptr_TxCallback[COMM_SPI_CH]();
     a30:	09 95       	icall
     a32:	08 95       	ret
      }
   }
   else
   {
      /* Get Data From SPI Buffer. */
      SPI_GetData(SPI_CH_0, &gu8_SPIData);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	6c ee       	ldi	r22, 0xEC	; 236
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SPI_GetData>
      /* Call Callback Function if set. */
      if(NULL_PTR != gptr_RxCallback[COMM_SPI_CH])
     a3e:	e0 91 e8 00 	lds	r30, 0x00E8
     a42:	f0 91 e9 00 	lds	r31, 0x00E9
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	19 f0       	breq	.+6      	; 0xa50 <SPI_ISR+0x42>
      {
         gptr_RxCallback[COMM_SPI_CH](gu8_SPIData);
     a4a:	80 91 ec 00 	lds	r24, 0x00EC
     a4e:	09 95       	icall
     a50:	08 95       	ret

00000a52 <UART_RX_ISR>:
* @brief: This function is ISR Function for UART Receive.
*/
void UART_RX_ISR(void)
{
   /* Get Data From Uart Receive Buffer. */
   UART_GetData(UART_CH_0, &gu8_UARTData);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	6d ee       	ldi	r22, 0xED	; 237
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <UART_GetData>
   /* Call Callback Function if set. */
   if(NULL_PTR != gptr_RxCallback[COMM_UART_CH])
     a5c:	e0 91 e6 00 	lds	r30, 0x00E6
     a60:	f0 91 e7 00 	lds	r31, 0x00E7
     a64:	30 97       	sbiw	r30, 0x00	; 0
     a66:	19 f0       	breq	.+6      	; 0xa6e <UART_RX_ISR+0x1c>
   {
      gptr_RxCallback[COMM_UART_CH](gu8_UARTData);
     a68:	80 91 ed 00 	lds	r24, 0x00ED
     a6c:	09 95       	icall
     a6e:	08 95       	ret

00000a70 <COMMProxy_Init>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	08 f0       	brcs	.+2      	; 0xa76 <COMMProxy_Init+0x6>
     a74:	4f c0       	rjmp	.+158    	; 0xb14 <COMMProxy_Init+0xa4>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   /* Validate that Channel is not initialized before. */
   else if(NOT_INIT != gu8_COMMInitCh[COMM_CH])
     a76:	eb ed       	ldi	r30, 0xDB	; 219
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	e8 0f       	add	r30, r24
     a7c:	f1 1d       	adc	r31, r1
     a7e:	90 81       	ld	r25, Z
     a80:	99 23       	and	r25, r25
     a82:	09 f0       	breq	.+2      	; 0xa86 <COMMProxy_Init+0x16>
     a84:	49 c0       	rjmp	.+146    	; 0xb18 <COMMProxy_Init+0xa8>
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      switch(COMM_CH)
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	01 f1       	breq	.+64     	; 0xaca <COMMProxy_Init+0x5a>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	20 f0       	brcs	.+8      	; 0xa96 <COMMProxy_Init+0x26>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	09 f0       	breq	.+2      	; 0xa94 <COMMProxy_Init+0x24>
     a92:	44 c0       	rjmp	.+136    	; 0xb1c <COMMProxy_Init+0xac>
     a94:	2a c0       	rjmp	.+84     	; 0xaea <COMMProxy_Init+0x7a>
      {
         case COMM_UART_CH:
            UART_Init(UART_CH_0);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 75 0c 	call	0x18ea	; 0x18ea <UART_Init>
            Interrupt_Install(USART_TXC_VECTOR_NUMBER, UART_TX_ISR);
     a9c:	8e e0       	ldi	r24, 0x0E	; 14
     a9e:	64 eb       	ldi	r22, 0xB4	; 180
     aa0:	74 e0       	ldi	r23, 0x04	; 4
     aa2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Interrupt_Install>
            Interrupt_Install(USART_RXC_VECTOR_NUMBER, UART_RX_ISR);
     aa6:	8c e0       	ldi	r24, 0x0C	; 12
     aa8:	69 e2       	ldi	r22, 0x29	; 41
     aaa:	75 e0       	ldi	r23, 0x05	; 5
     aac:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Interrupt_Install>
            UART_EnableInterrupt(UART_CH_0, TX_INT);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	60 e4       	ldi	r22, 0x40	; 64
     ab4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <UART_EnableInterrupt>
            UART_EnableInterrupt(UART_CH_0, RX_INT);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	60 e8       	ldi	r22, 0x80	; 128
     abc:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <UART_EnableInterrupt>
            gu8_COMMInitCh[COMM_UART_CH] = INIT;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 db 00 	sts	0x00DB, r24
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
            Interrupt_Install(USART_TXC_VECTOR_NUMBER, UART_TX_ISR);
            Interrupt_Install(USART_RXC_VECTOR_NUMBER, UART_RX_ISR);
            UART_EnableInterrupt(UART_CH_0, TX_INT);
            UART_EnableInterrupt(UART_CH_0, RX_INT);
            gu8_COMMInitCh[COMM_UART_CH] = INIT;
            break;
     ac8:	08 95       	ret
         case COMM_SPI_CH:
            SPI_Init(SPI_CH_0);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <SPI_Init>
            Interrupt_Install(SPI_STC_VECTOR_NUMBER, SPI_ISR);
     ad0:	8b e0       	ldi	r24, 0x0B	; 11
     ad2:	67 e0       	ldi	r22, 0x07	; 7
     ad4:	75 e0       	ldi	r23, 0x05	; 5
     ad6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Interrupt_Install>
            SPI_EnableInterrupt(SPI_CH_0);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <SPI_EnableInterrupt>
            gu8_COMMInitCh[COMM_SPI_CH] = INIT;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 dc 00 	sts	0x00DC, r24
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
         case COMM_SPI_CH:
            SPI_Init(SPI_CH_0);
            Interrupt_Install(SPI_STC_VECTOR_NUMBER, SPI_ISR);
            SPI_EnableInterrupt(SPI_CH_0);
            gu8_COMMInitCh[COMM_SPI_CH] = INIT;
            break;
     ae8:	08 95       	ret
         case COMM_I2C_CH:
            I2C_Init(I2C_CH_0);
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 18 07 	call	0xe30	; 0xe30 <I2C_Init>
            I2C_SetSlaveAddress(I2C_CH_0, I2C_CH_0_SLAVE_ADDR);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	60 91 a3 00 	lds	r22, 0x00A3
     af6:	0e 94 27 07 	call	0xe4e	; 0xe4e <I2C_SetSlaveAddress>
            Interrupt_Install(TWI_VECTOR_NUMBER, I2C_ISR);
     afa:	82 e1       	ldi	r24, 0x12	; 18
     afc:	6c eb       	ldi	r22, 0xBC	; 188
     afe:	74 e0       	ldi	r23, 0x04	; 4
     b00:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Interrupt_Install>
            I2C_EnableInterrupt(I2C_CH_0);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_EnableInterrupt>
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 dd 00 	sts	0x00DD, r24
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b10:	80 e0       	ldi	r24, 0x00	; 0
            I2C_Init(I2C_CH_0);
            I2C_SetSlaveAddress(I2C_CH_0, I2C_CH_0_SLAVE_ADDR);
            Interrupt_Install(TWI_VECTOR_NUMBER, I2C_ISR);
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
     b12:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 95       	ret
   }
   /* Validate that Channel is not initialized before. */
   else if(NOT_INIT != gu8_COMMInitCh[COMM_CH])
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     b1e:	08 95       	ret

00000b20 <COMMProxy_Send>:
* @param [in]  Data     -  Byte to send.
*
* @return function error state.
*/
ERROR_STATE_t COMMProxy_Send(uint8_t COMM_CH, uint8_t Data)
{
     b20:	cf 93       	push	r28
     b22:	c6 2f       	mov	r28, r22
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	38 f5       	brcc	.+78     	; 0xb76 <COMMProxy_Send+0x56>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   /* Validate that Channel is Initialized. */
   else if(INIT != gu8_COMMInitCh[COMM_CH])
     b28:	eb ed       	ldi	r30, 0xDB	; 219
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	e8 0f       	add	r30, r24
     b2e:	f1 1d       	adc	r31, r1
     b30:	90 81       	ld	r25, Z
     b32:	91 30       	cpi	r25, 0x01	; 1
     b34:	11 f5       	brne	.+68     	; 0xb7a <COMMProxy_Send+0x5a>
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      switch(COMM_CH)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	51 f0       	breq	.+20     	; 0xb4e <COMMProxy_Send+0x2e>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	18 f0       	brcs	.+6      	; 0xb44 <COMMProxy_Send+0x24>
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	f1 f4       	brne	.+60     	; 0xb7e <COMMProxy_Send+0x5e>
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <COMMProxy_Send+0x48>
      {
         /* Set Data On Bus */
         case COMM_UART_CH:
            UART_SetData(UART_CH_0, Data);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <UART_SetData>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
      switch(COMM_CH)
      {
         /* Set Data On Bus */
         case COMM_UART_CH:
            UART_SetData(UART_CH_0, Data);
            break;
     b4c:	19 c0       	rjmp	.+50     	; 0xb80 <COMMProxy_Send+0x60>
         case COMM_SPI_CH:
            /* select slave line */
            DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_LOW);
     b4e:	80 91 a8 00 	lds	r24, 0x00A8
     b52:	60 91 a7 00 	lds	r22, 0x00A7
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
            SPI_SetData(SPI_CH_0, Data);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	6c 2f       	mov	r22, r28
     b60:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <SPI_SetData>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b64:	80 e0       	ldi	r24, 0x00	; 0
            break;
         case COMM_SPI_CH:
            /* select slave line */
            DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_LOW);
            SPI_SetData(SPI_CH_0, Data);
            break;
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <COMMProxy_Send+0x60>
         case COMM_I2C_CH:
            gu8_I2CData = Data;
     b68:	60 93 df 00 	sts	0x00DF, r22
            I2C_Start(I2C_CH_0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <I2C_Start>
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b72:	80 e0       	ldi	r24, 0x00	; 0
            SPI_SetData(SPI_CH_0, Data);
            break;
         case COMM_I2C_CH:
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <COMMProxy_Send+0x60>
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <COMMProxy_Send+0x60>
   }
   /* Validate that Channel is Initialized. */
   else if(INIT != gu8_COMMInitCh[COMM_CH])
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <COMMProxy_Send+0x60>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <COMMProxy_SetTxCallback>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	68 f4       	brcc	.+26     	; 0xba2 <COMMProxy_SetTxCallback+0x1e>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else if(NULL_PTR == Callback)
     b88:	61 15       	cp	r22, r1
     b8a:	71 05       	cpc	r23, r1
     b8c:	61 f0       	breq	.+24     	; 0xba6 <COMMProxy_SetTxCallback+0x22>
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {  
      /* Set Callback Function */
      gptr_TxCallback[COMM_CH] = Callback;
     b8e:	e8 2f       	mov	r30, r24
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e0 52       	subi	r30, 0x20	; 32
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	71 83       	std	Z+1, r23	; 0x01
     b9c:	60 83       	st	Z, r22
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	08 95       	ret
   }
   else if(NULL_PTR == Callback)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
      Proxy_ErrorState = ERROR_OK;
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     ba8:	08 95       	ret

00000baa <COMMProxy_SetRxCallback>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	68 f4       	brcc	.+26     	; 0xbc8 <COMMProxy_SetRxCallback+0x1e>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else if(NULL_PTR == Callback)
     bae:	61 15       	cp	r22, r1
     bb0:	71 05       	cpc	r23, r1
     bb2:	61 f0       	breq	.+24     	; 0xbcc <COMMProxy_SetRxCallback+0x22>
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      /* Set Callback Function */
      gptr_RxCallback[COMM_CH] = Callback;
     bb4:	e8 2f       	mov	r30, r24
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ea 51       	subi	r30, 0x1A	; 26
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	71 83       	std	Z+1, r23	; 0x01
     bc2:	60 83       	st	Z, r22
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	08 95       	ret
   }
   else if(NULL_PTR == Callback)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
      Proxy_ErrorState = ERROR_OK;
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
     bce:	08 95       	ret

00000bd0 <Interrupt_Install>:
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	f9 01       	movw	r30, r18
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	e2 51       	subi	r30, 0x12	; 18
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
* @param [in]  Callback    -  New Callback Function of ISR.
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
     bde:	40 81       	ld	r20, Z
     be0:	51 81       	ldd	r21, Z+1	; 0x01
     be2:	41 15       	cp	r20, r1
     be4:	51 05       	cpc	r21, r1
     be6:	a1 f4       	brne	.+40     	; 0xc10 <Interrupt_Install+0x40>
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     be8:	61 15       	cp	r22, r1
     bea:	71 05       	cpc	r23, r1
     bec:	89 f0       	breq	.+34     	; 0xc10 <Interrupt_Install+0x40>
      (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER)
     bee:	84 31       	cpi	r24, 0x14	; 20
     bf0:	78 f4       	brcc	.+30     	; 0xc10 <Interrupt_Install+0x40>
     )
	{
      /* Store The Current ISR in a History Table. */
		aptr_OldVectors[Vector_No] = aptr_ISRAddress[Vector_No];
     bf2:	f9 01       	movw	r30, r18
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	df 01       	movw	r26, r30
     bfa:	a2 51       	subi	r26, 0x12	; 18
     bfc:	bf 4f       	sbci	r27, 0xFF	; 255
     bfe:	e2 5e       	subi	r30, 0xE2	; 226
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	9c 93       	st	X, r25
     c0a:	8e 93       	st	-X, r24
      /* Set the new Callback in the ISR. */
      aptr_ISRAddress[Vector_No] = Callback;
     c0c:	71 83       	std	Z+1, r23	; 0x01
     c0e:	60 83       	st	Z, r22
     c10:	08 95       	ret

00000c12 <Interrupt_Deinstall>:
* @param [in]  Vector_No   -  ISR Vector Number.
*/
void Interrupt_Deinstall(uint8_t Vector_No)
{
   /* Validate Before Changing ISR Vector Table */
	if( (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER))
     c12:	84 31       	cpi	r24, 0x14	; 20
     c14:	80 f4       	brcc	.+32     	; 0xc36 <Interrupt_Deinstall+0x24>
	{
      /* Revert Old ISR Callback to the ISR Vector Table. */
		aptr_ISRAddress[Vector_No] = aptr_OldVectors[Vector_No];
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	df 01       	movw	r26, r30
     c20:	a2 5e       	subi	r26, 0xE2	; 226
     c22:	be 4f       	sbci	r27, 0xFE	; 254
     c24:	e2 51       	subi	r30, 0x12	; 18
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	9c 93       	st	X, r25
     c30:	8e 93       	st	-X, r24
      /* Clear The Old ISR Callback from the History Table */
      aptr_OldVectors[Vector_No] = NULL_PTR;
     c32:	11 82       	std	Z+1, r1	; 0x01
     c34:	10 82       	st	Z, r1
     c36:	08 95       	ret

00000c38 <DIO_SetPinDirection>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t port, uint8_t pin, uint8_t direction)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     c38:	68 30       	cpi	r22, 0x08	; 8
     c3a:	a8 f5       	brcc	.+106    	; 0xca6 <DIO_SetPinDirection+0x6e>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_dir = NULL_PTR;
   
   /* sets the data and direction pointers according to the required port. */
   switch(port)
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	81 f0       	breq	.+32     	; 0xc60 <DIO_SetPinDirection+0x28>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	28 f0       	brcs	.+10     	; 0xc4e <DIO_SetPinDirection+0x16>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	31 f0       	breq	.+12     	; 0xc54 <DIO_SetPinDirection+0x1c>
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	79 f5       	brne	.+94     	; 0xcaa <DIO_SetPinDirection+0x72>
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <DIO_SetPinDirection+0x22>
   {
      case PORTA:
         prt_port_dir = &PORTA_DIR;
     c4e:	ea e3       	ldi	r30, 0x3A	; 58
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <DIO_SetPinDirection+0x2c>
         break;
      case PORTB:
         prt_port_dir = &PORTB_DIR;
         break;
      case PORTC:
         prt_port_dir = &PORTC_DIR;
     c54:	e4 e3       	ldi	r30, 0x34	; 52
     c56:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <DIO_SetPinDirection+0x2c>
      case PORTD:
         prt_port_dir = &PORTD_DIR;
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_SetPinDirection+0x2c>
   {
      case PORTA:
         prt_port_dir = &PORTA_DIR;
         break;
      case PORTB:
         prt_port_dir = &PORTB_DIR;
     c60:	e7 e3       	ldi	r30, 0x37	; 55
     c62:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* initialize output pin. */
   if(OUTPUT == direction)
     c64:	41 30       	cpi	r20, 0x01	; 1
     c66:	71 f4       	brne	.+28     	; 0xc84 <DIO_SetPinDirection+0x4c>
   {
      /* set pin direction */
      SET_BIT(*prt_port_dir, pin);
     c68:	20 81       	ld	r18, Z
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_SetPinDirection+0x3e>
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	6a 95       	dec	r22
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_SetPinDirection+0x3a>
     c7a:	ba 01       	movw	r22, r20
     c7c:	62 2b       	or	r22, r18
     c7e:	60 83       	st	Z, r22
   else
   {
      return E_DIO_INVALID_DIRECTION;
   }

   return E_DIO_SUCCESS;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	08 95       	ret
   {
      /* set pin direction */
      SET_BIT(*prt_port_dir, pin);
   }
   /* initialize input pin. */
   else if(INPUT == direction)
     c84:	44 23       	and	r20, r20
     c86:	99 f4       	brne	.+38     	; 0xcae <DIO_SetPinDirection+0x76>
   {
      /* set pin direction */
      CLEAR_BIT(*prt_port_dir, pin);
     c88:	20 81       	ld	r18, Z
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	ac 01       	movw	r20, r24
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_SetPinDirection+0x5e>
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	6a 95       	dec	r22
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_SetPinDirection+0x5a>
     c9a:	ba 01       	movw	r22, r20
     c9c:	60 95       	com	r22
     c9e:	62 23       	and	r22, r18
     ca0:	60 83       	st	Z, r22
   else
   {
      return E_DIO_INVALID_DIRECTION;
   }

   return E_DIO_SUCCESS;
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t port, uint8_t pin, uint8_t direction)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	08 95       	ret
         break;
      case PORTD:
         prt_port_dir = &PORTD_DIR;
         break;
      default:
         return E_DIO_INVALID_PORT;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	08 95       	ret
      /* set pin direction */
      CLEAR_BIT(*prt_port_dir, pin);
   }
   else
   {
      return E_DIO_INVALID_DIRECTION;
     cae:	81 e0       	ldi	r24, 0x01	; 1
   }

   return E_DIO_SUCCESS;
}
     cb0:	08 95       	ret

00000cb2 <DIO_EnablePinPullup>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t port,uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     cb2:	68 30       	cpi	r22, 0x08	; 8
     cb4:	10 f5       	brcc	.+68     	; 0xcfa <DIO_EnablePinPullup+0x48>
   
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data and direction pointers according to the required port. */
   switch(port)
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	81 f0       	breq	.+32     	; 0xcda <DIO_EnablePinPullup+0x28>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	28 f0       	brcs	.+10     	; 0xcc8 <DIO_EnablePinPullup+0x16>
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	31 f0       	breq	.+12     	; 0xcce <DIO_EnablePinPullup+0x1c>
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	e1 f4       	brne	.+56     	; 0xcfe <DIO_EnablePinPullup+0x4c>
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <DIO_EnablePinPullup+0x22>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
     cc8:	eb e3       	ldi	r30, 0x3B	; 59
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <DIO_EnablePinPullup+0x2c>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <DIO_EnablePinPullup+0x2c>
      case PORTD:
         prt_port_data = &PORTD_DATA;
     cd4:	e2 e3       	ldi	r30, 0x32	; 50
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_EnablePinPullup+0x2c>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
     cda:	e8 e3       	ldi	r30, 0x38	; 56
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
     cde:	20 81       	ld	r18, Z
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	ac 01       	movw	r20, r24
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_EnablePinPullup+0x3a>
     ce8:	44 0f       	add	r20, r20
     cea:	55 1f       	adc	r21, r21
     cec:	6a 95       	dec	r22
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_EnablePinPullup+0x36>
     cf0:	ba 01       	movw	r22, r20
     cf2:	62 2b       	or	r22, r18
     cf4:	60 83       	st	Z, r22
   
   return E_DIO_SUCCESS;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret
DIO_ERROR_state_t DIO_EnablePinPullup(uint8_t port,uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
     cfe:	83 e0       	ldi	r24, 0x03	; 3
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
     d00:	08 95       	ret

00000d02 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     d02:	68 30       	cpi	r22, 0x08	; 8
     d04:	a8 f5       	brcc	.+106    	; 0xd70 <DIO_WritePin+0x6e>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	81 f0       	breq	.+32     	; 0xd2a <DIO_WritePin+0x28>
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	28 f0       	brcs	.+10     	; 0xd18 <DIO_WritePin+0x16>
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	31 f0       	breq	.+12     	; 0xd1e <DIO_WritePin+0x1c>
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	79 f5       	brne	.+94     	; 0xd74 <DIO_WritePin+0x72>
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <DIO_WritePin+0x22>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <DIO_WritePin+0x2c>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
     d1e:	e5 e3       	ldi	r30, 0x35	; 53
     d20:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <DIO_WritePin+0x2c>
      case PORTD:
         prt_port_data = &PORTD_DATA;
     d24:	e2 e3       	ldi	r30, 0x32	; 50
     d26:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_WritePin+0x2c>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
     d2e:	41 30       	cpi	r20, 0x01	; 1
     d30:	71 f4       	brne	.+28     	; 0xd4e <DIO_WritePin+0x4c>
   {
      SET_BIT(*prt_port_data,pin);
     d32:	20 81       	ld	r18, Z
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	ac 01       	movw	r20, r24
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_WritePin+0x3e>
     d3c:	44 0f       	add	r20, r20
     d3e:	55 1f       	adc	r21, r21
     d40:	6a 95       	dec	r22
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_WritePin+0x3a>
     d44:	ba 01       	movw	r22, r20
     d46:	62 2b       	or	r22, r18
     d48:	60 83       	st	Z, r22
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
     d4e:	44 23       	and	r20, r20
     d50:	99 f4       	brne	.+38     	; 0xd78 <DIO_WritePin+0x76>
   {
      CLEAR_BIT(*prt_port_data,pin);
     d52:	20 81       	ld	r18, Z
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	ac 01       	movw	r20, r24
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_WritePin+0x5e>
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_WritePin+0x5a>
     d64:	ba 01       	movw	r22, r20
     d66:	60 95       	com	r22
     d68:	62 23       	and	r22, r18
     d6a:	60 83       	st	Z, r22
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
     d78:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
     d7a:	08 95       	ret

00000d7c <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	49 f1       	breq	.+82     	; 0xdd4 <DIO_ReadPin+0x58>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
     d82:	68 30       	cpi	r22, 0x08	; 8
     d84:	48 f5       	brcc	.+82     	; 0xdd8 <DIO_ReadPin+0x5c>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	81 f0       	breq	.+32     	; 0xdaa <DIO_ReadPin+0x2e>
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	28 f0       	brcs	.+10     	; 0xd98 <DIO_ReadPin+0x1c>
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	31 f0       	breq	.+12     	; 0xd9e <DIO_ReadPin+0x22>
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	19 f5       	brne	.+70     	; 0xddc <DIO_ReadPin+0x60>
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <DIO_ReadPin+0x28>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
     d98:	e9 e3       	ldi	r30, 0x39	; 57
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <DIO_ReadPin+0x32>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
     d9e:	e3 e3       	ldi	r30, 0x33	; 51
     da0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     da2:	05 c0       	rjmp	.+10     	; 0xdae <DIO_ReadPin+0x32>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
     da4:	e0 e3       	ldi	r30, 0x30	; 48
     da6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_ReadPin+0x32>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
     daa:	e6 e3       	ldi	r30, 0x36	; 54
     dac:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
     dae:	80 81       	ld	r24, Z
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_ReadPin+0x3e>
     db6:	35 95       	asr	r19
     db8:	27 95       	ror	r18
     dba:	6a 95       	dec	r22
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_ReadPin+0x3a>
     dbe:	20 ff       	sbrs	r18, 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <DIO_ReadPin+0x50>
   {
      *data = HIGH;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	fa 01       	movw	r30, r20
     dc6:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
     dcc:	fa 01       	movw	r30, r20
     dce:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
     ddc:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
     dde:	08 95       	ret

00000de0 <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     de0:	68 30       	cpi	r22, 0x08	; 8
     de2:	10 f5       	brcc	.+68     	; 0xe28 <DIO_TogglePin+0x48>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	81 f0       	breq	.+32     	; 0xe08 <DIO_TogglePin+0x28>
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	28 f0       	brcs	.+10     	; 0xdf6 <DIO_TogglePin+0x16>
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	31 f0       	breq	.+12     	; 0xdfc <DIO_TogglePin+0x1c>
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	e1 f4       	brne	.+56     	; 0xe2c <DIO_TogglePin+0x4c>
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <DIO_TogglePin+0x22>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
     df6:	eb e3       	ldi	r30, 0x3B	; 59
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	08 c0       	rjmp	.+16     	; 0xe0c <DIO_TogglePin+0x2c>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
     dfc:	e5 e3       	ldi	r30, 0x35	; 53
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <DIO_TogglePin+0x2c>
      case PORTD:
         prt_port_data = &PORTD_DATA;
     e02:	e2 e3       	ldi	r30, 0x32	; 50
     e04:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_TogglePin+0x2c>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
     e08:	e8 e3       	ldi	r30, 0x38	; 56
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
     e0c:	20 81       	ld	r18, Z
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	ac 01       	movw	r20, r24
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_TogglePin+0x3a>
     e16:	44 0f       	add	r20, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	6a 95       	dec	r22
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_TogglePin+0x36>
     e1e:	ba 01       	movw	r22, r20
     e20:	62 27       	eor	r22, r18
     e22:	60 83       	st	Z, r22
   
   /* return success message. */
   return E_DIO_SUCCESS;
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
     e2e:	08 95       	ret

00000e30 <I2C_Init>:
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CStatusR;
   volatile uint8_t * ptr_I2CBitRateR;
   
   switch(I2C_CH)
     e30:	88 23       	and	r24, r24
     e32:	59 f4       	brne	.+22     	; 0xe4a <I2C_Init+0x1a>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set pre-scalar value */
   *ptr_I2CStatusR = I2C_CH_0_PRESCALER;
     e34:	80 91 a6 00 	lds	r24, 0x00A6
     e38:	81 b9       	out	0x01, r24	; 1

   /* set bit rate */
   *ptr_I2CBitRateR = I2C_CH_0_BIT_RATE;
     e3a:	80 91 a4 00 	lds	r24, 0x00A4
     e3e:	80 b9       	out	0x00, r24	; 0

   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
     e40:	80 91 a5 00 	lds	r24, 0x00A5
     e44:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
         ptr_I2CStatusR = &I2C_STATUS_R;
         ptr_I2CBitRateR = &I2C_BIT_RATE_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     e4a:	82 e0       	ldi	r24, 0x02	; 2
   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     e4c:	08 95       	ret

00000e4e <I2C_SetSlaveAddress>:
I2C_ERROR_state_t I2C_SetSlaveAddress(uint8_t I2C_CH, uint8_t SlaveAddr)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CSlaveAddrR;

   switch(I2C_CH)
     e4e:	88 23       	and	r24, r24
     e50:	11 f4       	brne	.+4      	; 0xe56 <I2C_SetSlaveAddress+0x8>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set slave address */
   *ptr_I2CSlaveAddrR = SlaveAddr;
     e52:	62 b9       	out	0x02, r22	; 2
   
   /* return success message */
   return E_I2C_SUCCESS;
     e54:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CSlaveAddrR = &I2C_SLAVE_ADDR_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     e56:	82 e0       	ldi	r24, 0x02	; 2
   /* set slave address */
   *ptr_I2CSlaveAddrR = SlaveAddr;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     e58:	08 95       	ret

00000e5a <I2C_Start>:
I2C_ERROR_state_t I2C_Start(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     e5a:	88 23       	and	r24, r24
     e5c:	31 f4       	brne	.+12     	; 0xe6a <I2C_Start+0x10>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* clear interrupt flag and set start condition */
   MODIFY_REG(*ptr_I2CControlR, 0xFC, (I2C_INTERRUPT_FLAG| I2C_START_BIT | I2C_EN));
     e5e:	86 b7       	in	r24, 0x36	; 54
     e60:	83 70       	andi	r24, 0x03	; 3
     e62:	84 6a       	ori	r24, 0xA4	; 164
     e64:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     e6a:	82 e0       	ldi	r24, 0x02	; 2
   /* clear interrupt flag and set start condition */
   MODIFY_REG(*ptr_I2CControlR, 0xFC, (I2C_INTERRUPT_FLAG| I2C_START_BIT | I2C_EN));
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     e6c:	08 95       	ret

00000e6e <I2C_RepeatedStart>:
I2C_ERROR_state_t I2C_RepeatedStart(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     e6e:	88 23       	and	r24, r24
     e70:	29 f4       	brne	.+10     	; 0xe7c <I2C_RepeatedStart+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_START_BIT);
     e72:	86 b7       	in	r24, 0x36	; 54
     e74:	80 6a       	ori	r24, 0xA0	; 160
     e76:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
   /* clear interrupt flag and set start condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_START_BIT);
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     e7e:	08 95       	ret

00000e80 <I2C_Write>:
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     e80:	88 23       	and	r24, r24
     e82:	39 f4       	brne	.+14     	; 0xe92 <I2C_Write+0x12>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* store data in the data register */
   *ptr_I2CDataR = Data;
     e84:	63 b9       	out	0x03, r22	; 3
   /* start sending the data bits */
   MODIFY_REG(*ptr_I2CControlR, 0xFC, (I2C_INTERRUPT_FLAG | I2C_EN));
     e86:	86 b7       	in	r24, 0x36	; 54
     e88:	83 70       	andi	r24, 0x03	; 3
     e8a:	84 68       	ori	r24, 0x84	; 132
     e8c:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     e92:	82 e0       	ldi	r24, 0x02	; 2
   /* start sending the data bits */
   MODIFY_REG(*ptr_I2CControlR, 0xFC, (I2C_INTERRUPT_FLAG | I2C_EN));
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     e94:	08 95       	ret

00000e96 <I2C_ReadAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	51 f0       	breq	.+20     	; 0xeb0 <I2C_ReadAck+0x1a>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     e9c:	88 23       	and	r24, r24
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <I2C_ReadAck+0x1e>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_ACK_EN);
     ea0:	86 b7       	in	r24, 0x36	; 54
     ea2:	80 6c       	ori	r24, 0xC0	; 192
     ea4:	86 bf       	out	0x36, r24	; 54

   /* return data received */
   *Data = *ptr_I2CDataR;
     ea6:	83 b1       	in	r24, 0x03	; 3
     ea8:	fb 01       	movw	r30, r22
     eaa:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret
I2C_ERROR_state_t I2C_ReadAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     eb4:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     eb6:	08 95       	ret

00000eb8 <I2C_ReadNoAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
     eb8:	61 15       	cp	r22, r1
     eba:	71 05       	cpc	r23, r1
     ebc:	69 f0       	breq	.+26     	; 0xed8 <I2C_ReadNoAck+0x20>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
     ebe:	88 23       	and	r24, r24
     ec0:	69 f4       	brne	.+26     	; 0xedc <I2C_ReadNoAck+0x24>
      #endif
      default:
         return E_I2C_INVALID_CH;
   }
   /* Clear Ack bit */
   *ptr_I2CControlR &= ~(I2C_ACK_EN);
     ec2:	86 b7       	in	r24, 0x36	; 54
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	86 bf       	out	0x36, r24	; 54
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG);
     ec8:	86 b7       	in	r24, 0x36	; 54
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	86 bf       	out	0x36, r24	; 54

   /* return data received */
   *Data = *ptr_I2CDataR;
     ece:	83 b1       	in	r24, 0x03	; 3
     ed0:	fb 01       	movw	r30, r22
     ed2:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	08 95       	ret
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     edc:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     ede:	08 95       	ret

00000ee0 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
     ee0:	88 23       	and	r24, r24
     ee2:	49 f4       	brne	.+18     	; 0xef6 <I2C_Stop+0x16>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   MODIFY_REG(*ptr_I2CControlR, 0xFC, (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT));
     ee4:	86 b7       	in	r24, 0x36	; 54
     ee6:	83 70       	andi	r24, 0x03	; 3
     ee8:	84 69       	ori	r24, 0x94	; 148
     eea:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT)
     eec:	06 b6       	in	r0, 0x36	; 54
     eee:	04 fc       	sbrc	r0, 4
     ef0:	fd cf       	rjmp	.-6      	; 0xeec <I2C_Stop+0xc>
   {
   }
   /* return success message */
   return E_I2C_SUCCESS;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     ef6:	82 e0       	ldi	r24, 0x02	; 2
   while (*ptr_I2CControlR & I2C_STOP_BIT)
   {
   }
   /* return success message */
   return E_I2C_SUCCESS;
}
     ef8:	08 95       	ret

00000efa <I2C_Status>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
     efa:	61 15       	cp	r22, r1
     efc:	71 05       	cpc	r23, r1
     efe:	41 f0       	breq	.+16     	; 0xf10 <I2C_Status+0x16>
   }
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CStatusR;
   
   switch(I2C_CH)
     f00:	88 23       	and	r24, r24
     f02:	41 f4       	brne	.+16     	; 0xf14 <I2C_Status+0x1a>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
     f04:	81 b1       	in	r24, 0x01	; 1
     f06:	88 7f       	andi	r24, 0xF8	; 248
     f08:	fb 01       	movw	r30, r22
     f0a:	80 83       	st	Z, r24
         
   /* return success message */
   return E_I2C_SUCCESS;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	08 95       	ret
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
   {
      return E_I2C_NULL_PTR;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CStatusR = &I2C_STATUS_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     f14:	82 e0       	ldi	r24, 0x02	; 2
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
         
   /* return success message */
   return E_I2C_SUCCESS;
}
     f16:	08 95       	ret

00000f18 <I2C_EnableInterrupt>:
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     f18:	88 23       	and	r24, r24
     f1a:	29 f4       	brne	.+10     	; 0xf26 <I2C_EnableInterrupt+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* enable interrupt */
   *ptr_I2CControlR |= I2C_INTERRUPT_EN;
     f1c:	86 b7       	in	r24, 0x36	; 54
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     f26:	82 e0       	ldi	r24, 0x02	; 2
   /* enable interrupt */
   *ptr_I2CControlR |= I2C_INTERRUPT_EN;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     f28:	08 95       	ret

00000f2a <I2C_DisableInterrupt>:
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     f2a:	88 23       	and	r24, r24
     f2c:	29 f4       	brne	.+10     	; 0xf38 <I2C_DisableInterrupt+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* disable interrupt */
   *ptr_I2CControlR &= ~(I2C_INTERRUPT_EN);
     f2e:	86 b7       	in	r24, 0x36	; 54
     f30:	8e 7f       	andi	r24, 0xFE	; 254
     f32:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     f38:	82 e0       	ldi	r24, 0x02	; 2
   /* disable interrupt */
   *ptr_I2CControlR &= ~(I2C_INTERRUPT_EN);
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     f3a:	08 95       	ret

00000f3c <I2C_SetCallback>:
* @param [in]  Callback    -  address of the callback function.
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_SetCallback(uint8_t I2C_CH, Ptr_VoidFuncVoid_t Callback)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
     f46:	61 15       	cp	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	61 f0       	breq	.+24     	; 0xf64 <I2C_SetCallback+0x28>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t u8_I2CIndex;
   
   /* get the required I2C data */
   switch(I2C_CH)
     f4c:	88 23       	and	r24, r24
     f4e:	61 f4       	brne	.+24     	; 0xf68 <I2C_SetCallback+0x2c>
   {
      #ifdef I2C_CH_0
      case I2C_CH_0:
         u8_I2CIndex = I2C_CH_0;
     f50:	19 82       	std	Y+1, r1	; 0x01
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set callback function to the required channel */
   g_Callback[u8_I2CIndex] = Callback;
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ea 5e       	subi	r30, 0xEA	; 234
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	71 83       	std	Z+1, r23	; 0x01
     f60:	60 83       	st	Z, r22
   
   /* return success status */
   return E_I2C_SUCCESS;
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <I2C_SetCallback+0x2e>
I2C_ERROR_state_t I2C_SetCallback(uint8_t I2C_CH, Ptr_VoidFuncVoid_t Callback)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
   {
      return E_I2C_NULL_PTR;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <I2C_SetCallback+0x2e>
      case I2C_CH_0:
         u8_I2CIndex = I2C_CH_0;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     f68:	82 e0       	ldi	r24, 0x02	; 2
   /* set callback function to the required channel */
   g_Callback[u8_I2CIndex] = Callback;
   
   /* return success status */
   return E_I2C_SUCCESS;
}
     f6a:	0f 90       	pop	r0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <I2C_ClearIntFlag>:
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     f72:	88 23       	and	r24, r24
     f74:	29 f4       	brne	.+10     	; 0xf80 <I2C_ClearIntFlag+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* clear interrupt flag */
   *ptr_I2CControlR |= I2C_INTERRUPT_FLAG;
     f76:	86 b7       	in	r24, 0x36	; 54
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     f80:	82 e0       	ldi	r24, 0x02	; 2
   /* clear interrupt flag */
   *ptr_I2CControlR |= I2C_INTERRUPT_FLAG;
   
   /* return success message */
   return E_I2C_SUCCESS;
     f82:	08 95       	ret

00000f84 <INTERRUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void INTERRUPTS_Enable(void)
{
   SET_BIT(SREG, BIT7);
     f84:	8f b7       	in	r24, 0x3f	; 63
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	8f bf       	out	0x3f, r24	; 63
}
     f8a:	08 95       	ret

00000f8c <INTERRUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void INTERRUPTS_Disable(void)
{
   CLEAR_BIT(SREG, BIT7);
     f8c:	8f b7       	in	r24, 0x3f	; 63
     f8e:	8f 77       	andi	r24, 0x7F	; 127
     f90:	8f bf       	out	0x3f, r24	; 63
}
     f92:	08 95       	ret

00000f94 <__vector_1>:

/**
* @brief: INT0 ISR.
*/
ISR(INT0_IRQ)
{
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
   if(aptr_ISRAddress[INT0_VECTOR_NUMBER] != NULL_PTR)
     fb6:	e0 91 1e 01 	lds	r30, 0x011E
     fba:	f0 91 1f 01 	lds	r31, 0x011F
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_1+0x30>
   {
      aptr_ISRAddress[INT0_VECTOR_NUMBER]();
     fc2:	09 95       	icall
   }
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti

00000fe6 <__vector_2>:

/**
* @brief: INT1 ISR.
*/
ISR(INT1_IRQ)
{
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
   if(aptr_ISRAddress[INT1_VECTOR_NUMBER] != NULL_PTR)
    1008:	e0 91 20 01 	lds	r30, 0x0120
    100c:	f0 91 21 01 	lds	r31, 0x0121
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <__vector_2+0x30>
   {
      aptr_ISRAddress[INT1_VECTOR_NUMBER]();
    1014:	09 95       	icall
   }
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_3>:

/**
* @brief: INT2 ISR.
*/
ISR(INT2_IRQ)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
   if(aptr_ISRAddress[INT2_VECTOR_NUMBER] != NULL_PTR)
    105a:	e0 91 22 01 	lds	r30, 0x0122
    105e:	f0 91 23 01 	lds	r31, 0x0123
    1062:	30 97       	sbiw	r30, 0x00	; 0
    1064:	09 f0       	breq	.+2      	; 0x1068 <__vector_3+0x30>
   {
      aptr_ISRAddress[INT2_VECTOR_NUMBER]();
    1066:	09 95       	icall
   }
}
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_4>:

/**
* @brief: TIMER2_COMP ISR.
*/
ISR(TIMER2_COMP_IRQ)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER] != NULL_PTR)
    10ac:	e0 91 24 01 	lds	r30, 0x0124
    10b0:	f0 91 25 01 	lds	r31, 0x0125
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__vector_4+0x30>
   {
      aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER]();
    10b8:	09 95       	icall
   }
}
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	7f 91       	pop	r23
    10c8:	6f 91       	pop	r22
    10ca:	5f 91       	pop	r21
    10cc:	4f 91       	pop	r20
    10ce:	3f 91       	pop	r19
    10d0:	2f 91       	pop	r18
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_5>:

/**
* @brief: TIMER2_OVF ISR.
*/
ISR(TIMER2_OVF_IRQ)
{
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER] != NULL_PTR)
    10fe:	e0 91 26 01 	lds	r30, 0x0126
    1102:	f0 91 27 01 	lds	r31, 0x0127
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	09 f0       	breq	.+2      	; 0x110c <__vector_5+0x30>
   {
      aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER]();
    110a:	09 95       	icall
   }
}
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <__vector_6>:

/**
* @brief: TIMER1_CAPT ISR.
*/
ISR(TIMER1_CAPT_IRQ)
{
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	2f 93       	push	r18
    113a:	3f 93       	push	r19
    113c:	4f 93       	push	r20
    113e:	5f 93       	push	r21
    1140:	6f 93       	push	r22
    1142:	7f 93       	push	r23
    1144:	8f 93       	push	r24
    1146:	9f 93       	push	r25
    1148:	af 93       	push	r26
    114a:	bf 93       	push	r27
    114c:	ef 93       	push	r30
    114e:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER] != NULL_PTR)
    1150:	e0 91 28 01 	lds	r30, 0x0128
    1154:	f0 91 29 01 	lds	r31, 0x0129
    1158:	30 97       	sbiw	r30, 0x00	; 0
    115a:	09 f0       	breq	.+2      	; 0x115e <__vector_6+0x30>
   {
      aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER]();
    115c:	09 95       	icall
   }
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_7>:

/**
* @brief: TIMER1_COMPA ISR.
*/
ISR(TIMER1_COMPA_IRQ)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER] != NULL_PTR)
    11a2:	e0 91 2a 01 	lds	r30, 0x012A
    11a6:	f0 91 2b 01 	lds	r31, 0x012B
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_7+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER]();
    11ae:	09 95       	icall
   }
}
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_8>:

/**
* @brief: TIMER1_COMPB ISR.
*/
ISR(TIMER1_COMPB_IRQ)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	6f 93       	push	r22
    11e6:	7f 93       	push	r23
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	af 93       	push	r26
    11ee:	bf 93       	push	r27
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER] != NULL_PTR)
    11f4:	e0 91 2c 01 	lds	r30, 0x012C
    11f8:	f0 91 2d 01 	lds	r31, 0x012D
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__vector_8+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER]();
    1200:	09 95       	icall
   }
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <__vector_9>:

/**
* @brief: TIMER1_OVF ISR.
*/
ISR(TIMER1_OVF_IRQ)
{
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER] != NULL_PTR)
    1246:	e0 91 2e 01 	lds	r30, 0x012E
    124a:	f0 91 2f 01 	lds	r31, 0x012F
    124e:	30 97       	sbiw	r30, 0x00	; 0
    1250:	09 f0       	breq	.+2      	; 0x1254 <__vector_9+0x30>
   {
      aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER]();
    1252:	09 95       	icall
   }
}
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	bf 91       	pop	r27
    125a:	af 91       	pop	r26
    125c:	9f 91       	pop	r25
    125e:	8f 91       	pop	r24
    1260:	7f 91       	pop	r23
    1262:	6f 91       	pop	r22
    1264:	5f 91       	pop	r21
    1266:	4f 91       	pop	r20
    1268:	3f 91       	pop	r19
    126a:	2f 91       	pop	r18
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_10>:

/**
* @brief: TIMER0_COMP ISR.
*/
ISR(TIMER0_COMP_IRQ)
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER] != NULL_PTR)
    1298:	e0 91 30 01 	lds	r30, 0x0130
    129c:	f0 91 31 01 	lds	r31, 0x0131
    12a0:	30 97       	sbiw	r30, 0x00	; 0
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__vector_10+0x30>
   {
      aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER]();
    12a4:	09 95       	icall
   }
}
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <__vector_11>:

/**
* @brief: TIMER0_OVF ISR.
*/
ISR(TIMER0_OVF_IRQ)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	2f 93       	push	r18
    12d4:	3f 93       	push	r19
    12d6:	4f 93       	push	r20
    12d8:	5f 93       	push	r21
    12da:	6f 93       	push	r22
    12dc:	7f 93       	push	r23
    12de:	8f 93       	push	r24
    12e0:	9f 93       	push	r25
    12e2:	af 93       	push	r26
    12e4:	bf 93       	push	r27
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER] != NULL_PTR)
    12ea:	e0 91 32 01 	lds	r30, 0x0132
    12ee:	f0 91 33 01 	lds	r31, 0x0133
    12f2:	30 97       	sbiw	r30, 0x00	; 0
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <__vector_11+0x30>
   {
      aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER]();
    12f6:	09 95       	icall
   }
}
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_12>:

/**
* @brief: SPI_STC ISR.
*/
ISR(SPI_STC_IRQ)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
   if(aptr_ISRAddress[SPI_STC_VECTOR_NUMBER] != NULL_PTR)
    133c:	e0 91 34 01 	lds	r30, 0x0134
    1340:	f0 91 35 01 	lds	r31, 0x0135
    1344:	30 97       	sbiw	r30, 0x00	; 0
    1346:	09 f0       	breq	.+2      	; 0x134a <__vector_12+0x30>
   {
      aptr_ISRAddress[SPI_STC_VECTOR_NUMBER]();
    1348:	09 95       	icall
   }
}
    134a:	ff 91       	pop	r31
    134c:	ef 91       	pop	r30
    134e:	bf 91       	pop	r27
    1350:	af 91       	pop	r26
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	7f 91       	pop	r23
    1358:	6f 91       	pop	r22
    135a:	5f 91       	pop	r21
    135c:	4f 91       	pop	r20
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <__vector_13>:

/**
* @brief: USART_RXC ISR.
*/
ISR(USART_RXC_IRQ)
{
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_RXC_VECTOR_NUMBER] != NULL_PTR)
    138e:	e0 91 36 01 	lds	r30, 0x0136
    1392:	f0 91 37 01 	lds	r31, 0x0137
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	09 f0       	breq	.+2      	; 0x139c <__vector_13+0x30>
   {
      aptr_ISRAddress[USART_RXC_VECTOR_NUMBER]();
    139a:	09 95       	icall
   }
}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_14>:

/**
* @brief: USART_UDRE ISR.
*/
ISR(USART_UDRE_IRQ)
{
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	2f 93       	push	r18
    13ca:	3f 93       	push	r19
    13cc:	4f 93       	push	r20
    13ce:	5f 93       	push	r21
    13d0:	6f 93       	push	r22
    13d2:	7f 93       	push	r23
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	af 93       	push	r26
    13da:	bf 93       	push	r27
    13dc:	ef 93       	push	r30
    13de:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER] != NULL_PTR)
    13e0:	e0 91 38 01 	lds	r30, 0x0138
    13e4:	f0 91 39 01 	lds	r31, 0x0139
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	09 f0       	breq	.+2      	; 0x13ee <__vector_14+0x30>
   {
      aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER]();
    13ec:	09 95       	icall
   }
}
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_15>:

/**
* @brief: USART_TXC ISR.
*/
ISR(USART_TXC_IRQ)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_TXC_VECTOR_NUMBER] != NULL_PTR)
    1432:	e0 91 3a 01 	lds	r30, 0x013A
    1436:	f0 91 3b 01 	lds	r31, 0x013B
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	09 f0       	breq	.+2      	; 0x1440 <__vector_15+0x30>
   {
      aptr_ISRAddress[USART_TXC_VECTOR_NUMBER]();
    143e:	09 95       	icall
   }
}
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <__vector_16>:

/**
* @brief: ADC ISR.
*/
ISR(ADC_IRQ)
{
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
   if(aptr_ISRAddress[ADC_VECTOR_NUMBER] != NULL_PTR)
    1484:	e0 91 3c 01 	lds	r30, 0x013C
    1488:	f0 91 3d 01 	lds	r31, 0x013D
    148c:	30 97       	sbiw	r30, 0x00	; 0
    148e:	09 f0       	breq	.+2      	; 0x1492 <__vector_16+0x30>
   {
      aptr_ISRAddress[ADC_VECTOR_NUMBER]();
    1490:	09 95       	icall
   }
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <__vector_17>:

/**
* @brief: EE_RDY ISR.
*/
ISR(EE_RDY_IRQ)
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
   if(aptr_ISRAddress[EE_RDY_VECTOR_NUMBER] != NULL_PTR)
    14d6:	e0 91 3e 01 	lds	r30, 0x013E
    14da:	f0 91 3f 01 	lds	r31, 0x013F
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__vector_17+0x30>
   {
      aptr_ISRAddress[EE_RDY_VECTOR_NUMBER]();
    14e2:	09 95       	icall
   }
}
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_18>:

/**
* @brief: ANA_COMP ISR.
*/
ISR(ANA_COMP_IRQ)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
   if(aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER] != NULL_PTR)
    1528:	e0 91 40 01 	lds	r30, 0x0140
    152c:	f0 91 41 01 	lds	r31, 0x0141
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	09 f0       	breq	.+2      	; 0x1536 <__vector_18+0x30>
   {
      aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER]();
    1534:	09 95       	icall
   }
}
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_19>:

/**
* @brief: TWI ISR.
*/
ISR(TWI_IRQ)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
   if(aptr_ISRAddress[TWI_VECTOR_NUMBER] != NULL_PTR)
    157a:	e0 91 42 01 	lds	r30, 0x0142
    157e:	f0 91 43 01 	lds	r31, 0x0143
    1582:	30 97       	sbiw	r30, 0x00	; 0
    1584:	09 f0       	breq	.+2      	; 0x1588 <__vector_19+0x30>
   {
      aptr_ISRAddress[TWI_VECTOR_NUMBER]();
    1586:	09 95       	icall
   }
}
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <__vector_20>:

/**
* @brief: SPM_RDY ISR.
*/
ISR(SPM_RDY_IRQ)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
   if(aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER] != NULL_PTR)
    15cc:	e0 91 44 01 	lds	r30, 0x0144
    15d0:	f0 91 45 01 	lds	r31, 0x0145
    15d4:	30 97       	sbiw	r30, 0x00	; 0
    15d6:	09 f0       	breq	.+2      	; 0x15da <__vector_20+0x30>
   {
      aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER]();
    15d8:	09 95       	icall
   }
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <SPI_Init>:
* @param [in]  SpiNumber   -  SPI channel number.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_Init(uint8_t SpiNumber)
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
   switch(SpiNumber)
    1600:	88 23       	and	r24, r24
    1602:	a9 f5       	brne	.+106    	; 0x166e <SPI_Init+0x72>
   {
      #ifdef SPI_CH_0
      case SPI_CH_0:
         /* initialize master node */
         if( (SPI_CH_0_CONTROL_MASK & MASTER_SELECT) )
    1604:	80 91 b0 00 	lds	r24, 0x00B0
    1608:	84 ff       	sbrs	r24, 4
    160a:	26 c0       	rjmp	.+76     	; 0x1658 <SPI_Init+0x5c>
         {
            /* initialize slave select pins */
            #ifdef SPI_CH_0_SS_CH_0
               DIO_SetPinDirection(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, OUTPUT);
    160c:	d0 91 a8 00 	lds	r29, 0x00A8
    1610:	c0 91 a7 00 	lds	r28, 0x00A7
    1614:	8d 2f       	mov	r24, r29
    1616:	6c 2f       	mov	r22, r28
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 1c 06 	call	0xc38	; 0xc38 <DIO_SetPinDirection>
               DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, HIGH);
    161e:	8d 2f       	mov	r24, r29
    1620:	6c 2f       	mov	r22, r28
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
            #endif
            /* initialize MOSI and clock source pins */
            DIO_SetPinDirection(SPI_CH_0_MOSI_PORT, SPI_CH_0_MOSI_PIN, OUTPUT);
    1628:	80 91 ae 00 	lds	r24, 0x00AE
    162c:	60 91 ad 00 	lds	r22, 0x00AD
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 1c 06 	call	0xc38	; 0xc38 <DIO_SetPinDirection>
            DIO_SetPinDirection(SPI_CH_0_SCK_PORT, SPI_CH_0_SCK_PIN, OUTPUT);
    1636:	80 91 aa 00 	lds	r24, 0x00AA
    163a:	60 91 a9 00 	lds	r22, 0x00A9
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 1c 06 	call	0xc38	; 0xc38 <DIO_SetPinDirection>
            /* sets SPI control register */
            SPI_STATUS_R |= SPI_CH_0_DOUBLE_SPEED;
    1644:	9e b1       	in	r25, 0x0e	; 14
    1646:	80 91 af 00 	lds	r24, 0x00AF
    164a:	89 2b       	or	r24, r25
    164c:	8e b9       	out	0x0e, r24	; 14
            SPI_CONTROL_R = SPI_CH_0_CONTROL_MASK;
    164e:	80 91 b0 00 	lds	r24, 0x00B0
    1652:	8d b9       	out	0x0d, r24	; 13
         return E_SPI_INVALID_CH;
      
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0c c0       	rjmp	.+24     	; 0x1670 <SPI_Init+0x74>
         }
         /* initialize slave node */
         else
         {
            /* initialize MISO pins */
            DIO_SetPinDirection(SPI_CH_0_MISO_PORT, SPI_CH_0_MISO_PIN, OUTPUT);
    1658:	80 91 ac 00 	lds	r24, 0x00AC
    165c:	60 91 ab 00 	lds	r22, 0x00AB
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 1c 06 	call	0xc38	; 0xc38 <DIO_SetPinDirection>
            /* sets SPI control register */
            SPI_CONTROL_R = SPI_EN;
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	8d b9       	out	0x0d, r24	; 13
         return E_SPI_INVALID_CH;
      
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <SPI_Init+0x74>
            SPI_CONTROL_R = SPI_EN;
         }
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    166e:	86 e0       	ldi	r24, 0x06	; 6
      
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <SPI_TransmitChar>:
* @param [in]  slave_CH    -  slave select line.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH)
{
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	d6 2f       	mov	r29, r22
    1680:	c4 2f       	mov	r28, r20
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
    1682:	88 23       	and	r24, r24
    1684:	e1 f4       	brne	.+56     	; 0x16be <SPI_TransmitChar+0x48>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
    1686:	44 23       	and	r20, r20
    1688:	19 f0       	breq	.+6      	; 0x1690 <SPI_TransmitChar+0x1a>
    168a:	4f 3f       	cpi	r20, 0xFF	; 255
    168c:	d1 f4       	brne	.+52     	; 0x16c2 <SPI_TransmitChar+0x4c>
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <SPI_TransmitChar+0x2c>
   {
      #ifdef SPI_CH_0_SS_CH_0
      case SPI_CH_0_SS_CH_0:
         u8_SSPort = SPI_CH_0_SS_CH_0_PORT;
    1690:	00 91 a8 00 	lds	r16, 0x00A8
         u8_SSPin = SPI_CH_0_SS_CH_0_PIN;
    1694:	10 91 a7 00 	lds	r17, 0x00A7
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
    1698:	80 2f       	mov	r24, r16
    169a:	61 2f       	mov	r22, r17
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
    16a2:	df b9       	out	0x0f, r29	; 15
   
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ));
    16a4:	77 9b       	sbis	0x0e, 7	; 14
    16a6:	fe cf       	rjmp	.-4      	; 0x16a4 <SPI_TransmitChar+0x2e>
   /* check if there is a write collision error flag */
   if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
    16a8:	76 99       	sbic	0x0e, 6	; 14
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <SPI_TransmitChar+0x50>
   {
      return E_SPI_WRITE_COLLISION;
   }
   
   if(SLAVE_SS_CH != slave_CH)
    16ac:	cf 3f       	cpi	r28, 0xFF	; 255
    16ae:	69 f0       	breq	.+26     	; 0x16ca <SPI_TransmitChar+0x54>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
    16b0:	80 2f       	mov	r24, r16
    16b2:	61 2f       	mov	r22, r17
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <SPI_TransmitChar+0x56>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    16be:	86 e0       	ldi	r24, 0x06	; 6
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <SPI_TransmitChar+0x56>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <SPI_TransmitChar+0x56>
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ));
   /* check if there is a write collision error flag */
   if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
   {
      return E_SPI_WRITE_COLLISION;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <SPI_TransmitChar+0x56>
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <SPI_ReceiveChar>:
* @param [out] RxData      -  address to where to store the received character.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_ReceiveChar(uint8_t SpiNumber,uint8_t * RxData,uint8_t slave_CH)
{
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	eb 01       	movw	r28, r22
    16e2:	14 2f       	mov	r17, r20
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
    16e4:	20 97       	sbiw	r28, 0x00	; 0
    16e6:	01 f1       	breq	.+64     	; 0x1728 <SPI_ReceiveChar+0x52>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
    16e8:	88 23       	and	r24, r24
    16ea:	01 f5       	brne	.+64     	; 0x172c <SPI_ReceiveChar+0x56>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
    16ec:	44 23       	and	r20, r20
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <SPI_ReceiveChar+0x20>
    16f0:	4f 3f       	cpi	r20, 0xFF	; 255
    16f2:	f1 f4       	brne	.+60     	; 0x1730 <SPI_ReceiveChar+0x5a>
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <SPI_ReceiveChar+0x38>
   {
      #ifdef SPI_CH_0_SS_CH_0
      case SPI_CH_0_SS_CH_0:
         u8_SSPort = SPI_CH_0_SS_CH_0_PORT;
    16f6:	00 91 a8 00 	lds	r16, 0x00A8
         u8_SSPin = SPI_CH_0_SS_CH_0_PIN;
    16fa:	f0 90 a7 00 	lds	r15, 0x00A7
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
    16fe:	80 2f       	mov	r24, r16
    1700:	6f 2d       	mov	r22, r15
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
    1708:	02 c0       	rjmp	.+4      	; 0x170e <SPI_ReceiveChar+0x38>
   
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
   {
      /* check if there is a write collision error flag */
      if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
    170a:	76 99       	sbic	0x0e, 6	; 14
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <SPI_ReceiveChar+0x5e>
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
   }
   
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
    170e:	77 9b       	sbis	0x0e, 7	; 14
    1710:	fc cf       	rjmp	.-8      	; 0x170a <SPI_ReceiveChar+0x34>
         return E_SPI_WRITE_COLLISION;
      }
   }
   
   /* get data */
   *RxData = *ptr_SPIDataR;
    1712:	8f b1       	in	r24, 0x0f	; 15
    1714:	88 83       	st	Y, r24
   
   if(SLAVE_SS_CH != slave_CH)
    1716:	1f 3f       	cpi	r17, 0xFF	; 255
    1718:	79 f0       	breq	.+30     	; 0x1738 <SPI_ReceiveChar+0x62>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
    171a:	80 2f       	mov	r24, r16
    171c:	6f 2d       	mov	r22, r15
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	09 c0       	rjmp	.+18     	; 0x173a <SPI_ReceiveChar+0x64>
SPI_ERROR_state_t SPI_ReceiveChar(uint8_t SpiNumber,uint8_t * RxData,uint8_t slave_CH)
{
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
   {
      return E_SPI_NULL_PTR;
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	07 c0       	rjmp	.+14     	; 0x173a <SPI_ReceiveChar+0x64>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    172c:	86 e0       	ldi	r24, 0x06	; 6
    172e:	05 c0       	rjmp	.+10     	; 0x173a <SPI_ReceiveChar+0x64>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
    1730:	85 e0       	ldi	r24, 0x05	; 5
    1732:	03 c0       	rjmp	.+6      	; 0x173a <SPI_ReceiveChar+0x64>
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
   {
      /* check if there is a write collision error flag */
      if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
      {
         return E_SPI_WRITE_COLLISION;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	01 c0       	rjmp	.+2      	; 0x173a <SPI_ReceiveChar+0x64>
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    1738:	80 e0       	ldi	r24, 0x00	; 0
   
}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	08 95       	ret

00001746 <SPI_TransmitString>:
* @param [in]  TxString    -  array of characters to send.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitString(uint8_t SpiNumber, uint8_t * TxString, uint8_t slave_CH)
{
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	8b 01       	movw	r16, r22
    1752:	c4 2f       	mov	r28, r20
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
    1754:	61 15       	cp	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	59 f1       	breq	.+86     	; 0x17b0 <SPI_TransmitString+0x6a>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
    175a:	88 23       	and	r24, r24
    175c:	59 f5       	brne	.+86     	; 0x17b4 <SPI_TransmitString+0x6e>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
    175e:	44 23       	and	r20, r20
    1760:	19 f0       	breq	.+6      	; 0x1768 <SPI_TransmitString+0x22>
    1762:	4f 3f       	cpi	r20, 0xFF	; 255
    1764:	49 f5       	brne	.+82     	; 0x17b8 <SPI_TransmitString+0x72>
    1766:	09 c0       	rjmp	.+18     	; 0x177a <SPI_TransmitString+0x34>
   {
      #ifdef SPI_CH_0_SS_CH_0
      case SPI_CH_0_SS_CH_0:
         u8_SSPort = SPI_CH_0_SS_CH_0_PORT;
    1768:	d0 91 a8 00 	lds	r29, 0x00A8
         u8_SSPin = SPI_CH_0_SS_CH_0_PIN;
    176c:	f0 90 a7 00 	lds	r15, 0x00A7
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
    1770:	8d 2f       	mov	r24, r29
    1772:	6f 2d       	mov	r22, r15
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
    177a:	f8 01       	movw	r30, r16
    177c:	80 81       	ld	r24, Z
    177e:	88 23       	and	r24, r24
    1780:	71 f0       	breq	.+28     	; 0x179e <SPI_TransmitString+0x58>
    1782:	90 e0       	ldi	r25, 0x00	; 0
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
    1784:	8f b9       	out	0x0f, r24	; 15
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
    1786:	02 c0       	rjmp	.+4      	; 0x178c <SPI_TransmitString+0x46>
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
    1788:	76 99       	sbic	0x0e, 6	; 14
    178a:	18 c0       	rjmp	.+48     	; 0x17bc <SPI_TransmitString+0x76>
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
    178c:	77 9b       	sbis	0x0e, 7	; 14
    178e:	fc cf       	rjmp	.-8      	; 0x1788 <SPI_TransmitString+0x42>
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
         }
      }
      counter++;
    1790:	9f 5f       	subi	r25, 0xFF	; 255
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
   }
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
    1792:	f8 01       	movw	r30, r16
    1794:	e9 0f       	add	r30, r25
    1796:	f1 1d       	adc	r31, r1
    1798:	80 81       	ld	r24, Z
    179a:	88 23       	and	r24, r24
    179c:	99 f7       	brne	.-26     	; 0x1784 <SPI_TransmitString+0x3e>
         }
      }
      counter++;
   }
   
   if(SLAVE_SS_CH != slave_CH)
    179e:	cf 3f       	cpi	r28, 0xFF	; 255
    17a0:	79 f0       	breq	.+30     	; 0x17c0 <SPI_TransmitString+0x7a>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
    17a2:	8d 2f       	mov	r24, r29
    17a4:	6f 2d       	mov	r22, r15
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <SPI_TransmitString+0x7c>
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
   {
      return E_SPI_NULL_PTR;
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <SPI_TransmitString+0x7c>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <SPI_TransmitString+0x7c>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
    17b8:	85 e0       	ldi	r24, 0x05	; 5
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <SPI_TransmitString+0x7c>
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <SPI_TransmitString+0x7c>
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	08 95       	ret

000017ce <SPI_ReceiveString>:
* @param [out] RxString    -  array of characters to receive.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_ReceiveString(uint8_t SpiNumber,uint8_t * RxString,uint8_t slave_CH)
{
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	eb 01       	movw	r28, r22
    17da:	14 2f       	mov	r17, r20
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxString)
    17dc:	20 97       	sbiw	r28, 0x00	; 0
    17de:	e9 f1       	breq	.+122    	; 0x185a <SPI_ReceiveString+0x8c>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
    17e0:	88 23       	and	r24, r24
    17e2:	e9 f5       	brne	.+122    	; 0x185e <SPI_ReceiveString+0x90>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
    17e4:	44 23       	and	r20, r20
    17e6:	19 f0       	breq	.+6      	; 0x17ee <SPI_ReceiveString+0x20>
    17e8:	4f 3f       	cpi	r20, 0xFF	; 255
    17ea:	d9 f5       	brne	.+118    	; 0x1862 <SPI_ReceiveString+0x94>
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <SPI_ReceiveString+0x32>
   {
      #ifdef SPI_CH_0_SS_CH_0
      case SPI_CH_0_SS_CH_0:
         u8_SSPort = SPI_CH_0_SS_CH_0_PORT;
    17ee:	00 91 a8 00 	lds	r16, 0x00A8
         u8_SSPin = SPI_CH_0_SS_CH_0_PIN;
    17f2:	f0 90 a7 00 	lds	r15, 0x00A7
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
    17f6:	80 2f       	mov	r24, r16
    17f8:	6f 2d       	mov	r22, r15
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
         {
            counter -= DATA_RETURN_TO_PREV_INDEX;
         }
         else
         {
            counter = DATA_COUNTER_START;
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <SPI_ReceiveString+0x44>
   {
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
    1806:	76 9b       	sbis	0x0e, 6	; 14
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <SPI_ReceiveString+0x44>
    180a:	2d c0       	rjmp	.+90     	; 0x1866 <SPI_ReceiveString+0x98>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
         break;
      }
      counter++;
    180c:	28 2f       	mov	r18, r24
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <SPI_ReceiveString+0x44>
         {
            counter -= DATA_RETURN_TO_PREV_INDEX;
         }
         else
         {
            counter = DATA_COUNTER_START;
    1810:	24 2f       	mov	r18, r20
   
   /* receives all characters until it gets a new line character */
   while(1)
   {
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
    1812:	77 9b       	sbis	0x0e, 7	; 14
    1814:	f8 cf       	rjmp	.-16     	; 0x1806 <SPI_ReceiveString+0x38>
         {
            return E_SPI_WRITE_COLLISION;
         }
      }
      /* get data */
      RxString[counter] = *ptr_SPIDataR;
    1816:	82 2f       	mov	r24, r18
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	3f b1       	in	r19, 0x0f	; 15
    181c:	fe 01       	movw	r30, r28
    181e:	e8 0f       	add	r30, r24
    1820:	f9 1f       	adc	r31, r25
    1822:	30 83       	st	Z, r19
      
      /* check if new line is received */
      if(RxString[counter] == NEW_LINE)
    1824:	3d 30       	cpi	r19, 0x0D	; 13
    1826:	29 f4       	brne	.+10     	; 0x1832 <SPI_ReceiveString+0x64>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
    1828:	11 82       	std	Z+1, r1	; 0x01
            counter = DATA_COUNTER_START;
         }
      }
   }
   
   if(SLAVE_SS_CH != slave_CH)
    182a:	1f 3f       	cpi	r17, 0xFF	; 255
    182c:	79 f4       	brne	.+30     	; 0x184c <SPI_ReceiveString+0x7e>
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	1b c0       	rjmp	.+54     	; 0x1868 <SPI_ReceiveString+0x9a>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
         break;
      }
      counter++;
    1832:	82 2f       	mov	r24, r18
    1834:	8f 5f       	subi	r24, 0xFF	; 255
      
      /* check if it got a back space character */
      if(RxString[counter - DATA_SIZE] == BACKSPACE)
    1836:	fe 01       	movw	r30, r28
    1838:	e8 0f       	add	r30, r24
    183a:	f1 1d       	adc	r31, r1
    183c:	31 97       	sbiw	r30, 0x01	; 1
    183e:	90 81       	ld	r25, Z
    1840:	98 30       	cpi	r25, 0x08	; 8
    1842:	21 f7       	brne	.-56     	; 0x180c <SPI_ReceiveString+0x3e>
      {
         /* return to the previous character to overwrite it */
         if (counter - DATA_SIZE != DATA_COUNTER_START)
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	21 f3       	breq	.-56     	; 0x1810 <SPI_ReceiveString+0x42>
         {
            counter -= DATA_RETURN_TO_PREV_INDEX;
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	e3 cf       	rjmp	.-58     	; 0x1812 <SPI_ReceiveString+0x44>
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
    184c:	80 2f       	mov	r24, r16
    184e:	6f 2d       	mov	r22, r15
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_WritePin>
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <SPI_ReceiveString+0x9a>
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxString)
   {
      return E_SPI_NULL_PTR;
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <SPI_ReceiveString+0x9a>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    185e:	86 e0       	ldi	r24, 0x06	; 6
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <SPI_ReceiveString+0x9a>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
    1862:	85 e0       	ldi	r24, 0x05	; 5
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <SPI_ReceiveString+0x9a>
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
    1866:	81 e0       	ldi	r24, 0x01	; 1
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	08 95       	ret

00001874 <SPI_EnableInterrupt>:
SPI_ERROR_state_t SPI_EnableInterrupt(uint8_t SpiNumber)
{
   volatile uint8_t * ptr_SPIControlR;
   
   /* get the required spi data */
   switch(SpiNumber)
    1874:	88 23       	and	r24, r24
    1876:	11 f4       	brne	.+4      	; 0x187c <SPI_EnableInterrupt+0x8>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* enable interrupt */
   *ptr_SPIControlR |= SPI_INTERRUPT_EN;
    1878:	6f 9a       	sbi	0x0d, 7	; 13
   
   /* return success message */
   return E_SPI_SUCCESS;
    187a:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIControlR = &SPI_CONTROL_R;
      break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    187c:	86 e0       	ldi	r24, 0x06	; 6
   /* enable interrupt */
   *ptr_SPIControlR |= SPI_INTERRUPT_EN;
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    187e:	08 95       	ret

00001880 <SPI_DisableInterrupt>:
SPI_ERROR_state_t SPI_DisableInterrupt(uint8_t SpiNumber)
{
   volatile uint8_t * ptr_SPIControlR;
   
   /* get the required SPI data */
   switch(SpiNumber)
    1880:	88 23       	and	r24, r24
    1882:	11 f4       	brne	.+4      	; 0x1888 <SPI_DisableInterrupt+0x8>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* enable interrupt */
   *ptr_SPIControlR &= ~(SPI_INTERRUPT_EN);
    1884:	6f 98       	cbi	0x0d, 7	; 13
   
   /* return success message */
   return E_SPI_SUCCESS;
    1886:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIControlR = &SPI_CONTROL_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    1888:	86 e0       	ldi	r24, 0x06	; 6
   /* enable interrupt */
   *ptr_SPIControlR &= ~(SPI_INTERRUPT_EN);
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    188a:	08 95       	ret

0000188c <SPI_SetCallback>:
* @param [in]  Callback    -  address of the callback function.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback)
{
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	61 f0       	breq	.+24     	; 0x18b4 <SPI_SetCallback+0x28>
   }
   
   volatile uint8_t u8_SPIIndex;
   
   /* get the required spi data */
   switch(SpiNumber)
    189c:	88 23       	and	r24, r24
    189e:	61 f4       	brne	.+24     	; 0x18b8 <SPI_SetCallback+0x2c>
   {
      #ifdef SPI_CH_0
      case SPI_CH_0:
         u8_SPIIndex = SPI_CH_0;
    18a0:	19 82       	std	Y+1, r1	; 0x01
      #endif
      default:
         return E_SPI_INVALID_CH;
   }
   
   g_Callback[u8_SPIIndex] = Callback;
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	e8 5e       	subi	r30, 0xE8	; 232
    18ac:	fe 4f       	sbci	r31, 0xFE	; 254
    18ae:	71 83       	std	Z+1, r23	; 0x01
    18b0:	60 83       	st	Z, r22
      
   /* return success status */
   return E_SPI_SUCCESS;
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <SPI_SetCallback+0x2e>
SPI_ERROR_state_t SPI_SetCallback(uint8_t SpiNumber, Ptr_VoidFuncVoid_t Callback)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
   {
      return E_SPI_NULL_PTR;
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <SPI_SetCallback+0x2e>
      case SPI_CH_0:
         u8_SPIIndex = SPI_CH_0;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    18b8:	86 e0       	ldi	r24, 0x06	; 6
   
   g_Callback[u8_SPIIndex] = Callback;
      
   /* return success status */
   return E_SPI_SUCCESS;
}
    18ba:	0f 90       	pop	r0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <SPI_SetData>:
SPI_ERROR_state_t SPI_SetData(uint8_t SpiNumber, uint8_t TxChar)
{
   volatile uint8_t * ptr_SPIDataR;
   
   /* get the required spi data */
   switch(SpiNumber)
    18c2:	88 23       	and	r24, r24
    18c4:	11 f4       	brne	.+4      	; 0x18ca <SPI_SetData+0x8>
      default:
         return E_SPI_INVALID_CH;
   }
         
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
    18c6:	6f b9       	out	0x0f, r22	; 15
   
   /* return success message */
   return E_SPI_SUCCESS;
    18c8:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIDataR = &SPI_DATA_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    18ca:	86 e0       	ldi	r24, 0x06	; 6
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    18cc:	08 95       	ret

000018ce <SPI_GetData>:
* @return function error state.
*/
SPI_ERROR_state_t SPI_GetData(uint8_t SpiNumber,uint8_t * RxData)
{
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
    18ce:	61 15       	cp	r22, r1
    18d0:	71 05       	cpc	r23, r1
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <SPI_GetData+0x14>
   }
   
   volatile uint8_t * ptr_SPIDataR;
   
   /* get the required spi data */
   switch(SpiNumber)
    18d4:	88 23       	and	r24, r24
    18d6:	39 f4       	brne	.+14     	; 0x18e6 <SPI_GetData+0x18>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get data */
   *RxData = *ptr_SPIDataR;
    18d8:	8f b1       	in	r24, 0x0f	; 15
    18da:	fb 01       	movw	r30, r22
    18dc:	80 83       	st	Z, r24
   
   /* return success message */
   return E_SPI_SUCCESS;
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
SPI_ERROR_state_t SPI_GetData(uint8_t SpiNumber,uint8_t * RxData)
{
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
   {
      return E_SPI_NULL_PTR;
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIDataR = &SPI_DATA_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    18e6:	86 e0       	ldi	r24, 0x06	; 6
   /* get data */
   *RxData = *ptr_SPIDataR;
   
   /* return success message */
   return E_SPI_SUCCESS;
    18e8:	08 95       	ret

000018ea <UART_Init>:
*
* @return function error state.
*/
UART_ERROR_state_t UART_Init(uint8_t UartNumber)
{
   switch(UartNumber)
    18ea:	88 23       	and	r24, r24
    18ec:	e1 f4       	brne	.+56     	; 0x1926 <UART_Init+0x3c>
   {
      #ifdef UART_CH_0
      case UART_CH_0:
         /* make sure valid baud rate is given */
         if(MAX_BAUD_VALUE < UART_CH_0_BaudRate)
    18ee:	80 91 b1 00 	lds	r24, 0x00B1
    18f2:	90 91 b2 00 	lds	r25, 0x00B2
    18f6:	8f 3f       	cpi	r24, 0xFF	; 255
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f0       	breq	.+2      	; 0x18fe <UART_Init+0x14>
    18fc:	b0 f4       	brcc	.+44     	; 0x192a <UART_Init+0x40>
         {
            return E_UART_INVALID_BAUD_RATE;
         }
      
         /* Enable Receiver and Transmitter */
         UART_CONTROL_R = UART_CH_0_CONTROL;
    18fe:	80 91 b4 00 	lds	r24, 0x00B4
    1902:	8a b9       	out	0x0a, r24	; 10
         /* Set Odd parity, 2 stop bits and 8 bits data size */
         UART_CONTROL_2_R = UART_CH_0_CONTROL_2;
    1904:	80 91 b3 00 	lds	r24, 0x00B3
    1908:	80 bd       	out	0x20, r24	; 32
      
         /* Set Baud Rate low bits */
         UART_BAUDRATE_LOW_R = (uint8_t)UART_CH_0_BaudRate;
    190a:	80 91 b1 00 	lds	r24, 0x00B1
    190e:	89 b9       	out	0x09, r24	; 9
         /* Set Baud Rate high bits if needed */
         if(BAUD_MAX_LOW_BITS < UART_CH_0_BaudRate)
    1910:	80 91 b1 00 	lds	r24, 0x00B1
    1914:	90 91 b2 00 	lds	r25, 0x00B2
    1918:	8f 3f       	cpi	r24, 0xFF	; 255
    191a:	91 05       	cpc	r25, r1
    191c:	41 f0       	breq	.+16     	; 0x192e <UART_Init+0x44>
    191e:	38 f0       	brcs	.+14     	; 0x192e <UART_Init+0x44>
         {
            UART_BAUDRATE_HIGH_R = (uint8_t)( UART_CH_0_BaudRate >> BAUD_HIGH_BITS_SHIFT );
    1920:	90 bd       	out	0x20, r25	; 32
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	08 95       	ret
         }
         
         break;
      #endif
      default:
         return E_UART_INVALID_CH;
    1926:	86 e0       	ldi	r24, 0x06	; 6
    1928:	08 95       	ret
      #ifdef UART_CH_0
      case UART_CH_0:
         /* make sure valid baud rate is given */
         if(MAX_BAUD_VALUE < UART_CH_0_BaudRate)
         {
            return E_UART_INVALID_BAUD_RATE;
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	08 95       	ret
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
    192e:	80 e0       	ldi	r24, 0x00	; 0
}
    1930:	08 95       	ret

00001932 <UART_TransmitChar>:
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    1932:	88 23       	and	r24, r24
    1934:	29 f4       	brne	.+10     	; 0x1940 <UART_TransmitChar+0xe>
      default:
         return E_UART_INVALID_CH;
   }

   /* Wait for empty transmit buffer */
   while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
    1936:	5d 9b       	sbis	0x0b, 5	; 11
    1938:	fe cf       	rjmp	.-4      	; 0x1936 <UART_TransmitChar+0x4>
   
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
    193a:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1940:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1942:	08 95       	ret

00001944 <UART_ReceiveChar>:
* @return function error state.
*/
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	49 f0       	breq	.+18     	; 0x195c <UART_ReceiveChar+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    194a:	88 23       	and	r24, r24
    194c:	49 f4       	brne	.+18     	; 0x1960 <UART_ReceiveChar+0x1c>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* Wait for data to be received */
   while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
    194e:	5f 9b       	sbis	0x0b, 7	; 11
    1950:	fe cf       	rjmp	.-4      	; 0x194e <UART_ReceiveChar+0xa>
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
    1952:	8c b1       	in	r24, 0x0c	; 12
    1954:	fb 01       	movw	r30, r22
    1956:	80 83       	st	Z, r24
   
   /* return success status */
   return E_UART_SUCCESS;
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
   {
      return E_UART_NULL_PTR;
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1960:	86 e0       	ldi	r24, 0x06	; 6
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1962:	08 95       	ret

00001964 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
    1964:	61 15       	cp	r22, r1
    1966:	71 05       	cpc	r23, r1
    1968:	91 f0       	breq	.+36     	; 0x198e <UART_TransmitString+0x2a>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    196a:	88 23       	and	r24, r24
    196c:	91 f4       	brne	.+36     	; 0x1992 <UART_TransmitString+0x2e>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
    196e:	fb 01       	movw	r30, r22
    1970:	80 81       	ld	r24, Z
    1972:	88 23       	and	r24, r24
    1974:	81 f0       	breq	.+32     	; 0x1996 <UART_TransmitString+0x32>
    1976:	90 e0       	ldi	r25, 0x00	; 0
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
    1978:	5d 9b       	sbis	0x0b, 5	; 11
    197a:	fe cf       	rjmp	.-4      	; 0x1978 <UART_TransmitString+0x14>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
    197c:	8c b9       	out	0x0c, r24	; 12
      counter++;
    197e:	9f 5f       	subi	r25, 0xFF	; 255
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
    1980:	fb 01       	movw	r30, r22
    1982:	e9 0f       	add	r30, r25
    1984:	f1 1d       	adc	r31, r1
    1986:	80 81       	ld	r24, Z
    1988:	88 23       	and	r24, r24
    198a:	b1 f7       	brne	.-20     	; 0x1978 <UART_TransmitString+0x14>
    198c:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    1990:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1992:	86 e0       	ldi	r24, 0x06	; 6
    1994:	08 95       	ret
      *ptru8_UARTDataR = TxString[counter];
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
    1996:	80 e0       	ldi	r24, 0x00	; 0
}
    1998:	08 95       	ret

0000199a <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
    199a:	61 15       	cp	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	19 f1       	breq	.+70     	; 0x19e6 <UART_ReceiveString+0x4c>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    19a0:	88 23       	and	r24, r24
    19a2:	21 f0       	breq	.+8      	; 0x19ac <UART_ReceiveString+0x12>
    19a4:	22 c0       	rjmp	.+68     	; 0x19ea <UART_ReceiveString+0x50>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
    19a6:	84 2f       	mov	r24, r20
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    19a8:	28 2f       	mov	r18, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <UART_ReceiveString+0x16>
    19ac:	20 e0       	ldi	r18, 0x00	; 0
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
    19ae:	40 e0       	ldi	r20, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
    19b0:	5f 9b       	sbis	0x0b, 7	; 11
    19b2:	fe cf       	rjmp	.-4      	; 0x19b0 <UART_ReceiveString+0x16>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
    19b4:	82 2f       	mov	r24, r18
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	3c b1       	in	r19, 0x0c	; 12
    19ba:	fb 01       	movw	r30, r22
    19bc:	e8 0f       	add	r30, r24
    19be:	f9 1f       	adc	r31, r25
    19c0:	30 83       	st	Z, r19
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
    19c2:	3d 30       	cpi	r19, 0x0D	; 13
    19c4:	19 f4       	brne	.+6      	; 0x19cc <UART_ReceiveString+0x32>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
    19c6:	11 82       	std	Z+1, r1	; 0x01
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
    19cc:	82 2f       	mov	r24, r18
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
    19d0:	fb 01       	movw	r30, r22
    19d2:	e8 0f       	add	r30, r24
    19d4:	f1 1d       	adc	r31, r1
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	90 81       	ld	r25, Z
    19da:	98 30       	cpi	r25, 0x08	; 8
    19dc:	29 f7       	brne	.-54     	; 0x19a8 <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	11 f3       	breq	.-60     	; 0x19a6 <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
    19e2:	82 50       	subi	r24, 0x02	; 2
    19e4:	e1 cf       	rjmp	.-62     	; 0x19a8 <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
    19e6:	84 e0       	ldi	r24, 0x04	; 4
    19e8:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    19ea:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
    19ec:	08 95       	ret

000019ee <UART_EnableInterrupt>:
* @return function error state.
*/
UART_ERROR_state_t UART_EnableInterrupt(uint8_t UartNumber,uint8_t UartInterruptType)
{
   /* making sure a valid interrupt type was sent to the function */
   if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
    19ee:	60 38       	cpi	r22, 0x80	; 128
    19f0:	11 f0       	breq	.+4      	; 0x19f6 <UART_EnableInterrupt+0x8>
    19f2:	60 34       	cpi	r22, 0x40	; 64
    19f4:	39 f4       	brne	.+14     	; 0x1a04 <UART_EnableInterrupt+0x16>
      /* do nothing */
   }
   
   volatile uint8_t * ptru8_UARTControlR;
   
   switch(UartNumber)
    19f6:	88 23       	and	r24, r24
    19f8:	39 f4       	brne	.+14     	; 0x1a08 <UART_EnableInterrupt+0x1a>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* enable interrupt */
   *ptru8_UARTControlR |= UartInterruptType;
    19fa:	8a b1       	in	r24, 0x0a	; 10
    19fc:	68 2b       	or	r22, r24
    19fe:	6a b9       	out	0x0a, r22	; 10
   
   /* return success status */
   return E_UART_SUCCESS;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	08 95       	ret
UART_ERROR_state_t UART_EnableInterrupt(uint8_t UartNumber,uint8_t UartInterruptType)
{
   /* making sure a valid interrupt type was sent to the function */
   if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
   {
      return E_UART_INVALID_INT_TYPE;
    1a04:	87 e0       	ldi	r24, 0x07	; 7
    1a06:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTControlR = &UART_CONTROL_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1a08:	86 e0       	ldi	r24, 0x06	; 6
   /* enable interrupt */
   *ptru8_UARTControlR |= UartInterruptType;
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1a0a:	08 95       	ret

00001a0c <UART_DisableInterrupt>:
* @return function error state.
*/
UART_ERROR_state_t UART_DisableInterrupt(uint8_t UartNumber,uint8_t UartInterruptType)
{
   /* making sure a valid interrupt type was sent to the function */
   if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
    1a0c:	60 38       	cpi	r22, 0x80	; 128
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <UART_DisableInterrupt+0x8>
    1a10:	60 34       	cpi	r22, 0x40	; 64
    1a12:	41 f4       	brne	.+16     	; 0x1a24 <UART_DisableInterrupt+0x18>
      /* do nothing */
   }
   
   volatile uint8_t * ptru8_UARTControlR;
   
   switch(UartNumber)
    1a14:	88 23       	and	r24, r24
    1a16:	41 f4       	brne	.+16     	; 0x1a28 <UART_DisableInterrupt+0x1c>
         return E_UART_INVALID_CH;
   }
   
   
   /* disable interrupt */
   *ptru8_UARTControlR &= ~(UartInterruptType);
    1a18:	8a b1       	in	r24, 0x0a	; 10
    1a1a:	60 95       	com	r22
    1a1c:	68 23       	and	r22, r24
    1a1e:	6a b9       	out	0x0a, r22	; 10
   
   /* return success status */
   return E_UART_SUCCESS;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	08 95       	ret
UART_ERROR_state_t UART_DisableInterrupt(uint8_t UartNumber,uint8_t UartInterruptType)
{
   /* making sure a valid interrupt type was sent to the function */
   if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
   {
      return E_UART_INVALID_INT_TYPE;
    1a24:	87 e0       	ldi	r24, 0x07	; 7
    1a26:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTControlR = &UART_CONTROL_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1a28:	86 e0       	ldi	r24, 0x06	; 6
   /* disable interrupt */
   *ptru8_UARTControlR &= ~(UartInterruptType);
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1a2a:	08 95       	ret

00001a2c <UART_SetCallback>:
* @param [in] Callback              -  callback function.
*
* @return function error state.
*/
UART_ERROR_state_t UART_SetCallback(uint8_t UartNumber, uint8_t UartInterruptType, Ptr_VoidFuncVoid_t Callback)
{
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
    1a36:	41 15       	cp	r20, r1
    1a38:	51 05       	cpc	r21, r1
    1a3a:	f1 f0       	breq	.+60     	; 0x1a78 <UART_SetCallback+0x4c>
   {
      return E_UART_NULL_PTR;
   }
   /* making sure a valid interrupt type was sent to the function */
   else if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
    1a3c:	60 38       	cpi	r22, 0x80	; 128
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <UART_SetCallback+0x18>
    1a40:	60 34       	cpi	r22, 0x40	; 64
    1a42:	e1 f4       	brne	.+56     	; 0x1a7c <UART_SetCallback+0x50>
      /* do nothing */
   }
   
   volatile uint8_t u8_UARTIndex;
   
   switch(UartNumber)
    1a44:	88 23       	and	r24, r24
    1a46:	e1 f4       	brne	.+56     	; 0x1a80 <UART_SetCallback+0x54>
   {
      case UART_CH_0:
         u8_UARTIndex = UART_CH_0;
    1a48:	19 82       	std	Y+1, r1	; 0x01
      default:
         return E_UART_INVALID_CH;
   }
   
   /* set callback function */
   if(TX_INT == UartInterruptType)
    1a4a:	60 34       	cpi	r22, 0x40	; 64
    1a4c:	49 f4       	brne	.+18     	; 0x1a60 <UART_SetCallback+0x34>
   {
      g_TxCallback[u8_UARTIndex] = Callback;
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	e6 5e       	subi	r30, 0xE6	; 230
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	51 83       	std	Z+1, r21	; 0x01
    1a5c:	40 83       	st	Z, r20
    1a5e:	13 c0       	rjmp	.+38     	; 0x1a86 <UART_SetCallback+0x5a>
   }
   else if(RX_INT == UartInterruptType)
    1a60:	60 38       	cpi	r22, 0x80	; 128
    1a62:	81 f4       	brne	.+32     	; 0x1a84 <UART_SetCallback+0x58>
   {
      g_RxCallback[u8_UARTIndex] = Callback;
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	ee 0f       	add	r30, r30
    1a6a:	ff 1f       	adc	r31, r31
    1a6c:	e4 5e       	subi	r30, 0xE4	; 228
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	51 83       	std	Z+1, r21	; 0x01
    1a72:	40 83       	st	Z, r20
   {
      return E_UART_INVALID_INT_TYPE;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <UART_SetCallback+0x5a>
UART_ERROR_state_t UART_SetCallback(uint8_t UartNumber, uint8_t UartInterruptType, Ptr_VoidFuncVoid_t Callback)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Callback)
   {
      return E_UART_NULL_PTR;
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <UART_SetCallback+0x5a>
   }
   /* making sure a valid interrupt type was sent to the function */
   else if (RX_INT != UartInterruptType && TX_INT != UartInterruptType)
   {
      return E_UART_INVALID_INT_TYPE;
    1a7c:	87 e0       	ldi	r24, 0x07	; 7
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <UART_SetCallback+0x5a>
   {
      case UART_CH_0:
         u8_UARTIndex = UART_CH_0;
         break;
      default:
         return E_UART_INVALID_CH;
    1a80:	86 e0       	ldi	r24, 0x06	; 6
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <UART_SetCallback+0x5a>
   {
      g_RxCallback[u8_UARTIndex] = Callback;
   }
   else
   {
      return E_UART_INVALID_INT_TYPE;
    1a84:	87 e0       	ldi	r24, 0x07	; 7
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1a86:	0f 90       	pop	r0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	08 95       	ret

00001a8e <UART_FlushReceiveBuffer>:
UART_ERROR_state_t UART_FlushReceiveBuffer(uint8_t UartNumber)
{
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    1a8e:	88 23       	and	r24, r24
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <UART_FlushReceiveBuffer+0x12>
   
   /* dummy variable to flush the buffer */
   uint8_t u8_dummy;
   
   /* while there is data in the buffer take it in the dummy variable */
   while ( (*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) )
    1a92:	5f 9b       	sbis	0x0b, 7	; 11
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <UART_FlushReceiveBuffer+0x16>
   {
      u8_dummy = *ptru8_UARTDataR;
    1a96:	8c b1       	in	r24, 0x0c	; 12
   
   /* dummy variable to flush the buffer */
   uint8_t u8_dummy;
   
   /* while there is data in the buffer take it in the dummy variable */
   while ( (*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) )
    1a98:	5f 99       	sbic	0x0b, 7	; 11
    1a9a:	fd cf       	rjmp	.-6      	; 0x1a96 <UART_FlushReceiveBuffer+0x8>
   {
      u8_dummy = *ptru8_UARTDataR;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	08 95       	ret
   {
      u8_dummy = *ptru8_UARTDataR;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
}
    1aa6:	08 95       	ret

00001aa8 <UART_SetData>:
*/
UART_ERROR_state_t UART_SetData(uint8_t UartNumber,uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    1aa8:	88 23       	and	r24, r24
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <UART_SetData+0x8>
      default:
         return E_UART_INVALID_CH;
   }

   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
    1aac:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
    1aae:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1ab0:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1ab2:	08 95       	ret

00001ab4 <UART_GetData>:
* @return function error state.
*/
UART_ERROR_state_t UART_GetData(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
    1ab4:	61 15       	cp	r22, r1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <UART_GetData+0x14>
      /* do nothing */
   }
   
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    1aba:	88 23       	and	r24, r24
    1abc:	39 f4       	brne	.+14     	; 0x1acc <UART_GetData+0x18>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
    1abe:	8c b1       	in	r24, 0x0c	; 12
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	80 83       	st	Z, r24
   
   /* return success status */
   return E_UART_SUCCESS;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 95       	ret
UART_ERROR_state_t UART_GetData(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
   {
      return E_UART_NULL_PTR;
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    1acc:	86 e0       	ldi	r24, 0x06	; 6
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
    1ace:	08 95       	ret

00001ad0 <UART_TXCallback>:
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
void UART_TXCallback(void)
{
   /*Do Nothing*/
}
    1ad0:	08 95       	ret

00001ad2 <SPI_TXCallback>:

void SPI_TXCallback(void)
{
   /*Do Nothing*/
}
    1ad2:	08 95       	ret

00001ad4 <I2C_RXCallback>:
}


void I2C_RXCallback(void)
{
   BCM_Send(COMM_UART_CH, 10, gau8_DataBuffer1, UART_TXCallback);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	6a e0       	ldi	r22, 0x0A	; 10
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	40 e5       	ldi	r20, 0x50	; 80
    1adc:	51 e0       	ldi	r21, 0x01	; 1
    1ade:	28 e6       	ldi	r18, 0x68	; 104
    1ae0:	3d e0       	ldi	r19, 0x0D	; 13
    1ae2:	0e 94 c9 03 	call	0x792	; 0x792 <BCM_Send>
   
}
    1ae6:	08 95       	ret

00001ae8 <UART_RXCallback>:
   /*Do Nothing*/
}

void UART_RXCallback(void)
{
   BCM_Send(COMM_SPI_CH, 10, gau8_DataBuffer2, SPI_TXCallback);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	6a e0       	ldi	r22, 0x0A	; 10
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	46 e4       	ldi	r20, 0x46	; 70
    1af0:	51 e0       	ldi	r21, 0x01	; 1
    1af2:	29 e6       	ldi	r18, 0x69	; 105
    1af4:	3d e0       	ldi	r19, 0x0D	; 13
    1af6:	0e 94 c9 03 	call	0x792	; 0x792 <BCM_Send>
}
    1afa:	08 95       	ret

00001afc <main>:
}

int main(void)
{
   /* Enable Globale Interrupt */
   INTERRUPTS_Enable();
    1afc:	0e 94 c2 07 	call	0xf84	; 0xf84 <INTERRUPTS_Enable>
   
   BCM_Receive(COMM_UART_CH, 10, gau8_DataBuffer2, UART_RXCallback);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	6a e0       	ldi	r22, 0x0A	; 10
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	46 e4       	ldi	r20, 0x46	; 70
    1b08:	51 e0       	ldi	r21, 0x01	; 1
    1b0a:	24 e7       	ldi	r18, 0x74	; 116
    1b0c:	3d e0       	ldi	r19, 0x0D	; 13
    1b0e:	0e 94 36 04 	call	0x86c	; 0x86c <BCM_Receive>
   BCM_Receive(COMM_I2C_CH, 10, gau8_DataBuffer1, I2C_RXCallback);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	6a e0       	ldi	r22, 0x0A	; 10
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	40 e5       	ldi	r20, 0x50	; 80
    1b1a:	51 e0       	ldi	r21, 0x01	; 1
    1b1c:	2a e6       	ldi	r18, 0x6A	; 106
    1b1e:	3d e0       	ldi	r19, 0x0D	; 13
    1b20:	0e 94 36 04 	call	0x86c	; 0x86c <BCM_Receive>


   while (TRUE)
   {
      BCM_RxMainFunction();
    1b24:	0e 94 51 03 	call	0x6a2	; 0x6a2 <BCM_RxMainFunction>
      BCM_TxMainFunction();
    1b28:	0e 94 74 02 	call	0x4e8	; 0x4e8 <BCM_TxMainFunction>
    1b2c:	fb cf       	rjmp	.-10     	; 0x1b24 <main+0x28>

00001b2e <_exit>:
    1b2e:	f8 94       	cli

00001b30 <__stop_program>:
    1b30:	ff cf       	rjmp	.-2      	; 0x1b30 <__stop_program>
